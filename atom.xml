<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蛙蛙池塘</title>
  <subtitle>欢迎来到蛙蛙池塘</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ihuhao.com/"/>
  <updated>2024-10-26T08:49:36.379Z</updated>
  <id>http://blog.ihuhao.com/</id>
  
  <author>
    <name>onlytiancai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>波动率预测</title>
    <link href="http://blog.ihuhao.com/2024/10/26/%E6%B3%A2%E5%8A%A8%E7%8E%87%E9%A2%84%E6%B5%8B/"/>
    <id>http://blog.ihuhao.com/2024/10/26/波动率预测/</id>
    <published>2024-10-26T08:48:04.000Z</published>
    <updated>2024-10-26T08:49:36.379Z</updated>
    
    <content type="html">&lt;h2 id=&quot;预测未来一周的股价和波动率哪个更可行？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#预测未来一周的股价和波动率哪个更可行？&quot;&gt;¶&lt;/a&gt;预测未来一周的股价和波动率哪个更可行？&lt;/h2&gt;
&lt;p&gt;未来一周的股价预测和波动率预测相比，波动率预测通常更可行，原因如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;波动率相对稳定且具有一定的规律&lt;/strong&gt;：波动率在短期内往往受到已知的事件驱动，比如财报发布、经济数据公布、重要会议（如美联储会议）等。这些事件往往对市场波动产生显著影响，使波动率在事件前后具有相对规律性，而价格本身的走向（上涨或下跌）则更难预测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;波动率模型更成熟&lt;/strong&gt;：金融市场中有许多基于统计的波动率模型，比如GARCH（广义自回归条件异方差）模型和EGARCH模型，这些模型通常能够捕捉波动率的自相关性和异方差性特征，而股价本身则因为价格波动的方向性更加随机，难以用单一模型描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;波动率对市场情绪的反应更加直接&lt;/strong&gt;：波动率可以被视为市场情绪的反映，它通常会在市场恐慌情绪增加或不确定性加剧时上升，而当市场情绪趋于平稳时下降。因此，短期内影响市场情绪的因素在预测波动率时作用较大，而股价的方向则容易受到更多不确定因素的影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;股价受多种不确定因素影响&lt;/strong&gt;：股价在短期内的变化既包括基本面（如财务数据、经济指标）影响，也受到技术面（技术指标、交易量）和市场情绪的波动。尤其是外部不确定事件（如突发的国际事件、政策变动）会对股价产生随机性冲击，使得短期内股价预测的准确性大大降低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;实际操作中的应用&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#实际操作中的应用&quot;&gt;¶&lt;/a&gt;实际操作中的应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果投资者想要根据波动率进行操作，可以关注VIX指数（代表市场波动预期的指标）或个股的隐含波动率，并利用期权或其他衍生品进行波动性交易。&lt;/li&gt;
&lt;li&gt;股价预测方面，虽然一周的股价变动难以精准预测，但可以根据技术指标（如移动平均、布林带等）和市场情绪指标来设定区间预测，配合风险控制策略来减少损失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，若选择预测未来一周的市场动态，基于波动率的预测更可靠，也更适用于设计防御性或对冲型策略。&lt;/p&gt;
&lt;h2 id=&quot;具体如何预测下周的波动率走势&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#具体如何预测下周的波动率走势&quot;&gt;¶&lt;/a&gt;具体如何预测下周的波动率走势&lt;/h2&gt;
&lt;p&gt;预测下周的波动率走势通常基于历史数据的统计模型、市场事件和情绪分析，以下是具体的步骤和方法：&lt;/p&gt;
&lt;h3 id=&quot;1-数据准备&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-数据准备&quot;&gt;¶&lt;/a&gt;1. &lt;strong&gt;数据准备&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;收集历史数据&lt;/strong&gt;：获取标的资产的价格数据（如日收盘价、最高价、最低价）以及市场波动率数据（如VIX指数、隐含波动率）。频率可以按日、每小时或更高频率，取决于模型的需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算历史波动率&lt;/strong&gt;：使用数据计算历史波动率，通常有多种方法，如日收益率的标准差、移动窗口下的年化波动率等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-选择并构建模型&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2-选择并构建模型&quot;&gt;¶&lt;/a&gt;2. &lt;strong&gt;选择并构建模型&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;2-1-GARCH模型系列&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2-1-GARCH模型系列&quot;&gt;¶&lt;/a&gt;2.1. GARCH模型系列&lt;/h4&gt;
&lt;p&gt;GARCH（广义自回归条件异方差）模型用于捕捉波动率的波动性和自相关性，是金融市场常用的波动率预测模型之一。常见的GARCH模型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GARCH(1,1)&lt;/strong&gt;：假设波动率依赖于前一日的波动率和残差平方，可以捕捉波动率的聚集效应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EGARCH&lt;/strong&gt;（指数GARCH）：相比标准GARCH模型，EGARCH允许波动率为非对称性，也就是说，当市场出现极端负面变化时，波动率上升更快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GJR-GARCH&lt;/strong&gt;：进一步增加了对市场下跌或上涨时波动率不同反应的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将历史波动率数据或价格收益率序列输入模型，以拟合参数。&lt;/li&gt;
&lt;li&gt;使用模型输出未来一周每日波动率的预测值。&lt;/li&gt;
&lt;li&gt;根据模型的拟合效果，分析未来一周波动率是否会呈现上升或下降趋势。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-2-隐含波动率模型&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2-2-隐含波动率模型&quot;&gt;¶&lt;/a&gt;2.2. 隐含波动率模型&lt;/h4&gt;
&lt;p&gt;隐含波动率反映了市场对未来波动的预期。可以使用期权市场的隐含波动率（如VIX或个股的隐含波动率）来预测未来波动率。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;期权数据分析&lt;/strong&gt;：提取期权价格，计算不同到期时间和行权价格的隐含波动率，并根据不同期限的隐含波动率结构（IV Term Structure）推测短期波动率的变化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析隐含波动率曲面（Volatility Surface）&lt;/strong&gt;：观察隐含波动率的高低变化，通常波动率曲面形状的变化预示着市场波动的预期。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-3-基于事件的波动率预测&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2-3-基于事件的波动率预测&quot;&gt;¶&lt;/a&gt;2.3. 基于事件的波动率预测&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分析下周的市场事件&lt;/strong&gt;：例如财报、经济数据发布、重要政策会议等事件会直接影响波动率。可以通过事件日历对波动率做出判断，比如美联储决议日，市场通常预期波动率上升。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;历史相似事件的波动率模式&lt;/strong&gt;：对过去类似事件的市场反应进行分析。比如，若观察到每次非农就业数据发布日波动率显著上升，则本次非农数据发布日也可能出现类似情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-市场情绪与技术指标分析&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#3-市场情绪与技术指标分析&quot;&gt;¶&lt;/a&gt;3. &lt;strong&gt;市场情绪与技术指标分析&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;波动率指数（如VIX）&lt;/strong&gt;：通常情况下，VIX较高表明市场对未来波动的预期上升；较低则代表市场相对乐观。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术指标&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ATR（平均真实波幅）&lt;/strong&gt;：利用ATR指标衡量当前市场波动范围，结合趋势判断未来波动趋势。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;布林带&lt;/strong&gt;：当价格靠近布林带上轨时，可能会出现回调，而接近下轨时，波动率可能增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-整合预测结果&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#4-整合预测结果&quot;&gt;¶&lt;/a&gt;4. &lt;strong&gt;整合预测结果&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多模型综合分析&lt;/strong&gt;：可以将GARCH模型输出的波动率预测和隐含波动率预测结合，判断它们的预测结果是否一致，增强预测可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件风险修正&lt;/strong&gt;：如果下周有重要的市场事件，将其对波动率的潜在影响加入预测，调整最终波动率预测值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-风险管理和模型验证&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#5-风险管理和模型验证&quot;&gt;¶&lt;/a&gt;5. &lt;strong&gt;风险管理和模型验证&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证模型有效性&lt;/strong&gt;：基于历史数据回测模型，评估其预测精度和可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设定风险控制&lt;/strong&gt;：在制定交易策略时，基于预测的波动率区间设置止损、止盈和对冲措施，以应对模型失误或突发市场变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;示例：预测的简单案例&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#示例：预测的简单案例&quot;&gt;¶&lt;/a&gt;示例：预测的简单案例&lt;/h3&gt;
&lt;p&gt;假设上周VIX指数上升，且下周美联储有重要会议，历史数据显示美联储会议后波动率通常会有所上升。可以利用GARCH模型预测波动率上升的具体程度，同时结合隐含波动率观察市场的预期，并得出下周波动率可能上升的结论。&lt;/p&gt;
&lt;h2 id=&quot;用python写一个预测SPX下周波动率的代码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#用python写一个预测SPX下周波动率的代码&quot;&gt;¶&lt;/a&gt;用python写一个预测SPX下周波动率的代码&lt;/h2&gt;
&lt;p&gt;要用Python预测S&amp;amp;P 500（SPX）的下周波动率，我们可以使用历史波动率数据和GARCH模型。以下是一个示例代码，通过获取SPX的历史数据，使用&lt;code&gt;arch&lt;/code&gt;包来构建和训练GARCH模型，并预测下周的波动率。&lt;/p&gt;
&lt;p&gt;首先确保安装所需的Python库：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install yfinance arch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;步骤：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#步骤：&quot;&gt;¶&lt;/a&gt;步骤：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;获取历史数据&lt;/strong&gt;：使用&lt;code&gt;yfinance&lt;/code&gt;获取SPX的日收盘价数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算收益率&lt;/strong&gt;：将收盘价转换为对数收益率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建和训练GARCH模型&lt;/strong&gt;：利用&lt;code&gt;arch&lt;/code&gt;库的GARCH模型进行拟合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预测下周的波动率&lt;/strong&gt;：生成未来5天的波动率预测。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#代码&quot;&gt;¶&lt;/a&gt;代码&lt;/h3&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; yfinance &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; yf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; arch &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; arch_model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1. 获取历史数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用yfinance下载S&amp;amp;P 500的历史数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = yf.download(&lt;span class=&quot;string&quot;&gt;&#39;^GSPC&#39;&lt;/span&gt;, start=&lt;span class=&quot;string&quot;&gt;&#39;2018-01-01&#39;&lt;/span&gt;, end=&lt;span class=&quot;string&quot;&gt;&#39;2023-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = data[&lt;span class=&quot;string&quot;&gt;&#39;Adj Close&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2. 计算对数收益率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;returns = np.log(data / data.shift(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)).dropna()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 3. 构建GARCH模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用对数收益率的序列来拟合GARCH模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model = arch_model(returns, vol=&lt;span class=&quot;string&quot;&gt;&#39;Garch&#39;&lt;/span&gt;, p=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, q=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model_fit = model.fit(disp=&lt;span class=&quot;string&quot;&gt;&#39;off&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(model_fit.summary())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 4. 预测未来5天的波动率（假设是未来一周的波动率）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;forecast_horizon = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;volatility_forecast = model_fit.forecast(horizon=forecast_horizon)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 提取预测的波动率均值（年化）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;predicted_volatility = volatility_forecast.variance.values[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, :]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;predicted_volatility_annualized = np.sqrt(predicted_volatility * &lt;span class=&quot;number&quot;&gt;252&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 5. 输出下周的波动率预测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;未来5天（1周）每日预测波动率（年化）：&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, vol &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(predicted_volatility_annualized):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;f&quot;第&lt;span class=&quot;subst&quot;&gt;&amp;#123;i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;天：&lt;span class=&quot;subst&quot;&gt;&amp;#123;vol:&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;%&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 6. 可视化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.figure(figsize=(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(data.index, returns, label=&lt;span class=&quot;string&quot;&gt;&#39;Daily Returns&#39;&lt;/span&gt;, color=&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(data.index[-forecast_horizon:], np.sqrt(predicted_volatility) * np.sqrt(&lt;span class=&quot;number&quot;&gt;252&lt;/span&gt;), label=&lt;span class=&quot;string&quot;&gt;&#39;Predicted Volatility&#39;&lt;/span&gt;, color=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&#39;S&amp;amp;P 500 Returns and Predicted Volatility (Annualized)&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;代码说明&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#代码说明&quot;&gt;¶&lt;/a&gt;代码说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据获取&lt;/strong&gt;：&lt;code&gt;yfinance&lt;/code&gt;提供了SPX（标普500）的历史数据。我们使用&lt;code&gt;Adj Close&lt;/code&gt;来计算日收益率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GARCH模型&lt;/strong&gt;：GARCH(1,1)模型通常用于捕捉金融时间序列的条件波动性。该模型适合短期预测，因为它能够捕捉波动性聚集的特征。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;波动率预测&lt;/strong&gt;：&lt;code&gt;model_fit.forecast&lt;/code&gt;提供了未来5天的波动率预测。我们把每日预测的波动率年化，方便解读。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可视化&lt;/strong&gt;：将收益率和预测波动率绘制在图中，便于观察预测的波动率走势。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#结果&quot;&gt;¶&lt;/a&gt;结果&lt;/h3&gt;
&lt;p&gt;代码输出未来一周的每日波动率预测（年化形式），以及波动率变化趋势的图表。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;预测未来一周的股价和波动率哪个更可行？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#预测未来一周的股价和波动率哪个更可行？&quot;&gt;¶&lt;/a&gt;预测未来一周的股价和波动率哪个更可行？&lt;/h2&gt;
&lt;p&gt;未来一周的股价预测和波动率预测相比，波动率预测通常
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202408</title>
    <link href="http://blog.ihuhao.com/2024/08/05/202408/"/>
    <id>http://blog.ihuhao.com/2024/08/05/202408/</id>
    <published>2024-08-05T03:45:01.000Z</published>
    <updated>2024-10-22T02:51:39.767Z</updated>
    
    <content type="html">&lt;p&gt;xargs 多个命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /data/temp &amp;amp;&amp;amp; find . -type f -mmin +1 | xargs -I {} sh -c &#39;rsync -avP {} bak-data-server:/home/bakdata/ &amp;amp;&amp;amp; rm -f {}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=JgKbe5tcgZ0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=JgKbe5tcgZ0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新特性解读 | MySQL 8.0 增强逻辑备份恢复工具介绍&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/267294729&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/267294729&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL Shell UTIL 对象附带的备份工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随 MySQL 8.0.21 最新版本捆绑发布，自带多线程备份以及多线程恢复功能， 可以直接替代 mysqldump/mysqlpump。&lt;/li&gt;
&lt;li&gt;dump_instance/dumpInstance 用来多线程备份 MySQL 整个单机实例&lt;/li&gt;
&lt;li&gt;dump_schemas/dumpSchemas 用来多线程备份 MySQL 单个数据库&lt;/li&gt;
&lt;li&gt;load_dump/loadDump 用来多线程恢复之前两个工具导出的数据集文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL Shell 使用指南&lt;br&gt;
&lt;a href=&quot;https://www.jianshu.com/p/954a011c36f7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/954a011c36f7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装 mysql-shell，不要用 snap 安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;snap list
sudo snap remove mysql-shell
wget https://dev.mysql.com/get/mysql-apt-config_0.8.32-1_all.deb
sudo dpkg -i mysql-apt-config_0.8.32-1_all.deb
sudo apt-get update
sudo apt-get install mysql-shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MySQL 核心模块揭秘 | 28 期 | 什么时候释放锁？&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/egrrGrjpgX5tMw_xtWY9fw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/egrrGrjpgX5tMw_xtWY9fw&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select、update、delete 语句执行过程中，不管 where 条件是否命中索引，也不管是等值查询还是范围查询，只要扫描过的记录，都会加行锁。&lt;/li&gt;
&lt;li&gt;和 update、delete 不一样，select 只在需要加锁时，才会按照上面的逻辑加锁。&lt;/li&gt;
&lt;li&gt;可重复读（REPEATABLE-READ）、可串行化（SERIALIZABLE）两种隔离级别，
&lt;ul&gt;
&lt;li&gt;只要加了锁，不管是表锁还是行锁，都要等到事务提交或者回滚即将完成时才释放（手动加的表锁除外）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读未提交（READ-UNCOMMITTED）、读已提交（READ-COMMITTED）两种隔离级别，
&lt;ul&gt;
&lt;li&gt;如果发现记录不匹配 where 条件，会及时释放行锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PG 查看表大小&lt;br&gt;
SELECT pg_size_pretty(pg_total_relation_size(‘&lt;a href=&quot;http://public.xxx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;public.xxx&lt;/a&gt;’)),&lt;br&gt;
pg_size_pretty(pg_relation_size(‘&lt;a href=&quot;http://public.xxx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;public.xxx&lt;/a&gt;’)),&lt;br&gt;
pg_size_pretty(pg_indexes_size(‘&lt;a href=&quot;http://public.xxx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;public.xxx&lt;/a&gt;’));&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----------------+----------------+----------------+
| pg_size_pretty | pg_size_pretty | pg_size_pretty |
+----------------+----------------+----------------+
| 2827 GB        | 1188 GB        | 133 GB         |
+----------------+----------------+----------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;去掉重音&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import unidecode
&amp;gt;&amp;gt;&amp;gt; unidecode.unidecode(&#39;Ольга Павлова&#39;)
&amp;quot;Ol&#39;ga Pavlova&amp;quot;
&amp;gt;&amp;gt;&amp;gt; unidecode.unidecode(&#39;Эмиль Проказов&#39;)
&amp;quot;Emil&#39; Prokazov&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一文掌握逻辑门器件选型要点，国产替代哪家强？&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/658295483&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/658295483&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;74系列逻辑门系列的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）74：早期产品，目前仍在使用，逐渐被淘汰；&lt;/li&gt;
&lt;li&gt;（2）74H：74的改进型，属于高速TTL产品，其与非门传输时间达到10ns左右，但是电路静态功耗较大，逐渐被淘汰；&lt;/li&gt;
&lt;li&gt;（3）74S：TTL的高速型肖特基系列，采用抗饱和肖特基二极管，速度较高但是品种较少，非主流；&lt;/li&gt;
&lt;li&gt;（4）74LS：LS是低功耗肖特基，速度比HC系列的略快，属于TTL类的主要产品系列，工作于5V电压，品种和参加非常多，性价比高，在中小规模电路中应用普遍，LS输入开路为高电平，LS 输入端没有上拉或下拉要求，输出端体现下拉强上拉弱。&lt;/li&gt;
&lt;li&gt;（5）74HC：HC是高速CMOS标准逻辑电路系列，具有与74LS-系列同等工作度和CMOS固有的低功耗和宽电源电压范围（2V~6V），HC的输入电阻很高，开路状态下电平不定，因此输入端要求有上下拉电阻来确定空置时的电平，电阻取值范围1K~10KΩ；&lt;/li&gt;
&lt;li&gt;（6）74HCT：输入输出与LS系列兼容，但是功耗低；&lt;/li&gt;
&lt;li&gt;（7）74AS：是74S的后继产品，速度进一步提升到1.5ns，因此也成为“先进超高速肖特基”系列；&lt;/li&gt;
&lt;li&gt;（8）74ALS：“先进的低功耗肖特基”系列，属于74LS系列的后继产品，工作频率可达50MHz，典型速度4ns，典型功耗1mW，但是价格较高；&lt;/li&gt;
&lt;li&gt;（9）其他：74F采用高速肖特基电路，74AC是带缓冲功能的逻辑门。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV12e411L7QB/?spm_id_from=333.788&amp;amp;vd_source=fefee58242775b49fd927c748741105d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV12e411L7QB/?spm_id_from=333.788&amp;amp;vd_source=fefee58242775b49fd927c748741105d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;并发导入 8000 个文件到数据库的调度策略，多进程调度方案：&lt;br&gt;
1、起多个进程，每个进程处理一个文件列表，命令行参数传入 start_file_id 和 end_file_id&lt;br&gt;
2、处理某个文件时用 {file_id}.progress 保存该文件处理进度&lt;br&gt;
3、进程读取每读取 100 行 bulk insert 一次，成功后将行号写入进度文件&lt;br&gt;
4、如果进程停止后重启，根据当前处理文件的 file_id 读取进度，continue 掉已处理的行&lt;br&gt;
5、处理完一个文件后，将 {file_id}.progress 重命名为 {file_id}.done&lt;br&gt;
6、进程处理某个文件时，如果存在对应 {file_id}.done 文件则跳过该文件&lt;br&gt;
7、全程无锁无共享，可随时重启，随时从头跑，不重不漏&lt;/p&gt;
&lt;p&gt;查看进度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for f in  progress/*.progress;do echo $f,`cat $f`; done;
ls -l progress/*.done | wc -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加索引报错, tmp 所在磁盘满&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; alter table x add index ix_id(id);
ERROR 1030 (HY000): Got error 100 - &#39;InnoDB error&#39; from storage engine
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基于MySQL和Otter实现生产环境安全的数据同步及查询&lt;br&gt;
&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1789028486868642783&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baijiahao.baidu.com/s?id=1789028486868642783&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3、异地机房同步（是Otter最大的亮点之一，可以解决国际化问题把数据从国内同步到国外提供用户使用，在国内场景可以做到数据多机房容灾)&lt;/li&gt;
&lt;li&gt;4、双向同步（双向同步是在数据同步中最难搞的一种场景，Otter可以很好的应对这种场景，Otter有避免回环算法和数据一致性算法两种特性，保证双A机房模式下，数据保证最终一致性）
&lt;ul&gt;
&lt;li&gt;1）避免回环算法 (通用的解决方案，支持大部分关系型数据库)&lt;/li&gt;
&lt;li&gt;2）数据一致性算法 (保证双A机房模式下，数据保证最终一致性，亮点)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ADHD Test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how often do you have trouble wrapping up the final details of a project, once the challenging parts have been done?&lt;/li&gt;
&lt;li&gt;how often do you have difficulty getting things in order when you have to do a task that requires organization?&lt;/li&gt;
&lt;li&gt;how often do you have problems remembering appointments or obligations?&lt;/li&gt;
&lt;li&gt;when you have a task that requires a lot of thought, how often do you avoid or delay getting started?&lt;/li&gt;
&lt;li&gt;how often do you fidget or squirm with your hands or feet when you have to sit down for a long time?&lt;/li&gt;
&lt;li&gt;how often do you feel overly active and compelled to do things, like you were drven by a motor?&lt;/li&gt;
&lt;li&gt;how often do you make careless mistakes when you have to work on a boring or difficult project?&lt;/li&gt;
&lt;li&gt;how often do you have diffiulty keeping your attention when you are doing boring or repetitive work?&lt;/li&gt;
&lt;li&gt;how often do you have diffiulty keeping your attention when you are doing boring or repetitive work?&lt;/li&gt;
&lt;li&gt;how often do you have difficulty concentrating on what people say to you, event when they are speaking to you directly?&lt;/li&gt;
&lt;li&gt;how often do you misplace or have difficulty fiding things at home or at work?&lt;/li&gt;
&lt;li&gt;how often are you distracted by activity or noise around you?&lt;/li&gt;
&lt;li&gt;how often dou you leave your seat in meetings or other situations in which you are expected to remain seated?&lt;/li&gt;
&lt;li&gt;how often do you feel restless or fidgety?&lt;/li&gt;
&lt;li&gt;how often do you have difficulty unwinding and relaxing when you have time to yourself?&lt;/li&gt;
&lt;li&gt;how often do you find yourself talking too much when you are in social situations?&lt;/li&gt;
&lt;li&gt;when you’re in a conversation, how often do you find yourself finishing the sentences of the people you are talking to,before they can finish tehm themselves?&lt;/li&gt;
&lt;li&gt;how often do you have difficulty waiting your turn in situations when turn taking is required?&lt;/li&gt;
&lt;li&gt;how often do you interrupt others when they are busy?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Deep Tech, Explained&lt;br&gt;
From AI to quantum computing and bioengineering, deep tech is being used to solve tomorrow’s problems today.&lt;br&gt;
&lt;a href=&quot;https://builtin.com/artificial-intelligence/deep-tech&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://builtin.com/artificial-intelligence/deep-tech&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deep tech, or deep technology, describes the work of companies developing innovations that surpass technological benchmarks and push the boundaries of current technology.&lt;/p&gt;
&lt;p&gt;While deep tech companies are often involved in fields like artificial intelligence, biotechnology and quantum computing, the category also includes companies operating in agriculture, aerospace, green energy, mobility and more. Some have become household names, like Moderna, Tesla and Impossible Foods.&lt;/p&gt;
&lt;p&gt;【Rethinking IT】如何结合 Unifi 和 MikroTik 设备打造家庭网络&lt;br&gt;
&lt;a href=&quot;https://sspai.com/post/81572&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sspai.com/post/81572&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rcoh/angle-grinder&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rcoh/angle-grinder&lt;/a&gt;&lt;br&gt;
Angle-grinder allows you to parse, aggregate, sum, average, min/max, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don’t have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.&lt;/p&gt;
&lt;p&gt;数据库 name 列去重&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 把需要去重的列排序后导出导磁盘
mysql&amp;gt; select name INTO OUTFILE &#39;/data/mysqltmp/name.csv&#39; from t order by name;

# 用 uniq -c 命令过滤出出现过一次的 name，因为已经排序，所以不需要 sort 命令
$ pv name.csv | uniq -c| awk &#39;$1==2{print $2,$1}&#39; &amp;gt; duplicate_name.txt
29.1GiB 0:01:40 [ 297MiB/s] [==============================================================================================&amp;gt;] 100%
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first 20 hours – how to learn anything | Josh Kaufman | TEDxCSU&lt;br&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=5MgBikgcWnY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=5MgBikgcWnY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;agrind&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; tail -f /var/log/nginx/access.log | agrind &#39;* | parse &amp;quot;* * * * * * \&amp;quot;*,*\&amp;quot; * * \&amp;quot;* * *\&amp;quot;&amp;quot; as time,status,request_time,_,_,_,ip,_,_,_,method,url,http_version|count,p90(request_time) by url&#39;

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
 609028 ubuntu    20   0 5102012   1.8g   4620 S 100.0  11.6  28:43.72 agrind
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data compression in Mysql&lt;br&gt;
&lt;a href=&quot;https://medium.com/datadenys/data-compression-in-mysql-6a0668af8f08&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/datadenys/data-compression-in-mysql-6a0668af8f08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is Black Myth Wukong Worth Buying&lt;br&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=yFF8FWBKSzI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=yFF8FWBKSzI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Zstandard(zstd)压缩优化备份脚本，实现低负载备份网站数据&lt;br&gt;
&lt;a href=&quot;https://www.yunloc.com/2438.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.yunloc.com/2438.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;滴滴落地ZSTD压缩算法的实践分享&lt;br&gt;
&lt;a href=&quot;https://t.it168.com/article_6816820.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://t.it168.com/article_6816820.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ZSTD（Zstandard）底层基于FSE编码实现，具有出色的压缩和解压速度。ZSTD算法的实现经过了高度优化，通过SIMD等指令集能够充分利用硬件并行性，同时编码过程大量依赖位移运算来完成状态的切换，以此提高处理速度。ZSTD采用字典压缩算法，通过引用字典中的匹配项，能够大大减少重复数据的存储空间，提高压缩比。与此同时，ZSTD采用多级压缩策略，在不同的压缩级别中应用不同的压缩算法，能够在不同的应用场景中灵活地平衡速度和压缩比。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://python-zstandard.readthedocs.io/en/latest/concepts.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://python-zstandard.readthedocs.io/en/latest/concepts.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Counting &amp;amp; Timing&lt;br&gt;
&lt;a href=&quot;https://code.flickr.net/2008/10/27/counting-timing/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://code.flickr.net/2008/10/27/counting-timing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.vivgrid.com/quick-start&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.vivgrid.com/quick-start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一文学会 OpenAI 的函数调用功能 Function Calling&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/641239259&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/641239259&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cookbook.openai.com/examples/how_to_call_functions_with_chat_models&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cookbook.openai.com/examples/how_to_call_functions_with_chat_models&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个人，13年，70个创业项目，独立开发的超级传奇&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/T1MGR6yTh_3Z9nU3U9G-Yw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/T1MGR6yTh_3Z9nU3U9G-Yw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cookbook.openai.com/examples/structured_outputs_intro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cookbook.openai.com/examples/structured_outputs_intro&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;question = &amp;quot;how can I solve 8x + 7 = -23&amp;quot;

{
   &amp;quot;steps&amp;quot;: [
      {
         &amp;quot;explanation&amp;quot;: &amp;quot;First, we need to isolate the term with x on one side of the equation, so we subtract 7 from both sides.&amp;quot;,
         &amp;quot;output&amp;quot;: &amp;quot;8x + 7 - 7 = -23 - 7&amp;quot;
      },
      {
         &amp;quot;explanation&amp;quot;: &amp;quot;Simplify both sides. The 7 and -7 on the left-hand side cancel each other out, leaving 8x, and -23 - 7 simplifies to -30.&amp;quot;,
         &amp;quot;output&amp;quot;: &amp;quot;8x = -30&amp;quot;
      },
      {
         &amp;quot;explanation&amp;quot;: &amp;quot;To solve for x, divide both sides of the equation by 8, which is the coefficient of x.&amp;quot;,
         &amp;quot;output&amp;quot;: &amp;quot;8x/8 = -30/8&amp;quot;
      },
      {
         &amp;quot;explanation&amp;quot;: &amp;quot;Simplify -30/8 by reducing the fraction. Divide both numerator and denominator by their greatest common divisor, which is 2.&amp;quot;,
         &amp;quot;output&amp;quot;: &amp;quot;x = -15/4 or x = -3.75&amp;quot;
      }
   ],
   &amp;quot;final_answer&amp;quot;: &amp;quot;x = -3.75&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;古龙：最放浪的人，最贞洁的小说&lt;br&gt;
&lt;a href=&quot;https://m.thepaper.cn/baijiahao_9272512&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://m.thepaper.cn/baijiahao_9272512&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rany2/edge-tts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rany2/edge-tts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Programmable Music&lt;br&gt;
&lt;a href=&quot;http://overtone.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://overtone.github.io/&lt;/a&gt;&lt;br&gt;
音乐制作小 Tips：善用 DAW 软件和 MIDI 信号&lt;br&gt;
&lt;a href=&quot;https://www.sohu.com/a/682533469_121124710&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sohu.com/a/682533469_121124710&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://b23.tv/MxZntYv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://b23.tv/MxZntYv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;举世流行的作谱应用&lt;br&gt;
&lt;a href=&quot;https://musescore.org/zh-hans&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://musescore.org/zh-hans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MuseScore is an open source and free music notation software.&lt;br&gt;
&lt;a href=&quot;https://github.com/musescore/MuseScore&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/musescore/MuseScore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/azure/ai-services/speech-service/rest-text-to-speech?tabs=streaming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://learn.microsoft.com/en-us/azure/ai-services/speech-service/rest-text-to-speech?tabs=streaming&lt;/a&gt;&lt;br&gt;
ogg-16khz-16bit-mono-opus&lt;br&gt;
ogg-24khz-16bit-mono-opus&lt;br&gt;
ogg-48khz-16bit-mono-opus&lt;/p&gt;
&lt;p&gt;音频编解码器 - Opus&lt;br&gt;
&lt;a href=&quot;https://www.jianshu.com/p/be8d40b61171&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/be8d40b61171&lt;/a&gt;&lt;br&gt;
支持的特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比特率从 6kb/s 到 510 kb/s&lt;/li&gt;
&lt;li&gt;采样率从 8kHz（窄带）到 48kHz（全频段）&lt;/li&gt;
&lt;li&gt;帧大小从 2.5ms 到 60ms&lt;/li&gt;
&lt;li&gt;支持恒定比特率（CBR）和可变比特率（VBR）&lt;/li&gt;
&lt;li&gt;从窄带到全频带的音频带宽&lt;/li&gt;
&lt;li&gt;支持语音和音乐&lt;/li&gt;
&lt;li&gt;支持单声道和立体声&lt;/li&gt;
&lt;li&gt;支持多达255个通道（多流帧）&lt;/li&gt;
&lt;li&gt;动态可调比特率，音频带宽和帧大小&lt;/li&gt;
&lt;li&gt;良好的稳健性和隐蔽性&lt;/li&gt;
&lt;li&gt;浮点和定点实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 Flask 切到 FastAPI 后，起飞了！&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/m0_59596937/article/details/136383593&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/m0_59596937/article/details/136383593&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nuxt.js是一个非常强大的框架，但是并不是所有类型的网页都必须使用SSR技术。由于使用SSR需要服务端渲染每一个请求，对服务器资源要求高，尤其是高并发访问的情况，会大量占用服务端CPU资源。我们需要根据业务需求来决定使用什么技术栈去开发页面。&lt;/p&gt;
&lt;p&gt;1.SSR&lt;br&gt;
如果项目首屏是动态数据的，对首屏速度要求高且很在乎在搜索引擎的排名，可以考虑使用SSR。&lt;/p&gt;
&lt;p&gt;2.SSG&lt;br&gt;
如果项目首屏数据与用户不是强关联的、内容相对稳定的且需要SEO的可以考虑使用预渲染 SSG（Static Site Generation），Nuxt也可以做SSG，避免服务端的渲染压力。&lt;/p&gt;
&lt;p&gt;3.CSR&lt;br&gt;
如果网站只是内部产品不需要SEO，或者项目较小不太在意首屏性能的，或者项目是富交互和动态内容的应用，那么还是直接用Vue是最明智的选择。可以通过优化项目体积及其他优化方法如：骨架屏或者添加loading图等方式来优化用户体验。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/m0_55119483/article/details/131491881&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/m0_55119483/article/details/131491881&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;binlog 过期天数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show variables like &#39;%expire%&#39;;
+--------------------------------+---------+
| Variable_name                  | Value   |
+--------------------------------+---------+
| binlog_expire_logs_auto_purge  | ON      |
| binlog_expire_logs_seconds     | 2592000 |
| disconnect_on_expired_password | ON      |
| expire_logs_days               | 0       |
+--------------------------------+---------+
4 rows in set (0.01 sec)

mysql&amp;gt; select 2592000/60/60/24;
+------------------+
| 2592000/60/60/24 |
+------------------+
|  30.000000000000 |
+------------------+
1 row in set (0.00 sec)

set global binlog_expire_logs_seconds=4*24*60*60;
show binary logs;
purge binary logs to &#39;mysql80-bin.000164&#39;;
purge binary logs before &#39;2021-22-20 22:00:00&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将Vue项目迁移到Nuxt&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/664801054&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/664801054&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既然加法是基于群论的，为什么小学不先学群论？ - ReversedT的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/639591755/answer/3366904561&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/639591755/answer/3366904561&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/guide/reusability/composables#what-is-a-composable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cn.vuejs.org/guide/reusability/composables#what-is-a-composable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说说响应式和函数式&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/jjclove/article/details/124388096&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/jjclove/article/details/124388096&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dump mysql to parquet then query by duckdb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# install duckdb and csv2parquet
wget https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_cli-linux-amd64.zip &amp;amp;&amp;amp; unzip duckdb*.zip
cargo install csv2parquet
# dump data from mysql to parquet
mysql -h mysql-server -u readonly -p db -Bne &#39;select * from t limit 1000000;&#39; | pv -p --timer --rate --bytes |csv2parquet -d &#39;       &#39; /dev/stdin test.parquet
# query pqrquet by duckdb
duckdb -s &#39;select count(*) from &amp;quot;test.parquet&amp;quot;&#39;

curl &amp;lt;FILE_URL&amp;gt; | csv2parquet /dev/stdin /dev/stdout | aws s3 cp - &amp;lt;S3_DESTINATION&amp;gt;
csv2parquet --header false test.csv  test.parquet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[Python] Incrementally using ParquetWriter keeps data in memory (eventually running out of RAM for large datasets)&lt;br&gt;
&lt;a href=&quot;https://github.com/apache/arrow/issues/26073&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/apache/arrow/issues/26073&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is for you. It’s for everybody who plans to write some kind of HTTP service in Go. You may also find this useful if you’re learning Go, as lots of the examples follow good practices. Experienced gophers might also pick up some nice patterns.&lt;br&gt;
&lt;a href=&quot;https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instructors’ Guide to Raft&lt;br&gt;
&lt;a href=&quot;https://thesquareplanet.com/blog/instructors-guide-to-raft/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://thesquareplanet.com/blog/instructors-guide-to-raft/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Students’ Guide to Raft&lt;br&gt;
&lt;a href=&quot;https://thesquareplanet.com/blog/students-guide-to-raft/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://thesquareplanet.com/blog/students-guide-to-raft/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL 输出到文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pager cat &amp;gt;/tmp/test.txt 
nopager
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;埃隆·马斯克认为每个孩子都应该了解的50种认知偏见&lt;br&gt;
&lt;a href=&quot;https://36kr.com/p/1745363984445063&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://36kr.com/p/1745363984445063&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/slimtoolkit/slim&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/slimtoolkit/slim&lt;/a&gt;&lt;br&gt;
Don’t change anything in your container image and minify it by up to 30x (and for compiled languages even more) making it secure too! (free and open source)&lt;/p&gt;
&lt;p&gt;Python环境管理大比拼：pip、Conda、Pyenv、Rye、Virtualenv、PDM、Poetry等工具&lt;br&gt;
&lt;a href=&quot;https://new.qq.com/rain/a/20240303A055WM00&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://new.qq.com/rain/a/20240303A055WM00&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;uv-速度飞快的pip替代&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/689976933&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/689976933&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Linux系统中，恢复已删除的.log文件的难度取决于多个因素，包括文件系统类型、文件删除后是否被覆盖等。以下是一些可能的恢复方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;extundelete&lt;/code&gt;&lt;/strong&gt;：&lt;br&gt;
如果你使用的是&lt;code&gt;ext3&lt;/code&gt;或&lt;code&gt;ext4&lt;/code&gt;文件系统，可以尝试使用&lt;code&gt;extundelete&lt;/code&gt;工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，卸载该分区（如果可以的话），然后运行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extundelete /dev/sdX --restore-file /path/to/your/file.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这将尝试恢复该文件并将其保存到当前目录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;photorec&lt;/code&gt;&lt;/strong&gt;：&lt;br&gt;
&lt;code&gt;photorec&lt;/code&gt;是一个更通用的恢复工具，可以尝试恢复各种类型的文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;code&gt;testdisk&lt;/code&gt;，它包含了&lt;code&gt;photorec&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install testdisk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后运行&lt;code&gt;photorec&lt;/code&gt;并按照提示选择分区和文件类型进行恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查备份&lt;/strong&gt;：&lt;br&gt;
如果你有定期备份，可以从备份中恢复该文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查看日志轮转&lt;/strong&gt;：&lt;br&gt;
如果系统使用了日志轮转（如&lt;code&gt;logrotate&lt;/code&gt;），可能会在某个位置保存旧的日志文件。可以检查&lt;code&gt;/var/log&lt;/code&gt;目录下是否有相关的备份文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;请注意，文件删除后，新的数据写入可能会覆盖原有的数据，降低恢复的成功率。因此，尽快采取恢复措施会更有效。&lt;/p&gt;
&lt;p&gt;VScode CPU 占用过高 | search.follow false &amp;amp; exclude nodemodules&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/dhjy123/p/11906142.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/dhjy123/p/11906142.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python bloom filter&lt;br&gt;
from pybloom_live import BloomFilter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 创建布隆过滤器，设置最大元素数量和误判率
bloom = BloomFilter(capacity=1000, error_rate=0.1)

# 添加元素
bloom.add(&amp;quot;apple&amp;quot;)
bloom.add(&amp;quot;banana&amp;quot;)

# 检查元素
print(&amp;quot;apple&amp;quot; in bloom)   # 输出: True
print(&amp;quot;banana&amp;quot; in bloom)  # 输出: True
print(&amp;quot;cherry&amp;quot; in bloom)  # 输出: False（可能为假阳性）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按行号分隔&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;split --additional-suffix=.csv -d --numeric-suffixes=0 --suffix-length=3 -l 200000 abc.csv abc_ 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sed 打印第 n-m 行并显示原始行号&lt;br&gt;
sed -n ‘4388879,4388883{=;p}’ a.txt&lt;/p&gt;
&lt;p&gt;_csv.Error: line contains NUL 错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;s/\x0//g&#39; scileads-phone-numbers-with-source.all.filtered.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;binlog 提取某个表的操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqlbinlog --database=your_database --tables=your_database.your_table /path/to/binlog.000001 &amp;gt; /path/to/output.sql
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;xargs 多个命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /data/temp &amp;amp;&amp;amp; find . -type f -mmin +1 | xargs -I {} sh -c &#39;rsync -avP {} bak-data-server:/home/bakda
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>en2024</title>
    <link href="http://blog.ihuhao.com/2024/07/24/en2024/"/>
    <id>http://blog.ihuhao.com/2024/07/24/en2024/</id>
    <published>2024-07-24T01:29:58.000Z</published>
    <updated>2024-07-24T01:48:29.415Z</updated>
    
    <content type="html">&lt;p&gt;In a world where the internet has become an integral part of our daily lives, there’s a remarkable opportunity to immerse ourselves in foreign languages without ever leaving the comfort of our screens.&lt;/p&gt;
&lt;p&gt;we can seamlessly integrate language learning into our web browsing activities. In this article, we’ll explore the top Chrome extensions that can help you learn a new language while you surf the web.&lt;/p&gt;
&lt;p&gt;Improve your skills on your own, effectively and enjoyably, by watching films and series in the language you study.&lt;/p&gt;
&lt;p&gt;Language Reactor is a powerful toolbox for learning languages. It helps you to discover, understand, and learn from native materials. Studying will become more effective, interesting, and enjoyable! (formerly called ‘Language Learning with Netflix’)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In a world where the internet has become an integral part of our daily lives, there’s a remarkable opportunity to immerse ourselves in fo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202406</title>
    <link href="http://blog.ihuhao.com/2024/06/14/202406/"/>
    <id>http://blog.ihuhao.com/2024/06/14/202406/</id>
    <published>2024-06-14T02:17:40.000Z</published>
    <updated>2024-08-05T03:42:18.939Z</updated>
    
    <content type="html">&lt;p&gt;Python One Billion Row Challenge — From 10 Minutes to 4 Seconds&lt;br&gt;
&lt;a href=&quot;https://archive.is/a644q&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://archive.is/a644q&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Processing One Billion Rows in PHP!&lt;br&gt;
&lt;a href=&quot;https://dev.to/realflowcontrol/processing-one-billion-rows-in-php-3eg0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.to/realflowcontrol/processing-one-billion-rows-in-php-3eg0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql 中如下 json 字段&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;,
   &amp;quot;results&amp;quot;: [
      {
         &amp;quot;types&amp;quot;: [
            &amp;quot;locality&amp;quot;,
            &amp;quot;political&amp;quot;
         ],
         &amp;quot;place_id&amp;quot;: &amp;quot;ChIJpdtYF6azhkcRmu5nCgU7BtM&amp;quot;,
         &amp;quot;formatted_address&amp;quot;: &amp;quot;20874 Busnago, Province of Monza and Brianza, Italy&amp;quot;,
         &amp;quot;address_components&amp;quot;: [
            {
               &amp;quot;types&amp;quot;: [
                  &amp;quot;locality&amp;quot;,
                  &amp;quot;political&amp;quot;
               ],
               &amp;quot;long_name&amp;quot;: &amp;quot;Busnago&amp;quot;,
               &amp;quot;short_name&amp;quot;: &amp;quot;Busnago&amp;quot;
            },
            {
               &amp;quot;types&amp;quot;: [
                  &amp;quot;administrative_area_level_3&amp;quot;,
                  &amp;quot;political&amp;quot;
               ],
               &amp;quot;long_name&amp;quot;: &amp;quot;Busnago&amp;quot;,
               &amp;quot;short_name&amp;quot;: &amp;quot;Busnago&amp;quot;
            },
            {
               &amp;quot;types&amp;quot;: [
                  &amp;quot;administrative_area_level_2&amp;quot;,
                  &amp;quot;political&amp;quot;
               ],
               &amp;quot;long_name&amp;quot;: &amp;quot;Province of Monza and Brianza&amp;quot;,
               &amp;quot;short_name&amp;quot;: &amp;quot;MB&amp;quot;
            },
            {
               &amp;quot;types&amp;quot;: [
                  &amp;quot;administrative_area_level_1&amp;quot;,
                  &amp;quot;political&amp;quot;
               ],
               &amp;quot;long_name&amp;quot;: &amp;quot;Lombardy&amp;quot;,
               &amp;quot;short_name&amp;quot;: &amp;quot;Lombardy&amp;quot;
            },
            {
               &amp;quot;types&amp;quot;: [
                  &amp;quot;country&amp;quot;,
                  &amp;quot;political&amp;quot;
               ],
               &amp;quot;long_name&amp;quot;: &amp;quot;Italy&amp;quot;,
               &amp;quot;short_name&amp;quot;: &amp;quot;IT&amp;quot;
            },
            {
               &amp;quot;types&amp;quot;: [
                  &amp;quot;postal_code&amp;quot;
               ],
               &amp;quot;long_name&amp;quot;: &amp;quot;20874&amp;quot;,
               &amp;quot;short_name&amp;quot;: &amp;quot;20874&amp;quot;
            }
         ]
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要取 types 里包含 administrative_area_level_3 的上级节点的 long_name 值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select 
    country_code,
    location,response-&amp;gt;&amp;gt;&#39;$.results[0].formatted_address&#39; formatted_address,
    json_unquote(
        json_extract(
            response,
            concat(
                &#39;$.results[0]&#39;,
                REGEXP_REPLACE(
                    JSON_SEARCH(
                        response-&amp;gt;&amp;gt;&#39;$.results[0]&#39;,
                        &#39;one&#39;, 
                        &#39;administrative_area_level_1&#39;
                    ),
                    &#39;&amp;quot;|\\$|\\.types\\[[0-9]]&#39;,&#39;&#39;
                ),
                &#39;.long_name&#39;)
        )
    ) administrative_area_level_1 
from t limit 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;先用 JSON_SEARCH 得到 &lt;code&gt;administrative_area_level_1&lt;/code&gt; 的路径，类似 &lt;code&gt;$.address_components[3].types[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 REGEXP_REPLACE 替换掉前面的 &lt;code&gt;$&lt;/code&gt; 和最后的 &lt;code&gt;.types[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 concat 拼接所需的 json path，类似 &lt;code&gt;$.results[0].address_components[2].long_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 json_extract 取出所需要的值&lt;/li&gt;
&lt;li&gt;用 json_unquote 去掉结果两侧的引号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;乱码替换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; re.sub(r&#39;x(\w\d)x(\w\d)&#39;,lambda x: bytes.fromhex(x.group(1)+x.group(2)).decode(&#39;utf-8&#39;),&#39;Logrosxc3xa1n&#39;)
&#39;Logrosán&#39;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&#39;x(\w\d)x(\w\d)&#39;,lambda x: bytes.fromhex(x.group(1)+x.group(2)).decode(&#39;utf-8&#39;),&#39;Trxc3xa9mentines&#39;)
&#39;Trémentines&#39;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&#39;x(\w\d)x(\w\d)&#39;,lambda x: bytes.fromhex(x.group(1)+x.group(2)).decode(&#39;utf-8&#39;),&#39;Trxc3xa9lazxc3xa9&#39;)
&#39;Trélazé&#39;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&#39;x(\w\d)x(\w\d)&#39;,lambda x: bytes.fromhex(x.group(1)+x.group(2)).decode(&#39;utf-8&#39;),&#39;Jxc3xa4msxc3xa4nkoski&#39;)
&#39;Jämsänkoski&#39;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&#39;x(\w\d)x(\w\d)&#39;,lambda x: bytes.fromhex(x.group(1)+x.group(2)).decode(&#39;utf-8&#39;),&#39;Sxc3xb8llerxc3xb8d&#39;)
&#39;Søllerød&#39;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&#39;x([0-9a-fA-F]{1,2})x([0-9a-fA-F]{1,2})&#39;,lambda x: bytes.fromhex(x.group(1)+x.group(2)).decode(&#39;utf-8&#39;),&#39;Sxc3xb8llerxc3xb8d&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‘Søllerød’&lt;/p&gt;
&lt;p&gt;手搓一个最小的 Agent 系统 — Tiny Agent&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/699732624&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/699732624&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MetaGPT: 本质类似于公司的组织架构，横向同一层级的工作模式，可能是COT、TOT、GOT，纵向深度有不同的层级，如role、action、action node等&lt;/li&gt;
&lt;li&gt;React: 就像是个不是特别聪明的孩子，要把想法写出来，然后去综合所有想法和观察，接着再做出相应的动作。&lt;/li&gt;
&lt;li&gt;Reflexion: 一种“语言”强化的新范式，它将策略参数化为代理的记忆编码，并配对参数选择LLM。&lt;/li&gt;
&lt;li&gt;Toolformer: 一种学习以新颖方式使用工具的模型，它通过自监督的方式学习如何使用不同的工具，如搜索引擎、计算器和翻译系统。&lt;/li&gt;
&lt;li&gt;Swiftsage: 用一个小模型直接输出决策，当小模型不行时改用大模型通过复杂planning输出决策。&lt;/li&gt;
&lt;li&gt;Creator: 通过工具创造实现了大模型抽象与具象思维能力的解耦，面对有难度的问题能够保持更好的鲁棒性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenAI 不可用？使用开源模型一键替换 OpenAI API&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MjkxNjA2Mg==&amp;amp;mid=2247487114&amp;amp;idx=1&amp;amp;sn=0c443a88bafa49daec18f8a16d0c6284&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzI2MjkxNjA2Mg==&amp;amp;mid=2247487114&amp;amp;idx=1&amp;amp;sn=0c443a88bafa49daec18f8a16d0c6284&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --rm -p 8080:8080 --name api-server secondstate/llama-3-8b-nomic-1.5:latest

curl -X POST http://localhost:8080/v1/chat/completions \
    -H &#39;accept:application/json&#39; \
    -H &#39;Content-Type: application/json&#39; \
    -d &#39;{&amp;quot;messages&amp;quot;:[{&amp;quot;role&amp;quot;:&amp;quot;system&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;You are a helpful assistant.&amp;quot;}, {&amp;quot;role&amp;quot;:&amp;quot;user&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;What is the capital of France?&amp;quot;}], &amp;quot;model&amp;quot;: &amp;quot;Meta-Llama-3-8B-Instruct-Q5_K_M.gguf&amp;quot;}&#39;

curl -X POST http://localhost:8080/v1/embeddings \
    -H &#39;accept:application/json&#39; \
    -H &#39;Content-Type: application/json&#39; \
    -d &#39;{&amp;quot;model&amp;quot;: &amp;quot;nomic-embed-text-v1.5.f16&amp;quot;, &amp;quot;input&amp;quot;:[&amp;quot;LlamaEdge is the easiest &amp;amp; fastest way to run customized and fine-tuned LLMs locally or on the edge.&amp;quot;]}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.secondstate.io/articles/wasm-runtime-agi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.secondstate.io/articles/wasm-runtime-agi/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;长时间以来，来自开源生态的朋友们一致支持着Qwen的发展，包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微调（Axolotl、Llama-Factory、Firefly、Swift、XTuner）、&lt;/li&gt;
&lt;li&gt;量化（AutoGPTQ、AutoAWQ、Neural Compressor）、&lt;/li&gt;
&lt;li&gt;部署（vLLM、SGL、SkyPilot、TensorRT-LLM、OpenVino、TGI）、&lt;/li&gt;
&lt;li&gt;本地运行（MLX、Llama.cpp、Ollama、LM Studio）、&lt;/li&gt;
&lt;li&gt;Agent及RAG（检索增强生成）框架（LlamaIndex, CrewAI, OpenDevin）、&lt;/li&gt;
&lt;li&gt;评测（LMSys, OpenCompass, Open LLM Leaderboard）、&lt;/li&gt;
&lt;li&gt;模型二次开发（Dolphin, Openbuddy）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/703883561&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/703883561&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://llamaedge.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://llamaedge.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Q: Why can’t I use Python to run the LLM inference?&lt;br&gt;
A: You can certainly use Python to run LLMs and even start an API server using Python. But keep mind that PyTorch has over 5GB of complex dependencies. These dependencies often conflict with Python toolchains such as LangChain. It is often a nightmare to set up Python dependencies across dev and deployment machines, especially with GPUs and containers.&lt;/p&gt;
&lt;p&gt;In contrast, the entire LlamaEdge runtime is less than 30MB. It is has no external dependencies. Just install LlamaEdge and copy over your compiled application file!&lt;/p&gt;
&lt;p&gt;Q: Why can’t I just use native (C/C++ compiled) inference engines?&lt;br&gt;
A: The biggest issue with native compiled apps is that they are not portable. You must rebuild and retest for each computer you deploy the application. It is a very tedious and error prone progress. LlamaEdge programs are written in Rust (soon JS) and compiled to Wasm. The Wasm app runs as fast as native apps, and is entirely portable.&lt;/p&gt;
&lt;p&gt;wasm 使用案例&lt;br&gt;
&lt;a href=&quot;https://wasmedge.org/docs/zh/start/usage/use-cases/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wasmedge.org/docs/zh/start/usage/use-cases/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阿里千问&lt;br&gt;
&lt;a href=&quot;https://qwen.readthedocs.io/en/latest/framework/LlamaIndex.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://qwen.readthedocs.io/en/latest/framework/LlamaIndex.html&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地安装，测试，部署很方便，支持多种方式，满足不同需求&lt;/li&gt;
&lt;li&gt;量化，fine tune(有监督训练),  embedding(RAG)都支持本地实现&lt;/li&gt;
&lt;li&gt;function call，Agent, LangChain相关功能需要使用阿里的dashscope服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;跨设备运行小小阿里云通义千问大模型 Qwen1.5-0.5B-Chat&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/684034037&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/684034037&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mac如何安装git-lfs，以及modelscope的使用示例&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/692680970&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/692680970&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ModelScope+transformers调用llama模型&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/698481268&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/698481268&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/681690385&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/681690385&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wasmedge.org/docs/develop/rust/wasinn/llm_inference/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wasmedge.org/docs/develop/rust/wasinn/llm_inference/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-m, --model-alias &amp;lt;ALIAS&amp;gt;
      Model alias [default: default]
-c, --ctx-size &amp;lt;CTX_SIZE&amp;gt;
      Size of the prompt context [default: 4096]
-n, --n-predict &amp;lt;N_PRDICT&amp;gt;
      Number of tokens to predict [default: 1024]
-g, --n-gpu-layers &amp;lt;N_GPU_LAYERS&amp;gt;
      Number of layers to run on the GPU [default: 100]
-b, --batch-size &amp;lt;BATCH_SIZE&amp;gt;
      Batch size for prompt processing [default: 4096]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;苹果AppleMacOs系统Sonoma本地部署无内容审查(NSFW)大语言量化模型Causallm&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/686099177&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/686099177&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://hf-mirror.com/tastypear/CausalLM-7B-DPO-alpha-GGUF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hf-mirror.com/tastypear/CausalLM-7B-DPO-alpha-GGUF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LLaMA-Factory QuickStart&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/695287607&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/695287607&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 Python库DEAP的多目标优化示例&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/gongdiwudu/article/details/138033230&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/gongdiwudu/article/details/138033230&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pygmo multi-objective optimization with constraints&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/77411477/pygmo-multi-objective-optimization-with-constraints&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/77411477/pygmo-multi-objective-optimization-with-constraints&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;命令行听歌&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for %%i in (D:\mp3\*.mp3) do D:\haohu\soft\ffmpeg\bin\ffplay &amp;quot;%%i&amp;quot; -autoexit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基于STM32+VS1053B的MP3设计&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/690699207&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/690699207&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里我们使用的是stm32F103VET6，内部Flash有512K，100pin的外部引脚，属于大容量芯片，足够我们diy。对于本设计，stm32这一块用到的知识点有：SDIO驱动SD卡，SPI驱动VS1053B芯片，IIC驱动OLED；对于程序，用的是stm32标准库&lt;/p&gt;
&lt;p&gt;功能范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 专注于通用计算任务。&lt;/li&gt;
&lt;li&gt;SoC 集成了多个功能模块，满足复杂的计算和通信需求。&lt;/li&gt;
&lt;li&gt;MCU 专注于特定的嵌入式应用，如控制系统、传感器等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用领域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 广泛用于个人电脑、服务器等通用计算设备。&lt;/li&gt;
&lt;li&gt;SoC 常见于智能手机、平板电脑等便携设备。&lt;/li&gt;
&lt;li&gt;MCU 主要应用于嵌入式系统，如家电、汽车电子等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集成程度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 通常作为计算机系统的核心，但需要其他芯片的支持。&lt;/li&gt;
&lt;li&gt;SoC 在一个芯片上集成了多个功能模块。&lt;/li&gt;
&lt;li&gt;MCU 是一种完整的嵌入式系统，集成了所有必要的组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/github_35631540/article/details/139122039&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/github_35631540/article/details/139122039&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ESP8266
&lt;ul&gt;
&lt;li&gt;应用场景：主要用于 WiFi 联网项目，如智能家居设备、IoT 传感器和无线控制。&lt;/li&gt;
&lt;li&gt;优势：低成本、内置 Wi-Fi 功能、低功耗模式，易于接入互联网。&lt;/li&gt;
&lt;li&gt;代表产品：NodeMCU 开发板、ESP-01模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;51单片机
&lt;ul&gt;
&lt;li&gt;应用场景：广泛应用于教育和基础电子学习、简单的控制系统如家电控制、工业仪器等。&lt;/li&gt;
&lt;li&gt;优势：成本极低、指令简单、资源占用小，适合初学者和低成本项目。&lt;/li&gt;
&lt;li&gt;代表产品：Intel 的 MCS-51 系列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ESP32
&lt;ul&gt;
&lt;li&gt;应用场景：IoT设备，智能家居，低功耗传感器网络，音频应用等。&lt;/li&gt;
&lt;li&gt;优势：比 ESP8266 更强大的 CPU，支持蓝牙和 Wi-Fi，更多的 I/O 端口，更佳的安全性能。&lt;/li&gt;
&lt;li&gt;代表产品：ESP32 开发板。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arduino
&lt;ul&gt;
&lt;li&gt;应用场景：广泛用于教育、原型开发、艺术作品、简单的机器人。&lt;/li&gt;
&lt;li&gt;优势：易于学习的编程环境，丰富的社区和库支持，适合快速原型开发。&lt;/li&gt;
&lt;li&gt;代表产品：Arduino Uno, Arduino Mega。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;STM32系列
&lt;ul&gt;
&lt;li&gt;应用场景：汽车应用、工业控制、医疗设备、高性能嵌入式应用。&lt;/li&gt;
&lt;li&gt;优势：基于 ARM Cortex-M 核心，性能强大，低功耗，丰富的外设，支持多种开发环境。&lt;/li&gt;
&lt;li&gt;代表产品：STM32F103 系列、STM32F4 系列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Raspberry Pi
&lt;ul&gt;
&lt;li&gt;应用场景：作为学习计算机编程的工具、家庭媒体中心、高级DIY项目如自制服务器或游戏机。&lt;/li&gt;
&lt;li&gt;优势：具备完整的计算机功能，支持多种操作系统，拥有丰富的I/O接口和社区支持。&lt;/li&gt;
&lt;li&gt;代表产品：Raspberry Pi 4 Model B。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[嵌入式系统-72]：ARM芯片选型基础&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/HiWangWenBing/article/details/138421375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/HiWangWenBing/article/details/138421375&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经典 ARM 处理器 ARMx
&lt;ul&gt;
&lt;li&gt;ARM7 系列：这是 ARM 处理器家族中较早的一代产品，采用 32 位 RISC 架构。
&lt;ul&gt;
&lt;li&gt;广泛应用于嵌入式系统、移动设备等领域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARM9系列处理器是在ARM7基础上发展而来的，性能有明显提升。
&lt;ul&gt;
&lt;li&gt;无线设备、仪器仪表、安全系统、机顶盒、高端打印机、数字照相机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARM11 系列处理器是 ARM9 的升级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嵌入式 Cortex-Mx系列：微控制器
&lt;ul&gt;
&lt;li&gt;低成本、低功耗、高性能&lt;/li&gt;
&lt;li&gt;物联网（IoT）、工业自动化、智能家居和汽车电子等&lt;/li&gt;
&lt;li&gt;智能灯光控制、智能门锁、智能家电等设备中，实现远程控制和自动化管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嵌入式 Cortex-R 系列：实时处理器
&lt;ul&gt;
&lt;li&gt;实时处理器，专为需要高可靠性、高可用性、容错功能、可维护性和实时响应的嵌入式系统而设计。&lt;/li&gt;
&lt;li&gt;广泛应用于车载控制系统中，如发动机控制、车身控制、底盘控制等。在工业控制领域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高性能应用 Corex-A 系列：应用处理器
&lt;ul&gt;
&lt;li&gt;高性能应用处理器，专为需要强大计算能力和高性能指令集的应用而设计&lt;/li&gt;
&lt;li&gt;广泛应用于智能手机、平板电脑、笔记本电脑等移动设备以及网络设备、存储设备等领域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;《龙之家族》血龙狂舞战争，黑党与绿党各有哪些势力？&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/569141727&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/569141727&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ck 中按字符串列平均分成 10份&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select count(*) from tbl
where CRC32(name)&amp;gt;= 0*((pow(2, 32) - 1) / 10)
and  CRC32(name) &amp;lt; 1*((pow(2, 32) - 1) / 10);
┌──count()─┐
│ 65588724 │ -- 65.59 million
└──────────┘
select count(*) from tbl
where CRC32(name)&amp;gt;= 1*((pow(2, 32) - 1) / 10)
and  CRC32(name) &amp;lt; 2*((pow(2, 32) - 1) / 10);
┌──count()─┐
│ 65424285 │ -- 65.42 million
└──────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数平移和伸缩变换的知识汇总&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0Mjg4ODc2OQ==&amp;amp;mid=2247488669&amp;amp;idx=1&amp;amp;sn=d7eafbfe91f41ed555e81e92ed9643d8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzU0Mjg4ODc2OQ==&amp;amp;mid=2247488669&amp;amp;idx=1&amp;amp;sn=d7eafbfe91f41ed555e81e92ed9643d8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LLM101n: Let’s build a Storyteller&lt;br&gt;
&lt;a href=&quot;https://github.com/karpathy/LLM101n&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/karpathy/LLM101n&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;thought through though&lt;/p&gt;
&lt;p&gt;【tcp】关于tcp状态的Recv-Q 和 Send-Q&lt;br&gt;
&lt;a href=&quot;https://www.jianshu.com/p/4676ea4d03e1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/4676ea4d03e1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TCP 半连接队列和全连接队列满了会发生什么？又该如何应对？&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/xiaolincoding/p/12995358.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xiaolincoding/p/12995358.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;几种防御 SYN 攻击的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增大半连接队列；
&lt;ul&gt;
&lt;li&gt;增大 tcp_max_syn_backlog 和 somaxconn&lt;/li&gt;
&lt;li&gt;增大 backlog&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开启 tcp_syncookies 功能&lt;/li&gt;
&lt;li&gt;减少 SYN+ACK 重传次数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开启 syncookies 功能就可以在不使用 SYN 半连接队列的情况下成功建立连接，在前面我们源码分析也可以看到这点，当开启了 syncookies 功能就不会丢弃连接。&lt;/p&gt;
&lt;p&gt;syncookies 是这么做的：服务器根据当前状态计算出一个值，放在己方发出的 SYN+ACK 报文中发出，当客户端返回 ACK 报文时，取出该值验证，如果合法，就认为连接建立成功&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.languagereactor.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.languagereactor.com/&lt;/a&gt;  这个学英语插件不错，可以每一句反复听，会自动断句。&lt;/p&gt;
&lt;p&gt;所谓「不可能三角」，是指一款No Code工具无法同时兼顾「灵活」、「易用」与「效率」。&lt;/p&gt;
&lt;p&gt;比如，如果工具：&lt;/p&gt;
&lt;p&gt;支持各种场景（灵活），同时能显著提高网页产出效率，那他的配置一定很复杂（需要应对各种场景，不易用）&lt;br&gt;
支持各种场景（灵活），同时很好用，那他的开发效率就不会高（无法无脑生成页面，需要修改产物代码）&lt;br&gt;
配置简单（易用），同时开发效率高，那他的应用场景就窄（不灵活）&lt;br&gt;
framer选择了第三条道路，即 牺牲灵活性，保持易用与效率。&lt;/p&gt;
&lt;p&gt;具体来说，framer的应用场景局限在生成落地页、产品介绍页、官网这样的静态页。&lt;br&gt;
&lt;a href=&quot;https://framer.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://framer.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++11新特性&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_56044032/article/details/125230984&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_56044032/article/details/125230984&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;perl 菜鸟教程&lt;br&gt;
&lt;a href=&quot;https://www.runoob.com/perl/perl-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.runoob.com/perl/perl-tutorial.html&lt;/a&gt;&lt;br&gt;
Perl 基本语法&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/cosiray/archive/2012/03/18/2404371.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/cosiray/archive/2012/03/18/2404371.html&lt;/a&gt;&lt;br&gt;
Modern Perl, 4e&lt;br&gt;
&lt;a href=&quot;http://modernperlbooks.com/books/modern_perl_2016/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://modernperlbooks.com/books/modern_perl_2016/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google on Monday said the search company is reversing its plan to phase out the use of third-party cookies in its Chrome browser in favor of a new strategy that will allow people to “make an informed choice that applies across their web browsing.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Denavit%E2%80%93Hartenberg_parameters&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Denavit–Hartenberg_parameters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;坐标系与矩阵(5): Denavit-Hartenberg算法&lt;br&gt;
&lt;a href=&quot;https://cloud.tencent.com/developer/article/1849681&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1849681&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在动力学中，比如人的胳膊就有好几个关节，且不同的关节有不同的旋转轴，如果是路飞的话，关节之间的长度还是不固定的。这里，每一个关节都存在一个自身坐标系，其中旋转可以是绕三个轴，平移则是沿着三个轴，每个坐标系存在6个自由度。问题就有点复杂了，每个人对每个关节可能会定义不同的坐标系方向，这会直接决定求解该问题的难度。DH算法则提供了一个一般性理论，且每一个关节只需要4个自由度。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1969850&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1969850&lt;/a&gt;&lt;br&gt;
栅格化的对象是网格，网格表面可以通过三角形无限细分，而三角形是最简单的平面。接下来就是栅格化核心内容：如何绘制一个三角形。&lt;/p&gt;
&lt;p&gt;栅格化的流水线主要有两个阶段：顶点（vertex）和片元（fragment），前者将三维空间下三角形的每一个点投射到二维平面上，后者则将投影后的三角形填充颜色，最终完成一个三角形的渲染。当多个三角形存在遮盖问题时，则通过深度检测（Z-buffer机制）来判断几何对象间的远近。&lt;/p&gt;
&lt;p&gt;Whitted-Style Ray Tracing算法（1979）采用射线模拟相机到光源间的光路传输，并考虑了射线和光源之间的遮盖，射线和物体间的反射，以及和半透明物体间的折射等光学现象。该算法模拟了光线传播中的基本物理规律，比如Fresnel， Beer law，折射率以及传输过程中的衰减等，非常健壮的实现了阴影、折射、反射效果。&lt;/p&gt;
&lt;p&gt;通过栅格化和光线追踪的发展来看，人们对真实感的定义随着时间而变化，最初希望有基本的阴影、折射、反射效果，随着技术和硬件能力的提升，人们的标准也不断的提高，正应了那句歌词，得不到的永远在骚动。这也反映了Moore‘s Law和Blinn’s Law之间的相互制约：当计算能力不断提升时，人们也会提高渲染真实感的标准，从而保证渲染时间不变。&lt;/p&gt;
&lt;p&gt;在概念上，无论栅格化还是光线追踪，真实感的标准主有三点：照片级别（photo realistic）和物理正确（physically based rendering）以及性能（high performance），只是两者给出了不同的优先级。光线追踪优先前两点，往往需要极大的计算量，因此在离线渲染领域成为主角。而Rasterization技术主要应用于实时渲染领域，为了性能而有条件地牺牲前两点。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rqlite/rqlite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rqlite/rqlite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rqlite is a relational database which combines SQLite’s simplicity with the power of a robust, fault-tolerant, distributed system.&lt;/p&gt;
&lt;p&gt;You can use rqlite to store your important data reliably, ensuring it’s always available. If you’re interested in understanding how distributed systems actually work, it’s a good example to study. A lot of thought has gone into its design, separating storage, consensus, and API clearly.&lt;/p&gt;
&lt;p&gt;The fastest, most reliable, Redis-based distributed queue for Node.&lt;br&gt;
Carefully written for rock solid stability and atomicity.&lt;br&gt;
&lt;a href=&quot;https://github.com/taskforcesh/bullmq&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/taskforcesh/bullmq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;du -sh 排除挂载点，清理 /tmp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 创建目录排除文件，排除掉非系统盘挂载点，NFS 挂载点 和 /proc
mount |awk &#39;$1~/^\/dev/&amp;amp;&amp;amp;$3!=&amp;quot;/&amp;quot; || $5~/nfs/ {print $3}&#39; &amp;gt;&amp;gt; ~/.du_exclude
echo /proc &amp;gt;&amp;gt; ~/.du_exclude

# 查看文件大小分布
ncdu -X ~/.du_exclude /
du -sh -X ~/.du_exclude /*

# 清理 10 天未改动的临时文件
find /tmp -ctime +10 | xargs rm -rf
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Python One Billion Row Challenge — From 10 Minutes to 4 Seconds&lt;br&gt;
&lt;a href=&quot;https://archive.is/a644q&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202405</title>
    <link href="http://blog.ihuhao.com/2024/05/08/202405/"/>
    <id>http://blog.ihuhao.com/2024/05/08/202405/</id>
    <published>2024-05-08T02:46:30.000Z</published>
    <updated>2024-06-04T09:22:44.157Z</updated>
    
    <content type="html">&lt;p&gt;关于投资建议&lt;br&gt;
&lt;a href=&quot;https://retire50blog.wang/wp-content/uploads/7038138252_%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E5%85%B3%E4%BA%8E%E6%8A%95%E8%B5%84%E5%BB%BA_files_9bbe285294f3059a76a55f60ed91b249ea8a1d0b/1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/wp-content/uploads/7038138252_博客图片/关于投资建_files_9bbe285294f3059a76a55f60ed91b249ea8a1d0b/1.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://retire50blog.wang/invest/imp/%e5%85%b3%e4%ba%8e%e6%88%91-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/invest/imp/关于我-2.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多少钱可以财务自由？&lt;br&gt;
&lt;a href=&quot;https://xueqiu.com/5819606767/60786196&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xueqiu.com/5819606767/60786196&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;举一个例子，如果你历史上的投资复利是15%，GDP是7%，CPI是3%，每年计划开销25万，则&lt;br&gt;
1、实现基本的财务自由，可投资资产&amp;gt;25万/(15%-3%)=208万，未来的花销每年可以按照CPI=3%的速度增加&lt;br&gt;
2、实现高级的财务自由，可投资资产&amp;gt;25万/(15%-3%-7%)=500万，未来的花销每年可以按照GDP＋CPI=10%的速度增加&lt;/p&gt;
&lt;p&gt;《微信公开课》读后感&amp;amp;做期权的思考&lt;br&gt;
&lt;a href=&quot;https://retire50blog.wang/invest/%e8%af%bb%e3%80%8a2018%e5%be%ae%e4%bf%a1%e5%85%ac%e5%bc%80%e8%af%be%e3%80%8b%e5%90%8e%e6%84%9f.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/invest/读《2018微信公开课》后感.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;投资体系演变和最新规划&lt;br&gt;
&lt;a href=&quot;https://retire50blog.wang/invest/%e6%8a%95%e8%b5%84%e4%bd%93%e7%b3%bb%e6%bc%94%e5%8f%98%e5%8e%86%e5%8f%b2%e5%92%8c%e6%9c%80%e6%96%b0%e8%a7%84%e5%88%92.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/invest/投资体系演变历史和最新规划.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://retire50blog.wang/invest/%e5%85%b3%e4%ba%8e%e8%b5%9a%e9%92%b1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/invest/关于赚钱.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://retire50blog.wang/invest/%e4%bb%b7%e6%8a%95%e6%8a%95%e8%b5%84%e6%80%9d%e8%b7%af%e5%8f%98%e5%8c%96.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/invest/价投投资思路变化.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://retire50blog.wang/invest/%e8%ba%ba.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/invest/躺.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我这里每年的开销不多，一般20万以下。&lt;/li&gt;
&lt;li&gt;10%，300万的现金，获取3-4%的存款理财收益，可以提供10万。另外我还有一些增收手段，一年能有个50万。&lt;/li&gt;
&lt;li&gt;长江电力，有个转债132018，在2024年4月9日转债到期之前，可以做到一些增收。今年下半年开始做，到目前增收约15万。&lt;/li&gt;
&lt;li&gt;沪深300，我用期货代替510310，每年可以增收3%左右，大约27万。今年7月底开始实施，到现在10月基本满了一个季度，增收7.5万。如果全年四个季度，会有25-30万。&lt;/li&gt;
&lt;li&gt;贵州茅台，分仓4个号，打新股有些额外收益。今年前十个月打新收益7万。长电由于经常和转债切换，且大量集中在了一个低佣金的账号里，所以没法稳定提供打新市值。&lt;/li&gt;
&lt;li&gt;一年合计有60万收益，足够覆盖不到20万的开销。如果有其他重要开支，可以从10%的现金里出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://retire50blog.wang/invest/%e8%bf%99%e4%b9%88%e6%83%b3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://retire50blog.wang/invest/这么想.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql 修改认证插件&lt;br&gt;
# 查看日志&lt;br&gt;
tail -f /var/log/mysql/error.log&lt;br&gt;
2024-05-09T00:57:25.534340Z 206919 [Warning] [MY-013360] [Server] Plugin mysql_native_password reported: ‘‘mysql_native_password’ is deprecated and will be removed in a future release. Please use caching_sha2_password instead’&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 修改默认插件并重启
vi  vi /etc/mysql/mysql.conf.d/mysqld.cnf
    default_authentication_plugin=mysql_native_password
systemctl restart mysql
systemctl status mysql

# 确认插件修改成功
show plugins;
show variables like &#39;%auth%&#39;;

# 以指定认证插件创建账号并分配权限
create user &#39;user&#39;@&#39;6.6.6.6&#39; identified with mysql_native_password by &#39;****&#39;;
select host, user, plugin from mysql.user;
grant all privileges on testdb.*  TO &#39;user&#39;@&#39;6.6.6.6&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;视频音频比特率（码率）与采样率之间的联系&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/486101944&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/486101944&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;qbasic Beginner Tutorials&lt;br&gt;
&lt;a href=&quot;http://www.petesqbsite.com/sections/tutorials/beginners.shtml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.petesqbsite.com/sections/tutorials/beginners.shtml&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://www.petesqbsite.com/sections/tutorials/zines/qboa/4-beginner.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.petesqbsite.com/sections/tutorials/zines/qboa/4-beginner.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is there a resource that teaches math through programming?&lt;br&gt;
&lt;a href=&quot;https://www.reddit.com/r/compsci/comments/y79zd/is_there_a_resource_that_teaches_math_through/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.reddit.com/r/compsci/comments/y79zd/is_there_a_resource_that_teaches_math_through/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How and where can I learn programming and mathematics simultaneously?&lt;br&gt;
&lt;a href=&quot;https://www.quora.com/How-and-where-can-I-learn-programming-and-mathematics-simultaneously&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.quora.com/How-and-where-can-I-learn-programming-and-mathematics-simultaneously&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How can someone combine programming and mathematics while learning both?&lt;/p&gt;
&lt;p&gt;I will preface this by saying that it really depends on what area of mathematics you’re learning. For instance, when I was in set theory, fundamental logic and some of those strains of classes, I wasn’t really programming up a lot of the course materials. There are options but they are limited for these type of classes.&lt;/p&gt;
&lt;p&gt;But lets assume first that you’re in an area like one of the Algebra classes before Modern / Abstract Algebra.&lt;/p&gt;
&lt;p&gt;Here you will learn many ways to solve equations, about polynomials, trigonometry, and the likes.&lt;/p&gt;
&lt;p&gt;One of the reasons that the law of sines stuck with me so much was because it was one of the first programs I wrote on my TI calculator.&lt;/p&gt;
&lt;p&gt;The programming concepts were pretty simple: I/O (user input, display results), modes of calculations (degrees vs radians), and possibly loops (for doing multiple exercises).&lt;/p&gt;
&lt;p&gt;excel 根据 email 获取域名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=RIGHT(A1, LEN(A1) - SEARCH(&amp;quot;@&amp;quot;, A1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nytimes.com/2019/11/13/books/review/the-man-who-solved-the-market-gregory-zuckerman.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nytimes.com/2019/11/13/books/review/the-man-who-solved-the-market-gregory-zuckerman.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://makemoneyonlinetutorials.quora.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://makemoneyonlinetutorials.quora.com/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://blogsked.com/make-money-online-2024/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blogsked.com/make-money-online-2024/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How much time does it realistically take to start seeing results from online money-making methods like blogging or YouTube?&lt;/p&gt;
&lt;p&gt;DOS game “F-15 Strike Eagle II” reverse engineering/reconstruction war stories&lt;br&gt;
&lt;a href=&quot;https://news.ycombinator.com/item?id=40347662&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://news.ycombinator.com/item?id=40347662&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具备反脆弱特性的期权波动率多头，如何控制Theta消耗？&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU5NDc0MTkyNw==&amp;amp;mid=2247492445&amp;amp;idx=1&amp;amp;sn=933c24a9555eeeffbe3a4412331615d5&amp;amp;chksm=fe7e3c95c909b583a9ceef9d7ade0e6f9d122dbae5e711e097b38806441c1f6a550173373287&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzU5NDc0MTkyNw==&amp;amp;mid=2247492445&amp;amp;idx=1&amp;amp;sn=933c24a9555eeeffbe3a4412331615d5&amp;amp;chksm=fe7e3c95c909b583a9ceef9d7ade0e6f9d122dbae5e711e097b38806441c1f6a550173373287&amp;amp;scene=21#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Write 8-bit code in your browser.&lt;br&gt;
&lt;a href=&quot;https://8bitworkshop.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://8bitworkshop.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql 查看回滚进度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select now(),trx_state,trx_rows_modified from INNODB_TRX where trx_id=5795845153 limit 10;
+---------------------+--------------+-------------------+
| now()               | trx_state    | trx_rows_modified |
+---------------------+--------------+-------------------+
| 2024-05-16 07:12:21 | ROLLING BACK |           7525492 |
+---------------------+--------------+-------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cn/tutorials/create-manage-nonrelational-database-dynamodb/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aws.amazon.com/cn/tutorials/create-manage-nonrelational-database-dynamodb/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://aws.amazon.com/cn/solutions/case-studies/dropbox-dynamodb-case-study/?pg=dynamodb&amp;amp;sec=cs#dropbox&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aws.amazon.com/cn/solutions/case-studies/dropbox-dynamodb-case-study/?pg=dynamodb&amp;amp;sec=cs#dropbox&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/SQLtoNoSQL.WhyDynamoDB.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/SQLtoNoSQL.WhyDynamoDB.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查询多个数据源&lt;br&gt;
&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/athena/latest/ug/running-federated-queries.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.aws.amazon.com/zh_cn/athena/latest/ug/running-federated-queries.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main purpose of this project is to power sco and neco, which are more general purpose coroutine libraries.&lt;br&gt;
&lt;a href=&quot;https://github.com/tidwall/llco&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tidwall/llco&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tidwall/hashmap.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tidwall/hashmap.c&lt;/a&gt;&lt;br&gt;
Hash map implementation in C.&lt;/p&gt;
&lt;p&gt;用 python 写一个函数，把函数调用表达式 a(1, b(2, c(0))) 解析成 json 格式的抽象语法树，如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;type&amp;quot;: &amp;quot;CallExpression&amp;quot;,
  &amp;quot;callee&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;a&amp;quot;
  },
  &amp;quot;arguments&amp;quot;: [
    {
      &amp;quot;type&amp;quot;: &amp;quot;NumberLiteral&amp;quot;,
      &amp;quot;value&amp;quot;: 1
    },
    {
      &amp;quot;type&amp;quot;: &amp;quot;CallExpression&amp;quot;,
      &amp;quot;callee&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;b&amp;quot;
      },
      &amp;quot;arguments&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: &amp;quot;NumberLiteral&amp;quot;,
          &amp;quot;value&amp;quot;: 2
        },
        {
          &amp;quot;type&amp;quot;: &amp;quot;CallExpression&amp;quot;,
          &amp;quot;callee&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;Identifier&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;c&amp;quot;
          },
          &amp;quot;arguments&amp;quot;: [
            {
              &amp;quot;type&amp;quot;: &amp;quot;NumberLiteral&amp;quot;,
              &amp;quot;value&amp;quot;: 0
            }
          ]
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一探究竟：深挖网关性能异常背后的秘密&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/zN9m4r-frwpkFN3tzsVXjQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/zN9m4r-frwpkFN3tzsVXjQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手撕红黑树！使用C语言带你实现一个平衡搜索树【正文】&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3ODg3Mzg3Nw==&amp;amp;mid=2247483882&amp;amp;idx=2&amp;amp;sn=f1f8ed6baa834cf767bac33cf26765f4&amp;amp;chksm=cea3dbcdcfba1239a3b6c591675904b2af5b6e5669015aa4779e688198f3cc867930bf1dc628&amp;amp;scene=132&amp;amp;exptype=timeline_recommend_article_extendread_extendread_for_notrec&amp;amp;show_related_article=1&amp;amp;subscene=0&amp;amp;scene=132#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=Mzg3ODg3Mzg3Nw==&amp;amp;mid=2247483882&amp;amp;idx=2&amp;amp;sn=f1f8ed6baa834cf767bac33cf26765f4&amp;amp;chksm=cea3dbcdcfba1239a3b6c591675904b2af5b6e5669015aa4779e688198f3cc867930bf1dc628&amp;amp;scene=132&amp;amp;exptype=timeline_recommend_article_extendread_extendread_for_notrec&amp;amp;show_related_article=1&amp;amp;subscene=0&amp;amp;scene=132#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;红黑树可以称得上几乎平衡的二叉搜索树，能够在最坏的情况下把插入、检索和删除的时间复杂度都控制在$O(\lg(n))$，如果把一系列数据结构都当成是学生的话，把插入、随机检索和删除作为考核科目，那么红黑树可以比喻成每科都能拿90分的学霸，而二叉平衡树（AVL）在“检索”拿到95分，哈希表更是在“检索”科目拿到97分，不过后面两位学生在插入和删除方面拿到的分数就比90分低多了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/312589&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://time.geekbang.org/column/article/312589&lt;/a&gt;&lt;br&gt;
大力水手Jerry&lt;br&gt;
一课一思：service mesh是软硬一体化，基础设施软件化，系统的模块被分割为业务代码和基础设施代码，团队既要负责业务的开发，也要负责基础设施代码的开发，实现开发和运维的一体化，这对团队提出了很高的要求。换句话说，云原生和网格统一了软件业务开发和生产运维，它将基础设施软件化，并为生产运维提供了工具和手段。类似于monolithic发展到micro-services，复杂性并不会消失，而是转换到另外一个维度，云原生的目的并不是消除复杂性，而是更加专业和灵活的管理软件的复杂性和基础设施的复杂性。云原生的主要矛盾可能就是面向业务的代码开发管理和面向基础设施的运维管理，后者会消耗资源，从某种角度说相当于侵占了前者的资源，因此下一次的软件架构，可能会屏蔽掉所有面向基础设施的管理内容，整体软件架构只呈现出业务的关联依赖。&lt;/p&gt;
&lt;p&gt;不管是做单体应用还是微服务，在系统设计之初就要做好领域分析建模，在开发阶段要严格按照领域设计分层开发，将来即使要拆分也会很容易。&lt;/p&gt;
&lt;p&gt;SpringFU、Spring Graal Native&lt;/p&gt;
&lt;p&gt;awk 里用 FPAT 解析 csv&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo -e &amp;quot;1,2\n\&amp;quot;3\\\&amp;quot;a\&amp;quot;,\&amp;quot;4,5\&amp;quot;&amp;quot; | awk  &#39;BEGIN{FPAT=&amp;quot;[^,]+|\&amp;quot;[^\&amp;quot;]+\&amp;quot;&amp;quot;}{print NF,$1&amp;quot;|&amp;quot;$2}&#39;
2 1|2
2 &amp;quot;3\&amp;quot;a&amp;quot;|&amp;quot;4,5&amp;quot;

pv data.csv |awk  &#39;BEGIN{FPAT=&amp;quot;[^,]+|\&amp;quot;[^\&amp;quot;]+\&amp;quot;&amp;quot;}NF==13{print $0&#39; | clickhouse-client --query &#39;insert into data FORMAT CSV&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为什么现在没人读Linux源码了？&lt;br&gt;
&lt;a href=&quot;https://www.sohu.com/a/731268212_121124376&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sohu.com/a/731268212_121124376&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247538751&amp;amp;idx=1&amp;amp;sn=9382ab61af6648c2e4c099f70e1078cf&amp;amp;chksm=e8e519b4508b139afbfd4b75cf0c5189b807f31e87e235f6fd821804ee14e2b70c220e63c5ac&amp;amp;scene=132&amp;amp;exptype=timeline_recommend_article_extendread_samebiz&amp;amp;show_related_article=1&amp;amp;subscene=0&amp;amp;scene=132#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247538751&amp;amp;idx=1&amp;amp;sn=9382ab61af6648c2e4c099f70e1078cf&amp;amp;chksm=e8e519b4508b139afbfd4b75cf0c5189b807f31e87e235f6fd821804ee14e2b70c220e63c5ac&amp;amp;scene=132&amp;amp;exptype=timeline_recommend_article_extendread_samebiz&amp;amp;show_related_article=1&amp;amp;subscene=0&amp;amp;scene=132#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确认使用的对象（ToC：高并发，ToB：高可用）&lt;/li&gt;
&lt;li&gt;系统的服务场景（即时通信：低延迟，游戏：高性能，购物：秒杀-一致性）&lt;/li&gt;
&lt;li&gt;用户量级（万级：双机、百万：集群、亿级：弹性分布式、容器化编排架构）&lt;/li&gt;
&lt;li&gt;百万读：3主6从，每个节点的读写高峰QPS可能可以达到每秒5万，可以实现15万，30万读性能&lt;/li&gt;
&lt;li&gt;亿级读，通过CDN、静态缓存、JVM缓存等多级缓存来提高读并发&lt;/li&gt;
&lt;li&gt;百万写，通过消息队列削峰填谷，通过hash分拆，水平扩展分布式缓存&lt;/li&gt;
&lt;li&gt;亿级写，redis可以定制数据结构、SSD+内存LRU、冷数据异步多线程复制&lt;/li&gt;
&lt;li&gt;持久化，（Mysql）承受量约为 1K的QPS，读写分离提升读并发，分库分表提升写并发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247538395&amp;amp;idx=1&amp;amp;sn=de3fd76a18d3d08806ff09a5ab59142f&amp;amp;chksm=e8e11d6334dac1a75aed9e4fc597b523eb96859350ffcb744ec30e21312d543643c0a4f2f67b&amp;amp;scene=132&amp;amp;exptype=timeline_recommend_article_extendread_samebiz&amp;amp;show_related_article=1&amp;amp;subscene=132&amp;amp;scene=132#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247538395&amp;amp;idx=1&amp;amp;sn=de3fd76a18d3d08806ff09a5ab59142f&amp;amp;chksm=e8e11d6334dac1a75aed9e4fc597b523eb96859350ffcb744ec30e21312d543643c0a4f2f67b&amp;amp;scene=132&amp;amp;exptype=timeline_recommend_article_extendread_samebiz&amp;amp;show_related_article=1&amp;amp;subscene=132&amp;amp;scene=132#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wuhuayangs/article/details/121830094&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wuhuayangs/article/details/121830094&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;布隆过滤器中一个元素如果判断结果为存在的时候元素不一定存在，但是判断结果为不存在的时候则一定不存在。&lt;/p&gt;
&lt;p&gt;布隆过滤器适合的场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区块链中使用布隆过滤器来加快钱包同步；以太坊使用布隆过滤器用于快速查询以太坊区块链的日志&lt;/li&gt;
&lt;li&gt;数据库防止穿库，Google Bigtable，HBase 和 Cassandra 以及 Postgresql 使用BloomFilter来减少不存在的行或列的磁盘查找。避免代价高昂的磁盘查找会大大提高数据库查询操作的性能&lt;/li&gt;
&lt;li&gt;判断用户是否阅读过某一个视频或者文章，类似抖音，刷过的视频往下滑动不再刷到，可能会导致一定的误判，但不会让用户看到重复的内容&lt;/li&gt;
&lt;li&gt;网页爬虫对URL去重，采用布隆过滤器来对已经爬取过的URL进行存储，这样在进行下一次爬取的时候就可以判断出这个URL是否爬取过了&lt;/li&gt;
&lt;li&gt;使用布隆过滤器来做黑名单过滤，针对不同的用户是否存入白名单或者黑名单，虽然有一定的误判，但是在一定程度上还是很好的解决问题&lt;/li&gt;
&lt;li&gt;缓存击穿场景，一般判断用户是否在缓存中，如果存在则直接返回结果，不存在则查询数据库，
&lt;ul&gt;
&lt;li&gt;如果来一波冷数据，会导致缓存大量击穿，造成雪崩效应，&lt;/li&gt;
&lt;li&gt;这时候可以用布隆过滤器当缓存的索引，只有在布隆过滤器中，才去查询缓存，如果没查询到则穿透到数据库查询。&lt;/li&gt;
&lt;li&gt;如果不在布隆过滤器中，则直接返回，会造成一定程度的误判&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WEB拦截器，如果相同请求则拦截，防止重复被攻击。用户第一次请求，将请求参数放入布隆过滤器中，当第二次请求时，先判断请求参数是否被布隆过滤器命中。&lt;/li&gt;
&lt;li&gt;可以提高缓存命中率。&lt;/li&gt;
&lt;li&gt;Squid 网页代理缓存服务器在 cache digests 中就使用了布隆过滤器。&lt;/li&gt;
&lt;li&gt;Google Chrome 浏览器使用了布隆过滤器加速安全浏览服务&lt;/li&gt;
&lt;li&gt;Google 著名的分布式数据库 Bigtable 使用了布隆过滤器来查找不存在的行或列，以减少磁盘查找的IO次数&lt;/li&gt;
&lt;li&gt;Squid 网页代理缓存服务器在 cache digests 中使用了也布隆过滤器&lt;/li&gt;
&lt;li&gt;Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据&lt;/li&gt;
&lt;li&gt;SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间&lt;/li&gt;
&lt;li&gt;Google Chrome浏览器使用了布隆过滤器加速安全浏览服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果允许误判率的话，可以使用布隆过滤器，只有你想不到的，没有你做不到的。&lt;/p&gt;
&lt;h2 id=&quot;判断用户是否阅读过某一个视频或者文章，类似抖音，刷过的视频往下滑动不再刷到，可能会导致一定的误判，但不会让用户看到重复的内容&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#判断用户是否阅读过某一个视频或者文章，类似抖音，刷过的视频往下滑动不再刷到，可能会导致一定的误判，但不会让用户看到重复的内容&quot;&gt;¶&lt;/a&gt;判断用户是否阅读过某一个视频或者文章，类似抖音，刷过的视频往下滑动不再刷到，可能会导致一定的误判，但不会让用户看到重复的内容&lt;/h2&gt;
&lt;p&gt;布隆过滤器在这个场景用的对吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果布隆过滤器说这个视频不存在，那肯定不存在，用户就会刷到它，他肯定没看过这个视频，符合预期&lt;/li&gt;
&lt;li&gt;如果布隆过滤器说这个视频存在，但不一定存在，用户就刷不到了这个视频了，那这不就错过一个视频了吗，类似用户丢消息了，这能接受吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringBoot+Docker：高效容器化的最佳实践&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/AkX53sMwx3wiCGufAAFN9w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/AkX53sMwx3wiCGufAAFN9w&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/BbV43_T6UzHvG8GnqESEUg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/BbV43_T6UzHvG8GnqESEUg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best Microsoft Office alternative of 2024&lt;br&gt;
&lt;a href=&quot;https://www.techradar.com/news/best-microsoft-office-alternative&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.techradar.com/news/best-microsoft-office-alternative&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;office2003蜻蜓特派员3in1 官方版&lt;br&gt;
&lt;a href=&quot;https://pan.baidu.com/s/1cCNaCu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1cCNaCu&lt;/a&gt;?&lt;em&gt;at&lt;/em&gt;=1717033722095&lt;/p&gt;
&lt;p&gt;编译原理（七）——自顶向下语法分析概述&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_43633784/article/details/108620459&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_43633784/article/details/108620459&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First集、Follow集、Predict集的简单求法 三个重要集合&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qnsEmma/article/details/107943236&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qnsEmma/article/details/107943236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_61819793/article/details/134274982&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/m0_61819793/article/details/134274982&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于投资建议&lt;br&gt;
&lt;a href=&quot;https://retire50blog.wang/wp-content/uploads/7038138252_%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E5%85%B3%E4%BA%8E%E6%8A
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202404</title>
    <link href="http://blog.ihuhao.com/2024/04/01/202404/"/>
    <id>http://blog.ihuhao.com/2024/04/01/202404/</id>
    <published>2024-04-01T04:00:58.000Z</published>
    <updated>2024-05-08T02:45:51.655Z</updated>
    
    <content type="html">&lt;p&gt;Embeddings&lt;br&gt;
&lt;a href=&quot;https://platform.openai.com/docs/guides/embeddings&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://platform.openai.com/docs/guides/embeddings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenAI’s text embeddings measure the relatedness of text strings.&lt;/p&gt;
&lt;p&gt;An embedding is a vector (list) of floating point numbers. The distance between two vectors measures their relatedness. Small distances suggest high relatedness and large distances suggest low relatedness.&lt;/p&gt;
&lt;p&gt;OpenResty 开发速览&lt;br&gt;
&lt;a href=&quot;https://www.ogura.io/posts/2019/01/openresty_quickview/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ogura.io/posts/2019/01/openresty_quickview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eBPF专题一 | 手把手教你用eBPF诊断MySQL(含源码)&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/3S2t-Nfip-2--aOgov4qtw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/3S2t-Nfip-2--aOgov4qtw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蚂蚁专家介绍RDMA技术砖题（一）：技术概述&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/WlQlN3qR9DxXvvI_PQnr3A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/WlQlN3qR9DxXvvI_PQnr3A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://news.sohu.com/a/716725440_411876&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://news.sohu.com/a/716725440_411876&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI Agent的深度思考 | 附十一个行业的应用场景&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/5hh-HLUmgI_ODzbqA0d_ag&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/5hh-HLUmgI_ODzbqA0d_ag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lor 是什么#&lt;br&gt;
Lor是一个运行在OpenResty上的使用Lua编写的Web框架。 它兼顾开发效率和运行时性能， 可用于快速开发API Server和传统Web页面应用。&lt;br&gt;
&lt;a href=&quot;http://lor.sumory.com/docs/getting-started-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://lor.sumory.com/docs/getting-started-cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;被cloudflare 代理后 nginx 如何获取客户真实ip&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/668005446&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/668005446&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://nocache.org/p/restore-real-ip-address-from-cloudflare-cdn-in-nginx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nocache.org/p/restore-real-ip-address-from-cloudflare-cdn-in-nginx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Configuring Your Nginx Server for Mutual TLS mtls&lt;br&gt;
&lt;a href=&quot;https://smallstep.com/hello-mtls/doc/server/nginx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://smallstep.com/hello-mtls/doc/server/nginx&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://developers.cloudflare.com/ssl/client-certificates/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.cloudflare.com/ssl/client-certificates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everything You Need To Know About IRON CONDORS&lt;br&gt;
&lt;a href=&quot;https://optionstradingiq.com/wp-content/uploads/Iron-Condor.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://optionstradingiq.com/wp-content/uploads/Iron-Condor.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DeliberateEngineer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/DeliberateEngineer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「十一充电」腾讯魔方技术总监：作为游戏程序员是如何自我提升的？&lt;br&gt;
&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1646675636195344957&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baijiahao.baidu.com/s?id=1646675636195344957&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yes, taking a contrarian view can be profitable when markets panic,&lt;br&gt;
but we also need to be aware that some of the worst market declines in history have come AFTER the VIX Futures market moved into Backwardation.&lt;/p&gt;
&lt;p&gt;SHRINK an Amazon AWS EBS root volume (2020 Update)&lt;br&gt;
&lt;a href=&quot;https://medium.com/@ztobscieng/shrink-an-amazon-aws-ebs-root-volume-2020-update-8db834265c3e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/@ztobscieng/shrink-an-amazon-aws-ebs-root-volume-2020-update-8db834265c3e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cilium：基于eBPF的高效云原生网络和ServiceMesh方案&lt;br&gt;
&lt;a href=&quot;https://www.51cto.com/article/759002.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.51cto.com/article/759002.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【网络】eBPF、Cilium、Calico&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/500174411&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/500174411&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;司徒捷&lt;br&gt;
&lt;a href=&quot;http://finance.sina.com.cn/zl/usstock/20141028/173120665258.shtml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://finance.sina.com.cn/zl/usstock/20141028/173120665258.shtml&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1738975229150699274&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baijiahao.baidu.com/s?id=1738975229150699274&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenResty使用Lua大全（十）实战： Lua + Redis 实现动态封禁 IP&lt;br&gt;
&lt;a href=&quot;https://feixiang.blog.csdn.net/article/details/136658128&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://feixiang.blog.csdn.net/article/details/136658128&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenResty使用Lua大全（十二）实战： 动手实现一个网关框架&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/A_art_xiang/article/details/136658438&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/A_art_xiang/article/details/136658438&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;计算机中我们常常会混淆指令周期、CPU周期和时钟周期，要区分这些并不难，但要想彻底弄懂这些，就得要求我们对CPU底层有一定了解。&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/90829922&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/90829922&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令周期（Instruction Cycle）：取出并执行一条指令的时间。&lt;/li&gt;
&lt;li&gt;CPU 周期：一条指令执行过程被划分为若干阶段，每一阶段完成所需时间。&lt;/li&gt;
&lt;li&gt;时钟周期（Clock Cycle）：又称震荡周期，是处理操作的最基本单位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，我们说一个指令周期，包含多个 CPU 周期，而一个 CPU 周期包含多个时钟周期。&lt;/p&gt;
&lt;p&gt;【浅析】x86模式变迁下Linux的启动过程&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86058611&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/86058611&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux启动具体过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电脑刚加电时，会把 CS 重置为0xFFFF，IP重置为0x0000 ,所以第一条指令就会指向0xFFFF0，属于ROM范围。&lt;/li&gt;
&lt;li&gt;进入BIOS时期；BIOS首先会检查硬件，如果硬件没问题，会开始建立中断向量表和中断服务（BIOS中基本输入输出要基于中断服务），最后BIOS会将启动盘的第一个扇区MBR 512字节加载到内存中的 0x7c00 来运行。（MBR存放的为boot.img，由 boot.S 编译而成，再由grub2安装至启动盘)&lt;/li&gt;
&lt;li&gt;进入BootLoader时期；bot.img做的唯一事情就是加载core.img（core.img由一系列的模块组成）。boot.img将控制权交给disk.img，disk.img的任务就是加载core.img其他部分，先是lzma_decompress.img，再是kenel.img，最后是各个模块对应的映像。&lt;/li&gt;
&lt;li&gt;lzma_decompress.img调用real_to_prot切换到保护模；切换过程主要做两部分工作：
&lt;ul&gt;
&lt;li&gt;一是启用分段，在内存中建立段描述符表，将段寄存器变成选择子，指向某个段描述符&lt;/li&gt;
&lt;li&gt;二是启用分页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解压缩kernel.img;kenel.img会调用grub_main函数，在这个函数里边，grub_load_config()会开始解析grub.conf文件里的配置信息，然后grub_show_menu()会显示让你选择的操作系统列表，然后grub_menu_execute_entry()开始加载操作系统。&lt;/li&gt;
&lt;li&gt;启动内核&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go中的组合&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/619881005&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/619881005&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eBPF实用技巧 | 函数参数超过5个怎么办？&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/tZR4YW2cD4Goe9lUPSuOhA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/tZR4YW2cD4Goe9lUPSuOhA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;起 eBPF 大家都不陌生，就内核而言，hook 会尽可能选在 tracepoint，如果没有 tracepoint，会考虑使用 kprobe。&lt;/p&gt;
&lt;p&gt;tracepoint 的范围有限，而内核函数又太多，基于各种需求场景，kprobe 的出场机会较多；但需要注意的，并不是所有的内核函数都可以选作 hook 点，inline 函数无法被 hook，static 函数也有可能被优化掉；如果想知道究竟有哪些函数可以选做 hook 点，在 Linux 机器上，可以通过less /proc/kallsyms查看。&lt;/p&gt;
&lt;p&gt;windows 内存溢出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;printf &#39;\xcc%.0s&#39; {1..1000}|iconv -f gbk -t utf-8 - -o -
烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于“烫烫烫烫烫烫烫”的程序员笑话&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/duke_ding2/article/details/130907027&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/duke_ding2/article/details/130907027&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.futunn.com/learn/detail-how-to-trade-options-on-a-computer-86188-230557322?global_content=%7B%22promote_id%22%3A13766%2C%22sub_promote_id%22%3A38%7D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.futunn.com/learn/detail-how-to-trade-options-on-a-computer-86188-230557322?global_content={&amp;quot;promote_id&amp;quot;%3A13766%2C&amp;quot;sub_promote_id&amp;quot;%3A38}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【期权分析工具】波动率分析：如何判断期权的估值水平？&lt;br&gt;
&lt;a href=&quot;https://www.futunn.com/learn/detail-options-analysis-tool-volatility-analysis-how-to-determine-the-valuation-level-of-options-86188-230550334&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.futunn.com/learn/detail-options-analysis-tool-volatility-analysis-how-to-determine-the-valuation-level-of-options-86188-230550334&lt;/a&gt;&lt;br&gt;
【期权分析工具】价格计算器：如何计算期权的未来价格？&lt;br&gt;
&lt;a href=&quot;https://www.futunn.com/learn/detail-option-analysis-tool-price-calculator-how-to-calculate-the-future-price-of-options-86188-230569331&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.futunn.com/learn/detail-option-analysis-tool-price-calculator-how-to-calculate-the-future-price-of-options-86188-230569331&lt;/a&gt;&lt;br&gt;
【期权分析工具】异动分析：如何跟踪大资金的动向？&lt;br&gt;
&lt;a href=&quot;https://www.futunn.com/learn/detail-options-analysis-tool-transaction-analysis-how-to-track-the-movement-of-large-funds-86188-230551335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.futunn.com/learn/detail-options-analysis-tool-transaction-analysis-how-to-track-the-movement-of-large-funds-86188-230551335&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investingdaily.com/45022/option-delta-calculation-explained/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.investingdaily.com/45022/option-delta-calculation-explained/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Know Your Greek Letters for Better Trading Results&lt;br&gt;
&lt;a href=&quot;https://www.investingdaily.com/71403/know-your-greek-letters-for-better-trading-results/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.investingdaily.com/71403/know-your-greek-letters-for-better-trading-results/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【可转债知识】04可转债四大要素-回售条款&lt;br&gt;
&lt;a href=&quot;https://xueqiu.com/8132666925/257544240&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xueqiu.com/8132666925/257544240&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Practical Linux tracing ( Part 1/5) : symbols, debug symbols and stack unwinding&lt;br&gt;
&lt;a href=&quot;https://tungdam.medium.com/things-you-should-know-to-begin-playing-with-linux-tracing-tools-part-i-x-225aae1aaf13&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tungdam.medium.com/things-you-should-know-to-begin-playing-with-linux-tracing-tools-part-i-x-225aae1aaf13&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;投資美股最核心的20張圖表&lt;br&gt;
&lt;a href=&quot;https://x.com/TheInvestorLEI/status/1781064276658282788&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://x.com/TheInvestorLEI/status/1781064276658282788&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI Agent的深度思考 | 附十一个行业的应用场景&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/5hh-HLUmgI_ODzbqA0d_ag&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/5hh-HLUmgI_ODzbqA0d_ag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好用投資工具網站App分享：選股、基本面、估值、回測（2024.2）&lt;br&gt;
&lt;a href=&quot;https://vocus.cc/article/65d83f7ffd89780001d4f385&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vocus.cc/article/65d83f7ffd89780001d4f385&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gurufocus.com/pricing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.gurufocus.com/pricing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the founder of &lt;a href=&quot;http://GuruFocus.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GuruFocus.com&lt;/a&gt;, many people naturally assume that I have a degree in finance or some other closely related field. However, I actually possess a Ph.D. in physics.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnn.com/markets/fear-and-greed&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnn.com/markets/fear-and-greed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few big stocks can skew returns for the market.&lt;br&gt;
It’s important to also know how many stocks are doing well versus those that are struggling.&lt;br&gt;
This shows the number of stocks on the NYSE at 52-week highs compared to those at 52-week lows.&lt;br&gt;
When there are many more highs than lows, that’s a bullish sign and signals Greed.&lt;/p&gt;
&lt;p&gt;The market is made up of thousands of stocks.&lt;br&gt;
And on any given day, investors are actively buying and selling them.&lt;br&gt;
This measure looks at the amount, or volume, of shares on the NYSE that are rising compared to the number of shares that are falling.&lt;br&gt;
A low (or even negative) number is a bearish sign.&lt;br&gt;
The Fear &amp;amp; Greed Index uses decreasing trading volume as a signal for Fear.&lt;/p&gt;
&lt;p&gt;可转债知识】06快速看懂一只可转债！&lt;br&gt;
链接：&lt;a href=&quot;https://xueqiu.com/8132666925/259443693&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xueqiu.com/8132666925/259443693&lt;/a&gt;&lt;br&gt;
要看懂一只可转债，应该先在募集说明说里找到转股价、下修条款、强赎条款、回售条款四大要素，募集说明书在各家券商APP可转债页面下的公告里都能找到&lt;/p&gt;
&lt;p&gt;Miller is like awk, sed, cut, join, and sort for data formats such as CSV, TSV, JSON, JSON Lines, and positionally-indexed.&lt;br&gt;
&lt;a href=&quot;https://github.com/johnkerl/miller?tab=readme-ov-file&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/johnkerl/miller?tab=readme-ov-file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is there a robust command line tool for processing csv files?&lt;br&gt;
&lt;a href=&quot;https://unix.stackexchange.com/questions/7425/is-there-a-robust-command-line-tool-for-processing-csv-files&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://unix.stackexchange.com/questions/7425/is-there-a-robust-command-line-tool-for-processing-csv-files&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m sure there are more criticisms, but the impetus for this project was a 40GB CSV file that was handed to me. I was tasked with figuring out the shape of the data inside of it and coming up with a way to integrate it into our existing system. It was then that I realized that every single CSV tool I knew about was woefully inadequate. They were just too slow or didn’t provide enough flexibility. (Another project I had comprised of a few dozen CSV files. They were smaller than 40GB, but they were each supposed to represent the same kind of data. But they all had different column and unintuitive column names. Useful CSV inspection tools were critical here—and they had to be reasonably fast.)&lt;/p&gt;
&lt;p&gt;A fast CSV command line toolkit written in Rust.&lt;br&gt;
&lt;a href=&quot;https://github.com/BurntSushi/xsv?tab=readme-ov-file&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/BurntSushi/xsv?tab=readme-ov-file&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pv test.csv|csvcut -c 9 | grep -Ev &#39;^&amp;quot;&amp;quot;$&#39; | wc -l
13.0GiB 0:05:55 [37.5MiB/s] [==============================================================================================&amp;gt;] 100%
9316774
$ pv test.csv| xsv fixlengths -l 10 |xsv search  -s 9 -v &#39;^$&#39;| wc -l
13.0GiB 0:02:00 [ 110MiB/s] [==============================================================================================&amp;gt;] 100%
9316799
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open Source realtime backend in 1 file&lt;br&gt;
&lt;a href=&quot;http://pocketbase.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pocketbase.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/WealthCoachMak/status/1784255938427240786&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://twitter.com/WealthCoachMak/status/1784255938427240786&lt;/a&gt;&lt;br&gt;
If you had $250,000 cash and sold options with it…&lt;br&gt;
It might be enough to retire early&lt;br&gt;
You can generate $3k to $10k per month and if that covers your monthly expenses…&lt;br&gt;
You never have to work again&lt;br&gt;
Option Selling is very powerful&lt;/p&gt;
&lt;p&gt;words&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instruments&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;stock&lt;/li&gt;
&lt;li&gt;equities&lt;/li&gt;
&lt;li&gt;share&lt;/li&gt;
&lt;li&gt;holders&lt;/li&gt;
&lt;li&gt;portfolio&lt;/li&gt;
&lt;li&gt;positions&lt;/li&gt;
&lt;li&gt;net worth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WHAT IS IV RANK AND HOW TO USE IT. 2023 GUIDE&lt;br&gt;
&lt;a href=&quot;https://optionstradingiq.com/what-is-iv-rank-and-how-to-use-it/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://optionstradingiq.com/what-is-iv-rank-and-how-to-use-it/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://caifuhao.eastmoney.com/news/20231109093356353014470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://caifuhao.eastmoney.com/news/20231109093356353014470&lt;/a&gt;&lt;br&gt;
“历史总是惊人的相似。”股市的行情总会在绝望中产生，在犹豫中上涨，在疯狂中灭亡。这是一个不断循环的过程，也是市场的一种规律。投资者们需要学会在绝望中寻找希望，抓住犹豫中的机会，避免在疯狂中迷失自我。只有这样，他们才能够在股市的大潮中游刃有余，成为真正的赢家。&lt;/p&gt;
&lt;p&gt;电子取证之PC版微信数据库解密&lt;br&gt;
&lt;a href=&quot;https://cn-sec.com/archives/440791.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cn-sec.com/archives/440791.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Function graph tracer for C/C++/Rust/Python&lt;br&gt;
&lt;a href=&quot;https://github.com/namhyung/uftrace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/namhyung/uftrace&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Embeddings&lt;br&gt;
&lt;a href=&quot;https://platform.openai.com/docs/guides/embeddings&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://platform.openai.com/do
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202402</title>
    <link href="http://blog.ihuhao.com/2024/02/09/202402/"/>
    <id>http://blog.ihuhao.com/2024/02/09/202402/</id>
    <published>2024-02-09T03:00:13.000Z</published>
    <updated>2024-04-03T05:29:54.544Z</updated>
    
    <content type="html">&lt;p&gt;Clickhouse 纯手工迁移表&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/hdpdriver/p/16088755.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/hdpdriver/p/16088755.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClickHouse 建表create table时primary by与order by&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_36951116/article/details/106260189&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_36951116/article/details/106260189&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ORDER BY的作用， 负责分区内数据排序;&lt;/li&gt;
&lt;li&gt;PRIMARY KEY的作用， 负责一级索引生成;&lt;/li&gt;
&lt;li&gt;Merge 的逻辑， 分区内数据排序后，找到相邻的数据，做特殊处理。
&lt;ul&gt;
&lt;li&gt;只有在触发合并之后，才能触发特殊逻辑。以去重为例，在没有合并的时候，还是会出现重复数据。&lt;/li&gt;
&lt;li&gt;只对同一分区内的数据有效。以去重为例，只有属于相同分区的数据才能去重，跨越不同分区的重复数据不能去重。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常只有在使用 SummingMergeTree 或 AggregatingMergeTree 的时候，才需要同时设置ORDER BY与PRIMARY KEY。
&lt;ul&gt;
&lt;li&gt;显式的设置 PRIMARY KEY，是为了将主键和排序键设置成不同的值，是进一步优化的体现。&lt;/li&gt;
&lt;li&gt;如果 ORDER BY 与 PRIMARY KEY 不同，PRIMARY KEY 必须是 ORDER BY 的前缀(为了保证分区内数据和主键的有序性)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ClickHouse 查询优化详细介绍&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/38RMVbw25P3iuE4IIuxdog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/38RMVbw25P3iuE4IIuxdog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/mergetree&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/mergetree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日志分析下ES/ClickHouse/Loki比较与思考&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/n2I94X6tz2jOABzl1djxYg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/n2I94X6tz2jOABzl1djxYg&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方案A：Local Storage + Pssh扫描派（代表作：跳板机上各种脚本）&lt;/li&gt;
&lt;li&gt;方案B：Central Storage + Inverted Index派（代表作：ES）&lt;/li&gt;
&lt;li&gt;方案C：Central Storage + Column Storage + MR派（代表作：Hive）&lt;/li&gt;
&lt;li&gt;方案D：Central Storage + Column Storage + MPP派（代表作：ClickHouse）&lt;/li&gt;
&lt;li&gt;方案E：Central Storage + 扫描类（代表作：Grafana-Loki）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可观测性数据收集集大成者 Vector 介绍&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/n9ecommunity/article/details/133810461&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/n9ecommunity/article/details/133810461&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;核心就是 pipeline 的处理，有 Source 端做采集，有中间的 Transform 环节做数据加工处理，有 Sink 端做数据转发。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超级快速可靠：Vector采用Rust构建，速度极快，内存效率高，旨在处理最苛刻的工作负载&lt;/li&gt;
&lt;li&gt;端到端：Vector 致力于成为从 A 到 B 获取可观测性数据所需的唯一工具，并作为守护程序、边车或聚合器进行部署&lt;/li&gt;
&lt;li&gt;统一：Vector 支持日志和指标，使您可以轻松收集和处理所有可观测性数据&lt;/li&gt;
&lt;li&gt;供应商中立：Vector 不偏向任何特定的供应商平台，并以您的最佳利益为出发点，培育公平、开放的生态系统。免锁定且面向未来&lt;/li&gt;
&lt;li&gt;可编程转换：Vector 的高度可配置转换为您提供可编程运行时的全部功能。无限制地处理复杂的用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快手、携程等公司转战到 ClickHouse，ES 难道不行了？&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/hP0ocT-cBCeIl9n1wL_HBg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/hP0ocT-cBCeIl9n1wL_HBg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/547100507&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/547100507&lt;/a&gt;&lt;br&gt;
ClickHouse现在是云原生的，支持分层存储。如果你关注它，会看到它的一条演进轨迹。最开始是单机的，单机即可实现很多高性能查询；然后演进到分布式，利用了比如复制表、分布式表，巧妙地变成了一个分布式架构；再往后，大家在讲云原生，也是可以分层存储、存算分离，有一些存储可以放到S3上，也可以放到HDFS上面去；后来也支持了OSS，目前也是通过原生的分层存储方式向云原生再迈进了一步。在此之前，虽然ClickHouse支持把一些冷数据，或者是部分的数据放到像S3这样的对象存储上面去，但是它的实现比较粗暴。&lt;/p&gt;
&lt;p&gt;mysql 加密&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select hex(&#39;给我狗子&#39;);
+--------------------------+
| hex(&#39;给我狗子&#39;)          |
+--------------------------+
| E7BB99E68891E78B97E5AD90 |
+--------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select unhex(hex(&#39;给我狗子&#39;));
+----------------------------+
| unhex(hex(&#39;给我狗子&#39;))     |
+----------------------------+
| 给我狗子                   |
+----------------------------+
1 row in set (0.00 sec)


mysql&amp;gt; select hex(AES_ENCRYPT(&#39;13884331246&#39;,&#39;abc123&#39;)) encrypt_text;
+----------------------------------+
| encrypt_text                     |
+----------------------------------+
| 61F56849292176EAD44B26FCDB52C791 |
+----------------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select AES_DECRYPT(unhex(&#39;7EDEB1877EE7AD6BD30BE668ECF924A4&#39;),&#39;password&#39;) plain_text;
+-------------+
| plain_text  |
+-------------+
| 13884331246 |
+-------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ClickHouse自定义函数实例教程&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/neweastsun/article/details/130235194&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/neweastsun/article/details/130235194&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ck 随机取 30% 的数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;where rand32()&amp;lt;pow(2,32)*0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ClickHouse性能调优之排序和数据类型&lt;br&gt;
&lt;a href=&quot;https://www.yii666.com/blog/499218.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.yii666.com/blog/499218.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过排序键可以让内存使用大幅减少，尤其是select查询中按排序键排序。&lt;/li&gt;
&lt;li&gt;对于已存在的表，排序表达式仅可以使用新增列&lt;/li&gt;
&lt;li&gt;正确使用排序键可以提升压缩因子20多倍，重复值相较于随机值更有利于压缩。&lt;/li&gt;
&lt;li&gt;在处理大型表并寻找最佳性能查询时，需要仔细选择数据类型。
&lt;ul&gt;
&lt;li&gt;不要把整形设置为float型&lt;/li&gt;
&lt;li&gt;对数值设置合适的精度，精度越低越好&lt;/li&gt;
&lt;li&gt;对于文本类型尽可能使用LowCardinality(String) 或FixedString&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;clickhouse里的数组数据类型与相关使用介绍&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/u010882234/article/details/130464938&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/u010882234/article/details/130464938&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 ClickHouse 到 Apache Doris，腾讯音乐内容库数据平台架构演进实践&lt;br&gt;
&lt;a href=&quot;https://www.infoq.cn/article/nybtjqs07zcrqqnc0xwt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.infoq.cn/article/nybtjqs07zcrqqnc0xwt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;浅谈ClickHouse聚合和窗口函数&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_59801183/article/details/134186433&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_59801183/article/details/134186433&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uber 如何使用MySQL + Redis提供4000 万/秒的读取请求&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/cneQcz_uEwChMFuWtoVolw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/cneQcz_uEwChMFuWtoVolw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClickHouse 到底有多神？ - leiysky的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/505958148/answer/3341039818&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/505958148/answer/3341039818&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql 提高写入性能，写入完毕后要注释掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;skip-log-bin
innodb_doublewrite = 0
innodb_log_buffer_size = 32M
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SPL 实践：单节点实现每日百亿时序数据实时写入和秒级统计&lt;br&gt;
&lt;a href=&quot;https://c.raqsoft.com.cn/article/1705410891469&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://c.raqsoft.com.cn/article/1705410891469&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;doris-10亿数据和100万表join高并发测试&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/lilei2blog/p/15524029.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/lilei2blog/p/15524029.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to merge large tables in ClickHouse using join&lt;br&gt;
&lt;a href=&quot;https://datachild.net/data/clickhouse-join-large-tables-on-column&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://datachild.net/data/clickhouse-join-large-tables-on-column&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Optimizing ClickHouse Joins for Performance: A Deep Dive into Nested-Loop and Merge-Scan Joins with Practical Examples&lt;br&gt;
&lt;a href=&quot;https://chistadata.com/optimizing-clickhouse-joins-for-performance-a-deep-dive-into-nested-loop-and-merge-scan-joins-with-practical-examples/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://chistadata.com/optimizing-clickhouse-joins-for-performance-a-deep-dive-into-nested-loop-and-merge-scan-joins-with-practical-examples/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MergeJoin是一种基于排序的连接算法，它要求参与连接的表在连接字段上进行排序。Merge Join 的原理如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对参与连接的表按照连接字段进行排序，确保两个表的连接字段是有序的。&lt;/li&gt;
&lt;li&gt;使用两个指针分别指向两个表的第一个记录。&lt;/li&gt;
&lt;li&gt;比较两个指针所指向的记录的连接字段的值，如果相等，则将这两条记录合并为一条，并输出。&lt;/li&gt;
&lt;li&gt;如果两个指针所指向的记录的连接字段的值不相等，则将连接字段较小的记录的指针向后移动一位，然后继续比较。&lt;/li&gt;
&lt;li&gt;重复步骤 3 和步骤 4，直到其中一个表的记录全部被处理完&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Merge Join 的优势在于它只需要对参与连接的表进行一次排序，并且可以并行处理多个连接操作，从而提高查询的效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据排序 为了使用 Merge Join，参与连接的表必须在连接字段上进行排序。如果表没有按照连接字段排序，可以使用ClickHouse 提供的ORDER BY 语句对表进行排序。&lt;/li&gt;
&lt;li&gt;数据类型 Merge Join 要求连接字段的数据类型必须相同，否则无法进行连接。在进行连接操作之前，需要确保连接字段的数据类型一致。&lt;/li&gt;
&lt;li&gt;内存限制 Merge Join 使用了一定的内存来存储连接字段的值，如果连接字段的值较大或者连接的表的数据量很大，可能会导致内存不足。在使用 Merge Join 时，需要根据实际情况调整 ClickHouse 的内存配置，确保有足够的内存来执行连接操作。&lt;/li&gt;
&lt;li&gt;多表连接 Merge Join 可以连接两个或多个表。当连接多个表时，需要保证每个表的连接字段都进行了排序，并且连接字段的数据类型相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/weixin_42754420/article/details/132794340&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_42754420/article/details/132794340&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClickHouse Joins Under the Hood - Full Sorting Merge Join, Partial Merge Join - MergingSortedTransform&lt;br&gt;
&lt;a href=&quot;https://clickhouse.com/blog/clickhouse-fully-supports-joins-full-sort-partial-merge-part3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://clickhouse.com/blog/clickhouse-fully-supports-joins-full-sort-partial-merge-part3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看 raid 信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mdadm --detail /dev/md5
/dev/md5:
           Version : 1.2
     Creation Time : Thu Dec 22 23:42:37 2022
        Raid Level : raid10
        Array Size : 7394613248 (6.89 TiB 7.57 TB)
     Used Dev Size : 3697306624 (3.44 TiB 3.79 TB)
      Raid Devices : 4
     Total Devices : 4
       Persistence : Superblock is persistent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Redis数据结构：Stream类型全面解析&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_45187434/article/details/132593271&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_45187434/article/details/132593271&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;group_concat 和 over partition&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select * from a;
+------+-------+
| a_id | a_age |
+------+-------+
|    1 |     2 |
|    2 |     3 |
|    3 |     4 |
+------+-------+
3 rows in set (0.00 sec)

mysql&amp;gt; select * from b;
+------+-------+
| b_id | b_age |
+------+-------+
|    1 |     5 |
|    1 |     6 |
|    3 |     6 |
+------+-------+
3 rows in set (0.00 sec)

mysql&amp;gt; select a_id,a_age,group_concat(b_age,&#39;,&#39;) from a left join b on a_id = b_id group by a_id,a_age;
+------+-------+-------------------------+
| a_id | a_age | group_concat(b_age,&#39;,&#39;) |
+------+-------+-------------------------+
|    1 |     2 | 6,,5,                   |
|    2 |     3 | NULL                    |
|    3 |     4 | 6,                      |
+------+-------+-------------------------+
3 rows in set (0.04 sec)

mysql&amp;gt; select b_age,a.*, count(*) over(partition by b_age) match_count,row_number() over(partition by b_age) match_number from b left join a on b_id = a_id;
+-------+------+-------+-------------+--------------+
| b_age | a_id | a_age | match_count | match_number |
+-------+------+-------+-------------+--------------+
|     5 |    1 |     2 |           1 |            1 |
|     6 |    1 |     2 |           2 |            1 |
|     6 |    3 |     4 |           2 |            2 |
+-------+------+-------+-------------+--------------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Appending to a File from Multiple Processes&lt;br&gt;
&lt;a href=&quot;https://nullprogram.com/blog/2016/08/03/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nullprogram.com/blog/2016/08/03/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MONGODB 内存使用分析与判断内存是否缺少&lt;br&gt;
&lt;a href=&quot;https://cloud.tencent.com/developer/article/2047328&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/2047328&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ilickhouse has everything to be one of the most used databases in the future. But today it is not yet possible to be used, only for data already processed and only use simple select and simple queries.&lt;/p&gt;
&lt;p&gt;It really is an incredibly fast database, but it lacks features much used in other banks, such as subselect. With subselect we can use almost everything without relying on its own functions (UDF). Without both functions its use is complicated.&lt;/p&gt;
&lt;p&gt;I will try to work Clickhouse together as MonetDB and post here if the result was good.&lt;/p&gt;
&lt;p&gt;csv文件中每隔 100 行取一行,保留第一行的 headers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;awk &#39;(NR%100==0 || NR==1){print $0}&#39; result.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to Do IP Address Geolocation Lookups on Linux&lt;br&gt;
&lt;a href=&quot;https://www.maketecheasier.com/ip-address-geolocation-lookups-linux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.maketecheasier.com/ip-address-geolocation-lookups-linux/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install geoip-bin
geoiplookup 8.8.4.4
https://dev.maxmind.com/geoip/geolite2-free-geolocation-data
sudo apt install mmdb-bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;企业运维实践-Nginx使用geoip2模块并利用MaxMind的GeoIP2数据库实现处理不同国家或城市的访问最佳实践指南&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/tardis/bd/art/547045377&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/tardis/bd/art/547045377&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JAVASCRIPT &amp;amp; CSS WORLD MAP&lt;br&gt;
&lt;a href=&quot;https://www.cssscript.com/tag/world-map/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cssscript.com/tag/world-map/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cssscript.com/interactive-vector-map/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cssscript.com/interactive-vector-map/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只需提供一个视频 主题 或 关键词 ，就可以全自动生成视频文案、视频素材、视频字幕、视频背景音乐，然后合成一个高清的短视频&lt;br&gt;
&lt;a href=&quot;https://github.com/harry0703/MoneyPrinterTurbo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/harry0703/MoneyPrinterTurbo&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;nginx-geoip2&lt;/h1&gt;
&lt;p&gt;nginx 集成 IP 地理位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nginx -v
nginx version: nginx/1.24.0
$ cd ~/download/
$ wget http://nginx.org/download/nginx-1.24.0.tar.gz
$ tar xf nginx-1.24.0.tar.gz
$ wget -c https://github.com/leev/ngx_http_geoip2_module/archive/refs/tags/3.4.tar.gz -O ngx_http_geoip2_module-3.4.tar.gz
$ tar xf ngx_http_geoip2_module-3.4.tar.gz
$ cd nginx-1.24.0/
$ which nginx
/usr/sbin/nginx
$ nginx -V
nginx version: nginx/1.24.0
built by gcc 9.3.0 (Ubuntu 9.3.0-10ubuntu2)
built with OpenSSL 1.1.1f  31 Mar 2020
TLS SNI support enabled
configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#39;-g -O2 -fdebug-prefix-map=/data/builder/debuild/nginx-1.24.0/debian/debuild-base/nginx-1.24.0=. -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC&#39; --with-ld-opt=&#39;-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie&#39;
$ ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#39;-g -O2 -fdebug-prefix-map=/data/builder/debuild/nginx-1.24.0/debian/debuild-base/nginx-1.24.0=. -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC&#39; --with-ld-opt=&#39;-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie&#39; --add-dynamic-module=../ngx_http_geoip2_module-3.4
$ ls objs/*.so
objs/ngx_http_geoip2_module.so  objs/ngx_stream_geoip2_module.so
$ sudo cp -a objs/*.so /etc/nginx/modules
$ ls /etc/nginx/modules
ngx_http_geoip2_module.so  ngx_http_js_module-debug.so  ngx_http_js_module.so  ngx_stream_geoip2_module.so  ngx_stream_js_module-debug.so  ngx_stream_js_module.so
$ sudo nginx -s stop
$ sudo cp -a objs/nginx /usr/sbin/nginx
$ sudo nginx
$ sudo vi /etc/nginx/nginx.conf

    load_module modules/ngx_http_geoip2_module.so;
    http {
        log_format  main  &#39;$remote_addr $geoip2_data_country_code [$time_local] $request_time $request &#39;
            &#39;$status $host $http_accept_encoding $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39;
            &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot; &#39;;

        geoip2 /usr/local/GeoIP2/GeoLite2-City.mmdb {
            $geoip2_data_country_name country names en;
            $geoip2_data_country_code default=CN source=$remote_addr country iso_code;
        }

        map $geoip2_data_country_code $lang_ch {
            CN yes;
            TW yes;
            HK yes;
            MO yes;
            default no;
        }

        access_log  /var/log/nginx/access.log main;

        server {
            location /geotest {
                default_type text/html;
                if ($lang_ch = no) {
                    return 403 &amp;quot;Access denied!IP [ $remote_addr ] $geoip2_data_country_code&amp;quot;;
                }
                return 200 &amp;quot;Welcome to you! IP [ $remote_addr ] $geoip2_data_country_code&amp;quot;;
            }
        }
    }

$ tail -f /var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Clickhouse 纯手工迁移表&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/hdpdriver/p/16088755.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202401</title>
    <link href="http://blog.ihuhao.com/2024/01/10/202401/"/>
    <id>http://blog.ihuhao.com/2024/01/10/202401/</id>
    <published>2024-01-10T03:50:35.000Z</published>
    <updated>2024-02-18T10:31:49.052Z</updated>
    
    <content type="html">&lt;p&gt;How to install and use ZSTD compression tool on Linux&lt;br&gt;
&lt;a href=&quot;https://linuxconfig.org/how-to-install-and-use-zstd-compression-tool-on-linux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://linuxconfig.org/how-to-install-and-use-zstd-compression-tool-on-linux&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zstd example1.txt
zstd -d example1.txt.zst
tar --zstd -cf example.tar.zst example/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mysql: slow import&lt;br&gt;
&lt;a href=&quot;https://dba.stackexchange.com/questions/271097/mysql-slow-import&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dba.stackexchange.com/questions/271097/mysql-slow-import&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET GLOBAL innodb_flush_log_at_trx_commit = 2;

[mysqld]
skip-log-bin
innodb_doublewrite = 0
innodb_log_buffer_size = 32M

SHOW VARIABLES LIKE &#39;log_bin&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;InnoDB关键特性之double write&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/wangqianqiannb/p/9754450.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wangqianqiannb/p/9754450.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于IO的最小单位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库 IO 的最小单位是 16K（MySQL默认，oracle是8K）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件系统 IO 的最小单位是 4K（也有 1K 的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘 IO 的最小单位是 512B&lt;/p&gt;
&lt;p&gt;show variables like ‘%double%’;&lt;br&gt;
show global status like ‘%dblwr%’;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python 数据类型 复数&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/617689935?utm_id=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/617689935?utm_id=0&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在电路分析中，复数可以用来表示电路中的电压、电流等物理量，例如电压可以表示为实部加上虚部的复数，而阻抗可以表示为复数形式的电阻和电抗。&lt;/li&gt;
&lt;li&gt;在信号处理中，复数可以用来表示信号的幅度和相位，例如正弦信号可以表示为实部为幅度，虚部为相位的复数形式。&lt;/li&gt;
&lt;li&gt;在图像处理中，复数可以用来表示图像的频域信息，例如图像可以通过傅里叶变换转换为频域信息，而频域信息可以表示为实部和虚部的复数形式。&lt;/li&gt;
&lt;li&gt;除此之外，复数还可以用于解决一些数学问题，例如求解方程、计算积分等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 CoT 到 Agent，最全综述来了！上交出品&lt;br&gt;
&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1783669439007774940&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baijiahao.baidu.com/s?id=1783669439007774940&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tmate 的意思是 teammates，它是 tmux 的一个分支，并且使用相同的配置信息（例如快捷键配置，配色方案等）。它是一个终端多路复用器，同时具有即时分享终端的能力。它允许在单个屏幕中创建并操控多个终端，同时这些终端还能与其他同事分享。&lt;/p&gt;
&lt;p&gt;你可以分离会话，让作业在后台运行，然后在想要查看状态时重新连接会话。tmate 提供了一个即时配对的方案，让你可以与一个或多个队友共享一个终端。&lt;br&gt;
&lt;a href=&quot;https://www.linuxprobe.com/quickly-share-tmate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.linuxprobe.com/quickly-share-tmate.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行 tmate 时，会通过 libssh 在后台创建一个连接到 &lt;a href=&quot;http://tmate.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tmate.io&lt;/a&gt; （由 tmate 开发者维护的后台服务器）的 ssh 连接。&lt;br&gt;
&lt;a href=&quot;http://tmate.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tmate.io&lt;/a&gt; 服务器的 ssh 密钥通过 DH 交换进行校验。&lt;/li&gt;
&lt;li&gt;客户端通过本地 ssh 密钥进行认证。&lt;/li&gt;
&lt;li&gt;连接创建后，本地 tmux 服务器会生成一个 150 位(不可猜测的随机字符)会话令牌。&lt;/li&gt;
&lt;li&gt;队友能通过用户提供的 SSH 会话 ID 连接到 &lt;a href=&quot;http://tmate.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tmate.io&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to close terminal without killing running processes on Linux&lt;br&gt;
&lt;a href=&quot;https://tecadmin.net/close-terminal-without-killing-running-processes-on-linux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tecadmin.net/close-terminal-without-killing-running-processes-on-linux/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CTRL + Z 
bg
disown -h %1

jobs -l
sudo tail -f /proc/609120/fd/1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eBPF 实践教程：使用 uprobe 捕获多种库的 SSL/TLS 明文数据&lt;br&gt;
&lt;a href=&quot;https://eunomia.dev/zh/tutorials/30-sslsniff/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://eunomia.dev/zh/tutorials/30-sslsniff/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看进程重定向&lt;br&gt;
&lt;a href=&quot;https://unix.stackexchange.com/questions/15693/see-the-stdout-redirect-of-a-running-process&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://unix.stackexchange.com/questions/15693/see-the-stdout-redirect-of-a-running-process&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat test.sh
while true;do date;sleep 1;done
$ bash test.sh &amp;gt;&amp;gt; test.log
^Z
[1]+  Stopped                 bash test.sh &amp;gt;&amp;gt; test.log
$ bg
[1]+ bash test.sh &amp;gt;&amp;gt; test.log &amp;amp;
$ jobs -l
[1]+ 2168892 Running                 bash test.sh &amp;gt;&amp;gt; test.log &amp;amp;
[02:01:07 ubuntu@scripts-server ~/haohu]$ disown -h %1
$ readlink -f /proc/2168892/fd/1
test.log
$ lsof test.log
COMMAND     PID   USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME
bash    2168892 ubuntu    1w   REG  259,1     7250 768788 test.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;终端迁移&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ps -ef | grep test.sh
ubuntu   2185765 2185718  0 02:35 pts/16   00:00:00 bash test.sh
$ screen -S test
$ sudo reptry -t 2185718
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分享一个实用的小工具 &lt;a href=&quot;https://github.com/nelhage/reptyr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nelhage/reptyr&lt;/a&gt; Reparent a running program to a new terminal。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比如你在远程终端下运行一个需要执行很久的脚本，没有在 screen 或 tmux 下，也没有用nohup 执行，一旦终端关掉，所有子进程就会自动被关闭，脚本还要重新运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以前需要 ctrl+z, bg, disown 一梭子，虽然能保住进程不挂掉，但 stdout 和 stderr 都无法查看了，除非之前做了重定向可以用readlink -f /proc/$pid/fd/1 继续查看脚本输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在这个小工具可以直接把当前终端会话连带子进程一锅端迁移到另一个screen会话里，输入输出都会自动迁移。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis module功能介绍&lt;br&gt;
&lt;a href=&quot;https://blog.51cto.com/u_15127532/2659222&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.51cto.com/u_15127532/2659222&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布隆过滤器 RedisBloom
&lt;ul&gt;
&lt;li&gt;当尝试通过网络或磁盘搜索查询时，可以先查询BloomFilter，它肯定地告诉我们要查找的元素是否可能存在（然后可以继续进行查找）还是不存在（此时可以放弃查询直接回复不存在，节省查询资源）。&lt;/li&gt;
&lt;li&gt;布隆过滤器在网页去重，数据查询和广告投放中经常被使用；新业务上线前，增加布隆过滤器也是一个很有效解决缓存击穿的有效手段。&lt;/li&gt;
&lt;li&gt;实际上是一个很长的二进制向量和一系列随机映射函数，可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，但是有一定的误识别率且无法删除元素。&lt;/li&gt;
&lt;li&gt;只要有一次哈希计算的结果对应为 0，则该元素一定不存在；反之则可能存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布谷鸟过滤器 CuckooFilter
&lt;ul&gt;
&lt;li&gt;布谷鸟过滤器在做防缓存击穿时具有很好的表现，与布隆过滤器不同的是，它可以删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持json的模块 Redisjson
&lt;ul&gt;
&lt;li&gt;它允许从 Redis 存储、更新和获取 JSON 值。&lt;/li&gt;
&lt;li&gt;redisjson 可以通过在 redis 服务器本地直接操作部分数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;咆哮位图 Redis-roaring
&lt;ul&gt;
&lt;li&gt;咆哮位图（RoaringBitmap）将整个大位图进行了分块，如果整个块都是零，那么这整个块就不用存了。&lt;/li&gt;
&lt;li&gt;但是如果位图中的元素比较少且分散，每个块里面都有 1，只存储所有位 1 的块内偏移量（整数），这就是单个块位图的稀疏存储形式 —— 存储偏移量整数列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可用于检索的模块 RediSearch
&lt;ul&gt;
&lt;li&gt;它使用户能够以极快的方式对其 Redis 数据集执行复杂的搜索查询，例如精确的词组匹配和文本查询的数字过滤，&lt;/li&gt;
&lt;li&gt;还有使用 Reids 自带的 GEO 命令进行地理过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持机器学习的redis RedisML/RedisAI&lt;/li&gt;
&lt;li&gt;支持事物处理的模块 RedisGears&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;物联网边缘计算中的全能数据库RedisEdge：实时数据、时间序列、AI、消息流、MapReduce&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/81505287&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/81505287&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在物联网边缘计算的复杂环境中，应用程序不可避免地需要多个数据模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存数据库存储采集的实时设备数据。&lt;/li&gt;
&lt;li&gt;现场会断网，所以需要把待发送到云端的数据存储到时间序列数据库中。同时边缘侧需要对历史数据进行聚合分析，例如计算温度一段时间内平均值。&lt;/li&gt;
&lt;li&gt;现场采集的数据需要转发给一个或多个消费者进行处理。&lt;/li&gt;
&lt;li&gt;边缘侧需要人工智能学习能力，来支持视频流分析，图像识别，故障诊断等低延迟响应业务。&lt;/li&gt;
&lt;li&gt;边缘侧进行类似 MapReduce 的计算。&lt;/li&gt;
&lt;li&gt;运行占用空间小，以能在性能受限的边缘计算计算节点上运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RedisEdge将开源版本Redis（带有Redis Streams的5.0版本）与RedisAI和RedisTimeSeries、RedisGears这三个模块一起打包，就可以提供边缘计算所需的数据模型了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 5.0版本，内置的Set、List、Hash等数据结构可用作实时内存数据库，用来存储边缘网关采集到的设备实时数据。&lt;/li&gt;
&lt;li&gt;Redis 5.0版本的Redis Streams数据结构，可用做消息中间件，把采集到的设备实时数据转发给其他边缘计算软件组件。&lt;/li&gt;
&lt;li&gt;RedisTimeSeries是Redis的一个模块，可用作时间序列数据库，在边缘计算网关断网的情况下，能够离线保存需要上传到云端的设备历史数据。同时也有历史数据降采样、压缩、聚合的功能。&lt;/li&gt;
&lt;li&gt;RedisGears也是Redis的一个模块，类似MapReduce的分布式动态执行框架，可以用来在分布式的边缘计算节点或者雾计算节点上运行Serverless无服务程序代码。&lt;/li&gt;
&lt;li&gt;RedisAI也是Redis的一个模块，用于执行深度学习模型，在边缘侧调用PyTorch、Tensorflow和ONNXRuntime等深度学习工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个方案是用开源多模型数据库Postgresql + 扩展插件（连接第三方数据库postgres-fdw + PG时间序列数据库扩展timescale + REST接口暴露PostgREST + 实时流分析pipelinedb) + PL/Python函数或SPI接口。&lt;/p&gt;
&lt;p&gt;eBPF 实践教程：使用 uprobe 捕获多种库的 SSL/TLS 明文数据&lt;br&gt;
&lt;a href=&quot;https://eunomia.dev/zh/tutorials/30-sslsniff/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://eunomia.dev/zh/tutorials/30-sslsniff/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wget 使用代理&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/528378176&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/528378176&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -e use_proxy=yes -e https_proxy=127.0.0.1:8080 https://aka.pw/bpf-ecli -O ecli &amp;amp;&amp;amp; chmod +x ./ecli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nettrace - 网络诊断工具&lt;br&gt;
&lt;a href=&quot;https://github.com/OpenCloudOS/nettrace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/OpenCloudOS/nettrace&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一些场景下（特别是云原生场景），Linux系统中的网络部署变得越来越复杂。&lt;/li&gt;
&lt;li&gt;一个TCP连接，从客户端到服务端，中间可能要经过复杂的NAT、GRE、IPVS等过程，网络报文在节点（主机）上的处理路径也变得越来越长。&lt;/li&gt;
&lt;li&gt;在发生网络故障（比如网络丢包）时，如何快速、有效地定位出网络问题成为了一个难题。&lt;/li&gt;
&lt;li&gt;目前常规的网络故障定位手段，如tcpdump、dropwatch、ftrace、kprobe等存在一定的短板：&lt;/li&gt;
&lt;li&gt;tcpdump：只能在链路层抓包，无法定位内核协议栈中的问题，比如常规的内核丢包问题&lt;/li&gt;
&lt;li&gt;ftrace：只能跟踪内核函数，无法进行报文过滤，且入手较难，需要对内核协议栈有一定了解&lt;/li&gt;
&lt;li&gt;kprobe：临时编写内核模块，效率和安全性低&lt;/li&gt;
&lt;li&gt;BCC：功能单一，临时编写BCC程序跟踪效率低，需要对内核有一定了解，入手难&lt;/li&gt;
&lt;li&gt;dropwatch：功能单一，只能查看网络丢包问题，且无法得到丢包原因和解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BTF&lt;br&gt;
# grep BTF /boot/config-$(uname -r)&lt;br&gt;
CONFIG_VIDEO_SONY_BTF_MPX=m&lt;br&gt;
# CONFIG_DEBUG_INFO_BTF is not set&lt;/p&gt;
&lt;p&gt;eBPF Hello, World!&lt;br&gt;
&lt;a href=&quot;https://bowers.github.io/eBPF-Hello-World/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bowers.github.io/eBPF-Hello-World/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How To Add eBPF Observability To Your Product&lt;br&gt;
&lt;a href=&quot;https://www.brendangregg.com/blog/2021-07-03/how-to-add-bpf-observability.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.brendangregg.com/blog/2021-07-03/how-to-add-bpf-observability.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Meet Gain— the New Fastest Go TCP Framework&lt;br&gt;
&lt;a href=&quot;https://betterprogramming.pub/gain-the-new-fastest-go-tcp-framework-40ec111d40e6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://betterprogramming.pub/gain-the-new-fastest-go-tcp-framework-40ec111d40e6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Extreme HTTP Performance Tuning: 1.2M API req/s on a 4 vCPU EC2 Instance&lt;br&gt;
&lt;a href=&quot;https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;周刊（第9期）：Mozilla rr使用简介&lt;br&gt;
&lt;a href=&quot;https://www.codedump.info/post/20220313-weekly-9/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.codedump.info/post/20220313-weekly-9/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rr是由Mozilla出品的一款调试工具，用官网的话来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rr这个名字里的两个r，意指record and replay，即“记录及回放”，它的使用也很简单，就是这两步：&lt;/li&gt;
&lt;li&gt;record：rr record /your/application --args 记录下来程序的执行环境。&lt;/li&gt;
&lt;li&gt;replay：rr replay，默认将使用最近保存的记录文件进行回放，回放时可以进入类似gdb那样的调试环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Awk CSV parser&lt;br&gt;
&lt;a href=&quot;https://github.com/geoffroy-aubry/awk-csv-parser&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/geoffroy-aubry/awk-csv-parser&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;csv-导入-mysql&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#csv-导入-mysql&quot;&gt;¶&lt;/a&gt;csv 导入 mysql&lt;/h2&gt;
&lt;p&gt;假如 csv 有 a,b,c 三列，我们只需要 a,c 列，并且要加入 id 自增列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 重命名 csv 文件
mv data.csv origin_data.csv
# 创建管道队列文件，文件名要和后面在 db 里创建的表名严格一致
mkfifo data.csv

# 在 db 里建表，用压缩格式以节省空间，增加自增列方便后续按范围分块并发处理
CREATE TABLE `data` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `a` varchar(128),
  `c` varchar(128),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;

# 开一个 screen 准备用 mysqlimport 导入，分隔符用 |，用 --columns 指定列
mysqlimport --fields-terminated-by=&#39;|&#39; --fields-optionally-enclosed-by=&#39;&amp;quot;&#39; --local \
    --columns=&#39;a,c&#39; -uuser -p mydb data.csv

# 再开一个 screen 往队列文件中动态输入只包含 a,c 列的数据
# awk-csv-parser 是基于 awk 的 csv 解析器，性能非常高，默认输出字段以 | 分割
# pv 是一个处理大文件的进度查看器，tail -n+2 用来跳过首行
# cut 命令用来只输出 1,3 列，就是 a,c 列
pv origin_data.csv | awk-csv-parser|tail -n+2 | cut -d&#39;|&#39; -f1,3 &amp;gt; data.csv

# 查看 io
sudo iotop -oPa 
  Total DISK READ:   38.13 M   ⣿⣿⣷⣶⣶⣶⣦⣤⣤⣄⣀⣀⣀⣀⠀⠀⠀⠀⠀ |   Total DISK WRITE:  361.06 M   ⣿⣿⣿⣿⣶⣶⣶⣤⣤⣤⣄⣀⣀⣀⠀⠀⠀⠀⠀
Current DISK READ: 2201.20 K/s ⣿⣇⣧⣼⣀⣰⣶⣆⣴⣦⡀⣦⣠⣤⠀⠀⠀⠀⠀ | Current DISK WRITE:   13.30 M/s ⣿⣀⣄⣤⣤⣼⣧⣶⣾⣄⣸⣿⣄⣰⠀⠀⠀⠀⠀
TID      PRIO USER      DISK READ   DISK WRITE  GRAPH[R+W]▽         COMMAND
373072   be/4 mysql     1044.48 K    180.39 M   ⣿⠀⣤⣰⣰⣸⣷⣆⣿⣀⣼⣶⣀⣰⠀⠀⠀⠀⠀ ►mysqld
601812   be/4 ubuntu      35.52 M      0.00 B   ⣀⣀⣀⣀⡀⣀⣀⣀⣀⣀⠀⣀⣀⣀⠀⠀⠀⠀⠀  pv

iostat -m -x 1 sda
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          11.56    0.00    0.38   26.13    0.00   61.93

Device            r/s     rMB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wMB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dMB/s   drqm/s  %drqm d_await dareq-sz     f/s f_await  aqu-sz  %util
sda             12.00      1.16     2.00  14.29  108.25    98.67  126.00      2.38    20.00  13.70  132.95    19.37    0.00      0.00     0.00   0.00    0.00     0.00    7.00  111.71   18.83  80.80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要真正在磁盘上生成原始 csv 的副本，节省磁盘空间，降低 io&lt;/li&gt;
&lt;li&gt;解析转换 csv 和导入数据可以同时进行，降低数据处理时间&lt;/li&gt;
&lt;li&gt;最终只导入需要的列，不需要导入后再删除列，使用 ROW_FORMAT=COMPRESSED 后改表会非常慢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using AWK with CSV Files&lt;br&gt;
&lt;a href=&quot;https://earthly.dev/blog/awk-csv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://earthly.dev/blog/awk-csv/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo one,two,three | awk -F &amp;quot;,&amp;quot; &#39;{ print $2}&#39;
echo one,\&amp;quot;two\&amp;quot;,three | awk -F &amp;quot;,&amp;quot; &#39;{ print $2}&#39;
echo 1,\&amp;quot;2a,2b\&amp;quot;, 3 | awk -F &amp;quot;,&amp;quot; &#39;{ print $3}&#39;

&amp;gt; git clone https://github.com/adamgordonbell/csvquote
&amp;gt; cd csvquote
&amp;gt; go build -o csvquote cmd/cvsquote/main.go
&amp;gt; cp ./csvquote /usr/local/bin

echo 1,\&amp;quot;2a,\&amp;quot;\&amp;quot;2b\&amp;quot;, 3 | csvquote
echo 1,\&amp;quot;2a,\&amp;quot;\&amp;quot;2b\&amp;quot;, 3 | csvquote | csvquote -u
echo 1,\&amp;quot;2a,2b\&amp;quot;, 3 | csvquote | awk -F &amp;quot;,&amp;quot; &#39;{ print $2 }&#39; | csvquote -u
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The gawk version 4 manual says to use FPAT = “([^,]*)|(”[^“]+”)&amp;quot;&lt;/li&gt;
&lt;li&gt;When FPAT is defined, it disables FS and specifies fields by content instead of by separator.&lt;/li&gt;
&lt;li&gt;The short answer is “I wouldn’t use gawk to parse CSV if the CSV contains awkward data”, where ‘awkward’ means things like commas in the CSV field data.&lt;/li&gt;
&lt;li&gt;I’d probably use Perl and the Text::CSV or Text::CSV_XS modules to read and process the data.&lt;/li&gt;
&lt;li&gt;Remember, Perl was originally written in part as an awk and sed killer - hence the a2p and s2p programs still distributed with Perl which convert awk and sed scripts (respectively) into Perl.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;jsonl 处理&lt;br&gt;
&lt;a href=&quot;https://github.com/jqlang/jq&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/jqlang/jq&lt;/a&gt;&lt;br&gt;
jq is a lightweight and flexible command-line JSON processor akin to sed,awk,grep, and friends for JSON data. It’s written in portable C and has zero runtime dependencies, allowing you to easily slice, filter, map, and transform structured data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/linux/jq-command-json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.baeldung.com/linux/jq-command-json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Capturing the Network Traffic of a Process&lt;br&gt;
&lt;a href=&quot;https://www.baeldung.com/linux/capture-process-network-traffic&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.baeldung.com/linux/capture-process-network-traffic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Capturing the network traffic of a process is an important task for system administrators and developers who need to monitor and analyze the information to identify security vulnerabilities or diagnose performance issues.&lt;/p&gt;
&lt;p&gt;Airflow概览&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/352989254&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/352989254&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;irflow是将多个任务按照其依赖关系组织起来进行管理调度的工具。Airflow基于python编写，通过python脚本可以配置和使用其作为data pipeline。除了命令行之外，Airflow提供了web可视化界面，用来管理和监控任务的执行，并且可以查看任务依赖关系图。Airflow可以方便同Hive、Presto、MySQL、HDFS、Postgres 等数据库交互，另外，提供了hook便于扩展。&lt;/p&gt;
&lt;p&gt;DAG（有向无环图）是Airflow工作流的基本概念。DAG的每个节点表示一个任务，有向边是任务之间的依赖。每个任务具有原子性，保证在任务失败的时候可以自动或手动重试该任务，而不必重启整个DAG。这些任务和依赖构成的DAG就是一个工作流。&lt;/p&gt;
&lt;p&gt;仿百度网盘的一款轻量级微服务架构网盘系统，云盘系统，文件管理系统&lt;br&gt;
&lt;a href=&quot;https://gitee.com/college996/zwz-netdisk/tree/master&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/college996/zwz-netdisk/tree/master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How do I find out which process is eating up my bandwidth?&lt;br&gt;
&lt;a href=&quot;https://askubuntu.com/questions/2411/how-do-i-find-out-which-process-is-eating-up-my-bandwidth&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://askubuntu.com/questions/2411/how-do-i-find-out-which-process-is-eating-up-my-bandwidth&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use iftop to locate the TCP port on your machine that is receiving the most traffic. Then use sudo netstat -tup to locate the process “owning” that port.&lt;/li&gt;
&lt;li&gt;sudo apt-get install nethogs
&lt;ul&gt;
&lt;li&gt;sudo nethogs -v 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dstat --net --top-io-adv&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Practical Linux tracing ( Part 1/5) : symbols, debug symbols and stack unwinding&lt;br&gt;
&lt;a href=&quot;https://tungdam.medium.com/things-you-should-know-to-begin-playing-with-linux-tracing-tools-part-i-x-225aae1aaf13&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tungdam.medium.com/things-you-should-know-to-begin-playing-with-linux-tracing-tools-part-i-x-225aae1aaf13&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用strip, eu-strip, objcopy等剥离与导回符号表及调试信息&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/nirendao/article/details/104107608&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/nirendao/article/details/104107608&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc -g -o test test.c

# test.debug 将包含调试信息和符号表； 而test将只包含调试信息
objcopy --only-keep-debug test test.debug

# 从test文件里剥离debug段
objcopy --strip-debug test

# 更彻底地，上面这句可以换成下面这句以移除所有的debug信息和符号表
strip -s test

# 在二进制文件 test 中添加 .gnu_debuglink 段以指向符号表和调试信息文件
objcopy --add-gnu-debuglink=test.debug test

# objdump 命令可以查看指定的section
objdump -s -j .gnu_debuglink test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://openanolis.cn/sig/ebpfresearch/doc/633529753894377555&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://openanolis.cn/sig/ebpfresearch/doc/633529753894377555&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BPF是一个新的动态跟踪技术，目前这项技术正在深刻的影响着我们的生产和生活。&lt;/p&gt;
&lt;p&gt;BPF在四大应用场景发挥着巨大作用：系统故障诊断，它可以动态插桩透视内核；网络性能优化，它可以对接收和发送的网络包做修改和转发；系统安全，它可以监控文件打开和关闭从而做出安全决策等；性能监控，它可以查看函数耗费时间从而知道性能瓶颈点。&lt;/p&gt;
&lt;p&gt;BPF技术也是随着Linux内核的发展而发展的，Linux内核版本经历了3.x向4.x到5.x演进，eBPF技术的支持也是从4.x开始更加完善起来，特别是5.x内核也增加了非常多的高级特性。但是云上服务器有大量的3.10内核版本是不支持eBPF的，为了让我们现有的eBPF工具在这些存量机器得以运行，我们移植了BPF到低版本内核，同时基于libbpf的CO-RE能力，保证一个工具可运行在3.x/4.x/5.x的低、中、高内核版本。&lt;/p&gt;
&lt;p&gt;另外，当前比较热门的BPF开发方式有：&lt;/p&gt;
&lt;p&gt;1）纯libbpf应用开发：借助libbpf库加载BPF程序到内核的方式：这种开发方式不仅效率低，没有基础库封装，所有必备步骤和基础函数都需要自己摸索；&lt;br&gt;
2）借助BCC：开发效率高、可移植性好，并且支持动态修改内核部分代码，非常灵活。但存在部署依赖Clang/LLVM等库；每次运行都要执行Clang/LLVM编译，严重消耗CPU、内存等资源，容易与其它服务争抢。&lt;/p&gt;
&lt;p&gt;学会Pointer指针事件 ，一套拖拽事件两端(PC端、移动端)跑&lt;br&gt;
&lt;a href=&quot;https://segmentfault.com/a/1190000043955743&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000043955743&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C语言深度理解结构体(内存对齐、位段、偏移量、柔性数组)&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/SPMAX/article/details/122774979&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/SPMAX/article/details/122774979&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;escapture&lt;br&gt;
抓包&lt;br&gt;
./ecapture tls -m pcap -i eth0 --pcapfile=ecapture.pcapng --port=443&lt;br&gt;
sudo ./ecapture mysqld -m /usr/sbin/mysqld&lt;/p&gt;
&lt;p&gt;浏览器指纹检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.yalala.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.yalala.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ja3.zone/check&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ja3.zone/check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_46147979/article/details/130281016&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_46147979/article/details/130281016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DWARF&lt;br&gt;
&lt;a href=&quot;https://www.wenmi.com/article/px5ev6038m8o.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.wenmi.com/article/px5ev6038m8o.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OhMyZsh，简直是我用来伪装资深程序员的神器！&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/505591537&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/505591537&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install zsh
sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;
# 查看当前在使用的shell
echo $SHELL
# 也可以使用下面命令自行修改默认shell
chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;macos 安装 Docker&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install docker docker-compose colima
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Docker部署clickhouse（超详细图文教程）&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/fy512/article/details/123482700&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/fy512/article/details/123482700&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker pull yandex/clickhouse-server
docker pull yandex/clickhouse-client

docker run -d -p 8123:8123 -p 9000:9000 --name clickhouse yandex/clickhouse-server
docker run -it --rm --link clickhouse:clickhouse-server yandex/clickhouse-client --host clickhouse

# 如果想指定目录启动，这里以clickhouse-test-server命令为例，可以随意写
mkdir /work/clickhouse/clickhouse-test-db       ## 创建数据文件目录
# 使用以下路径启动，在外只能访问clickhouse提供的默认9000端口，只能通过clickhouse-client连接server
docker run -d --name clickhouse-test-server --ulimit nofile=262144:262144 --volume=/work/clickhouse/clickhouse_test_db:/var/lib/clickhouse yandex/clickhouse-server


CREATE TABLE t_stock
(
    `id` UInt32,
    `sku_id` String,
    `total_amount` Decimal(16, 2),
    `create_time` Datetime
)
ENGINE = MergeTree()
PARTITION BY toYYYYMMDD(create_time)
PRIMARY KEY id
ORDER BY (id, sku_id)

insert into t_stock values
(101,&#39;sku_002&#39;,2000.00,&#39;2020-06-01 11:00:00&#39;),
(102,&#39;sku_004&#39;,2500.00,&#39;2020-06-01 11:00:00&#39;),
(103,&#39;sku_002&#39;,2000.00,&#39;2020-06-02 11:00:00&#39;),
(104,&#39;sku_002&#39;,12000.00,&#39;2020-06-03 11:00:00&#39;),
(105,&#39;sku_002&#39;,600.00,&#39;2020-06-04 11:00:00&#39;);
select * from t_stock;

docker exec -it clickhouse bash
cd /var/lib/clickhouse/data/

insert into t_stock values
(101,&#39;sku_002&#39;,2000.00,&#39;2020-06-01 14:00:00&#39;),
(102,&#39;sku_004&#39;,2500.00,&#39;2020-06-01 15:00:00&#39;),
(103,&#39;sku_002&#39;,2000.00,&#39;2020-06-01 16:00:00&#39;),
(104,&#39;sku_002&#39;,12000.00,&#39;2020-06-01 17:00:00&#39;);

OPTIMIZE TABLE t_stock FINAL;

CREATE TABLE t_stock_2
(
    `id` UInt32,
    `sku_id` String,
    `total_amount` Decimal(16, 2),
    `create_time` Datetime,
    INDEX secondIndex total_amount TYPE minmax GRANULARITY 5
)
ENGINE = MergeTree
PARTITION BY toYYYYMMDD(create_time)
PRIMARY KEY id
ORDER BY (id, sku_id)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;深入浅出 ClickHouse 物化视图&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/7RxBg1mxdpffcpWp02TJ7w&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/7RxBg1mxdpffcpWp02TJ7w&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;clickHouse-MergeTree家族引擎&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/bwf317/article/details/110785858&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/bwf317/article/details/110785858&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AggregatingMergeTree 也是预先聚合引擎的一种，用于提升聚合计算的性能&lt;/li&gt;
&lt;li&gt;与 SummingMergeTree 的区别在于：
&lt;ul&gt;
&lt;li&gt;SummingMergeTree 对非主键列进行 sum 聚合&lt;/li&gt;
&lt;li&gt;而 AggregatingMergeTree 则可以指定各种聚合函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AggregatingMergeTree 的语法比较复杂，需要结合物化视图或 ClickHouse 的特殊数据类型 AggregateFunction 一起使用
&lt;ul&gt;
&lt;li&gt;AggregateFunction(arg1 , arg2) ;参数一 聚合函数 参数二 数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 insert 和 select 时，也有独特的写法和要求：写入时需要使用 -State 语法，查询时使用 -Merge 语法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Working with CSV and TSV data in ClickHouse&lt;br&gt;
&lt;a href=&quot;https://clickhouse.com/docs/en/integrations/data-formats/csv-tsv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://clickhouse.com/docs/en/integrations/data-formats/csv-tsv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql 锁&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show status like &#39;table%&#39;;
show status like &#39;InnoDB_row_lock%&#39;;
show engine innodb status\G
show OPEN TABLES where In_use &amp;gt; 0;
select * from performance_schema.data_locks\G
select * from performance_schema.data_lock_waits\G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;随着数字技术的发展，数据呈爆炸式增长，数据类型越来越丰富，对数据价值挖掘的实时性要求不断提升，业务场景也越来越复杂度。在过去几年里，数据分析的需求通常采用多套系统组合的方式来完成，比如采用 Kylin 在支持 BI 报表场景，采用 Trino、Impala 支撑交互式分析场景，采用 ClickHouse、Druid 来支撑实时分析场景，StarRocks 希望通过技术创新简化数据技术栈，用户可以借助 StarRocks 一个引擎实现全场景的数据分析。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/415561162/answer/3364773974&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/415561162/answer/3364773974&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当前业界构建数据分析的技术栈，有两条典型的路线，一个是数仓路线，一个是数据湖的路线。数据仓库的路线，数据先通过 ETL 统一写入到数仓进行管理，然后构建数据集市来满足 BI 分析的各种需求，优势是数据质量高、查询性能高、具备实时分析的能力、数据治理功能完善等；而数据湖的路线，通常是未经加工的数据先统一存储在数据湖，作为企业数据的 Single source of truth，然后按需的使用数据，构建数据应用，优势是通开放生态、扩展性强，性价比高。&lt;/p&gt;
&lt;p&gt;现在什么数据库或大数据技术比较适合做数据仓库？ - StarRocks的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/415561162/answer/3364773974&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/415561162/answer/3364773974&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;How to install and use ZSTD compression tool on Linux&lt;br&gt;
&lt;a href=&quot;https://linuxconfig.org/how-to-install-and-use-zstd-compression-tool-o
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202312</title>
    <link href="http://blog.ihuhao.com/2023/12/06/202312/"/>
    <id>http://blog.ihuhao.com/2023/12/06/202312/</id>
    <published>2023-12-06T02:39:37.000Z</published>
    <updated>2024-01-02T08:34:03.945Z</updated>
    
    <content type="html">&lt;p&gt;在visudo时更改默认编辑器&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/ethnicitybeta/article/details/122554415&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/ethnicitybeta/article/details/122554415&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export VISUAL=vim
sudo -E visudo

VISUAL=&amp;quot;vim&amp;quot; ; export VISUAL
EDITOR=&amp;quot;$VISUAL&amp;quot; ; export EDITOR

sudo usermod -aG root ubuntu
%root   ALL=(ALL:ALL) NOPASSWD:ALL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;P就是能在多项式时间内解决的问题，NP就是能在多项式时间验证答案正确与否的问题。用大白话讲大概就是这样。所以P是否等于NP实质上就是在问，如果对于一个问题我能在多项式时间内验证其答案的正确性，那么我是否能在多项式时间内解决它？&lt;/p&gt;
&lt;p&gt;SET time_zone = ‘UTC’;&lt;br&gt;
ERROR 1298 (HY000): Unknown or incorrect time zone: ‘UTC’&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p -Dmysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hysteria2&lt;br&gt;
&lt;a href=&quot;https://v2.hysteria.network/zh/docs/getting-started/Client/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://v2.hysteria.network/zh/docs/getting-started/Client/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Retrieve response headers from PHP cURL&lt;br&gt;
&lt;a href=&quot;https://blog.cpming.top/p/get-response-header-from-php-curl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.cpming.top/p/get-response-header-from-php-curl&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$headers = [];
$url = &amp;quot;https://www.google.com&amp;quot;;
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_HEADERFUNCTION,
    function ($curl, $header) use (&amp;amp;$headers) {
        $len = strlen($header);
        $header = explode(&#39;:&#39;, $header, 2);
        if (count($header) &amp;lt; 2) // ignore invalid headers
            return $len;

        $headers[strtolower(trim($header[0]))][] = trim($header[1]);

        return $len;
    }
);
$response = curl_exec($ch);
print_r($headers);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/codewhisperer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aws.amazon.com/codewhisperer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;speex是近年来开发出的一套功能强大的语音引擎，能够实现高质量和低比特率的编码。它不仅提供了基于码激励线性预测（CELP）算法的编/解码模块，而且在其最新发布的版本中还提供了声音预处理和声学回声消除模块，为保障IP网络中的语音通信质量提供了技术手段。此外，Speex还具有压缩后的比特率低（2.15~44.2kbps）的特点，并支持多种比特率。这些特点使得Speex特别适合VoIP, 音视频系统&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/liuxunfei15/article/details/120353056&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/liuxunfei15/article/details/120353056&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何使用 Server-Sent Events 和 Flask 构建实时 Web 应用程序&lt;br&gt;
&lt;a href=&quot;http://www.javascriptcn.com/post/651ccd0795b1f8cacd44d0c6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.javascriptcn.com/post/651ccd0795b1f8cacd44d0c6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Split Python Flask app into multiple files in File-Organization&lt;br&gt;
&lt;a href=&quot;https://pyquestions.com/split-python-flask-app-into-multiple-files&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pyquestions.com/split-python-flask-app-into-multiple-files&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python 解方程的三种方法&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24893371&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/24893371&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x + 2y = 3
4x ＋ 5y = 6

In [1]: import numpy as np
   ...: A = np.mat(&#39;1,2; 4,5&#39;)    # 构造系数矩阵 A
   ...: b = np.mat(&#39;3,6&#39;).T       # 构造转置矩阵 b （这里必须为列向量）
   ...: r = np.linalg.solve(A,b)  # 调用 solve 函数求解
   ...: print r
   ...:
Out[1]: [[-1.]
         [ 2.]]
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在visudo时更改默认编辑器&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/ethnicitybeta/article/details/122554415&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202311</title>
    <link href="http://blog.ihuhao.com/2023/11/04/202311/"/>
    <id>http://blog.ihuhao.com/2023/11/04/202311/</id>
    <published>2023-11-04T03:07:02.000Z</published>
    <updated>2023-12-05T09:33:33.016Z</updated>
    
    <content type="html">&lt;p&gt;整会promise这8个高级用法&lt;br&gt;
&lt;a href=&quot;https://blog.51cto.com/u_14627797/6989643&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.51cto.com/u_14627797/6989643&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;promise数组串行执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const requestAry = [() =&amp;gt; api.request1(), () =&amp;gt; api.request2(), () =&amp;gt; api.request3()];
for (const requestItem of requestAry) {
  await promiseItem();
}

const requestAry = [() =&amp;gt; api.request1(), () =&amp;gt; api.request2(), () =&amp;gt; api.request3()];
const finallyPromise = requestAry.reduce(
    (currentPromise, nextRequest) =&amp;gt; currentPromise.then(() =&amp;gt; nextRequest()),
    Promise.resolve(); // 创建一个初始promise，用于链接数组内的promise
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sleep&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function sleep(time) {
    return new Promise((resolve) =&amp;gt; setTimeout(resolve, time));
}

await sleep(100) // 防止请求发送太快
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_57057576/article/details/125856993&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_57057576/article/details/125856993&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;微信小程序中，图片的完全居中显示，line-height并不能发挥效果， line-height可以时内部文字垂直居中显示，但是对于图片并未发挥效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平居中显示，可以使用 text-align:center&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方法：使用flew布局&lt;/p&gt;
&lt;p&gt;display: flex;&lt;br&gt;
align-items: center;&lt;br&gt;
justify-content: center;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微信小程序高度height设置百分比无效，只需一步搞定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;page{height：100%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 Certbot 为 Nginx 自动配置 SSL 证书&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_34010538/article/details/133825978&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_34010538/article/details/133825978&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install certbot python3-certbot-nginx

sudo certbot --nginx -d your_domain
sudo certbot renew --dry-run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;清理临时文件&lt;br&gt;
&lt;a href=&quot;https://askubuntu.com/questions/380238/how-to-clean-tmp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://askubuntu.com/questions/380238/how-to-clean-tmp&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo find /tmp -type f -atime +10 -delete
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://platform.openai.com/docs/assistants/overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://platform.openai.com/docs/assistants/overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;期货交易生涯中，您遇到哪些契机让你的交易水平发生质的蜕变？ - 藏巧守拙的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/445059936/answer/2661994653&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/445059936/answer/2661994653&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/microsoft/inshellisense&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/microsoft/inshellisense&lt;/a&gt;&lt;br&gt;
inshellisense provides IDE style autocomplete for shells. It’s a terminal native runtime for autocomplete which has support for 600+ command line tools. inshellisense supports Windows, Linux, &amp;amp; MacOS.&lt;/p&gt;
&lt;p&gt;EventSource / Server-Sent Events through Nginx&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/13672743/eventsource-server-sent-events-through-nginx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/13672743/eventsource-server-sent-events-through-nginx&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy_set_header Connection &#39;&#39;;
proxy_http_version 1.1;
chunked_transfer_encoding off;
proxy_buffering off;
proxy_cache off;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to handle streaming in OpenAI GPT chat completions&lt;br&gt;
&lt;a href=&quot;https://blog.georgeck.me/how-to-handle-streaming-in-openai-gpt-chat-completions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.georgeck.me/how-to-handle-streaming-in-openai-gpt-chat-completions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are the main differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard SSE expects GET resources. As you can see, OpenAI expects POST with custom payload.&lt;/li&gt;
&lt;li&gt;The same API endpoint will respond with content-type: application/json if there are any errors in the API request itself. So, the client will have to handle both types of responses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;english&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not only can you make your own GPT for fun or productivity, but you’ll soon be able to publish it on a marketplace they call the GPT Store — and maybe even make a little cash in the process.&lt;/li&gt;
&lt;li&gt;The new features, announced with many others today at OpenAI’s first developer day in San Francisco, indicate a more hands-off approach to the AI marketplace, which has hitherto been defined by a handful of dedicated general-purpose systems.&lt;/li&gt;
&lt;li&gt;Indeed, said systems are becoming even more general-purpose with new capabilities, but the AI giant has clearly taken a page from Apple’s book in seeing that being the go-to platform for the ingenuity of others is at least as valuable as having ingenuity oneself.&lt;/li&gt;
&lt;li&gt;Use Assistant API once it’s released for automatic context retrieval. The Assistant API will create a thread that we can add messages too, to keep the history of actions, but it doesn’t support the Vision API yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;curl请求IPv6服务(地址)&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/a145127/article/details/127408971&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/a145127/article/details/127408971&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-6 表示使用IPv6的地址
-g 或 --globoff 表示url中允许使用[]
 
curl -6 -g &amp;quot;http://[726c:4666:637f:f130:c92f:5330:6b10:7165]:8080&amp;quot;    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MySQL REGEXP word boundaries [[:&amp;lt;:]] [[:&amp;gt;:]] and double quotes&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/18901704/mysql-regexp-word-boundaries-and-double-quotes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/18901704/mysql-regexp-word-boundaries-and-double-quotes&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In MySQL up from 8.0.4 use: \\bword\\b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to declare a variable in MySQL?&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/11754781/how-to-declare-a-variable-in-mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/11754781/how-to-declare-a-variable-in-mysql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL: Selecting multiple fields into multiple variables in a stored procedure&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/2450529/mysql-selecting-multiple-fields-into-multiple-variables-in-a-stored-procedure&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/2450529/mysql-selecting-multiple-fields-into-multiple-variables-in-a-stored-procedure&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT Id, dateCreated
INTO iId, dCreate
FROM products
WHERE pName = iName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Flink的DAG可视化开发实践&lt;br&gt;
链接：&lt;a href=&quot;https://www.jianshu.com/p/9662f6a65cd8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/9662f6a65cd8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;离线分析之所以适合用DAG进行开发，是因为它的主要逻辑表达语言工具是SQL，再辅以循环、分支、归并等结构，更复杂的情况可以用MR和Python节点解决，这样几乎能完全适应所有离线分析的场景。而Flink虽然支持FlinkQL，但是它在实际工作场景下的适用性太弱了，关键的原因就在于离线分析是属于统计，而流式计算式是计算。SQL擅长统计，但并不适合计算（离线分析中复杂点的计算也基本用UDF来做）。&lt;/p&gt;
&lt;p&gt;Flink之所以难以用DAG可视化开发，关键的问题就是它的算子只定义了基本特性，内部的逻辑完全自由。这种自由定义，对纯代码开发来说是可以的且强大的，但却对可视化开发不友好。如果可视化仅仅是拖出一个节点来，然后在里面用Java/Scala实现特定的方法，那这就不是可视化开发了，而是另一种Flink专用IDE了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/boyan-avfmj/aviatorscript/guhmrc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.yuque.com/boyan-avfmj/aviatorscript/guhmrc&lt;/a&gt;&lt;br&gt;
Aviator 起源于 2010 年左右，当时我还在淘宝中间件，读了龙书，了解了 ASM ，开始读 clojure 编译器的源码。刚好同时在做 Notify 这个内部消息中间件的一个重要版本实现，其中有一个需求是实现 AMQP 规范里的 header 订阅，允许用户指定一个布尔表达式来决定是否订阅某种类型的消息，需要对布尔表达式字符串进行求值。当时正处于造轮子的兴奋期，因此就写了第一个版本出来，第一个版本花了一两天的功夫，整个代码结构其实到现在也没有特别大的改变，还是那么乱 :)&lt;/p&gt;
&lt;p&gt;数据仓库 ，由数据仓库之父比尔·恩门（Bill Inmon）于1990年提出的。 1991年，他写了一本书，叫《Building the Data Warehouse》（建立数据仓库），书中提出的：&lt;br&gt;
数据仓库（Data Warehouse）是一个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向主题的（Subject Oriented）、&lt;/li&gt;
&lt;li&gt;集成的（Integrated）、&lt;/li&gt;
&lt;li&gt;不可修改的（Non-Volatile）、&lt;/li&gt;
&lt;li&gt;与时间相关的（Time Variant）的数据集合，&lt;/li&gt;
&lt;li&gt;专门用于支持管理决策(Decision Making Support)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ClickHouse is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;场景特征：

大多数是读请求
数据总是以相当大的批(&amp;gt; 1000 rows)进行写入
不修改已添加的数据
每次查询都从数据库中读取大量的行，但是同时又仅需要少量的列
宽表，即每个表包含着大量的列
较少的查询(通常每台服务器每秒数百个查询或更少)
对于简单查询，允许延迟大约50毫秒
列中的数据相对较小：数字和短字符串(例如，每个URL 60个字节)
处理单个查询时需要高吞吐量（每个服务器每秒高达数十亿行）
事务不是必须的
对数据一致性要求低
每一个查询除了一个大表外都很小
查询结果明显小于源数据，换句话说，数据被过滤或聚合后能够被盛放在单台服务器的内存中
clickhouse自身限制：

不支持真正的删除/更新支持 不支持事务
不支持二级索引
有限的SQL支持，join实现与众不同
不支持窗口功能
元数据管理需要人工干预维护

链接：https://www.jianshu.com/p/7ec2cc9a4069
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实时数仓方案如何选型和构建&lt;br&gt;
原文链接：&lt;a href=&quot;https://blog.csdn.net/weixin_43597208/article/details/126355132&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_43597208/article/details/126355132&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种方案的好处有二，方案简单；数据实时。不过有两个缺点：&lt;/p&gt;
&lt;p&gt;一个是用户每产生一个新的报表需求，都需要开发一个Flink流式计算任务，数据开发的人力成本和时间成本都较高。&lt;/p&gt;
&lt;p&gt;第二个是对于每天需要接入近百亿的数据平台，如果要分析近一个月的数据，则需要的Flink集群规模要求很大，且需要将很多计算的中间数据存储在内存中以便多流Join。&lt;/p&gt;
&lt;p&gt;大数据分析使用哪些工具？ - Smartbi的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/415610563/answer/3255681655&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/415610563/answer/3255681655&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;28、实时用户画像之任务调度DS之Flink任务实战讲解&lt;br&gt;
&lt;a href=&quot;https://edu.51cto.com/lesson/781871.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://edu.51cto.com/lesson/781871.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;markmap 这个名字是 Markdown 和 Mindmap 的组合&lt;br&gt;
&lt;a href=&quot;https://markmap.js.org/repl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://markmap.js.org/repl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python3网络编程&lt;br&gt;
&lt;a href=&quot;https://0xbharath.github.io/python-network-programming/protocols/dns/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://0xbharath.github.io/python-network-programming/protocols/dns/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Setting Up V2Ray with NGINX + WebSocket + TLS&lt;br&gt;
&lt;a href=&quot;https://tofu.icu/archives/13&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tofu.icu/archives/13&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)
apt update
apt install nginx certbot python3-certbot-nginx
vi /usr/local/etc/v2ray/config.json

{
  &amp;quot;inbounds&amp;quot;: [
    {
      &amp;quot;port&amp;quot;: 10000,
      &amp;quot;listen&amp;quot;:&amp;quot;127.0.0.1&amp;quot;,
      &amp;quot;protocol&amp;quot;: &amp;quot;vmess&amp;quot;,
      &amp;quot;settings&amp;quot;: {
        &amp;quot;clients&amp;quot;: [
          {
            &amp;quot;id&amp;quot;: &amp;quot;your-uuid&amp;quot;,
            &amp;quot;alterId&amp;quot;: 0
          }
        ]
      },
      &amp;quot;streamSettings&amp;quot;: {
        &amp;quot;network&amp;quot;: &amp;quot;ws&amp;quot;,
        &amp;quot;wsSettings&amp;quot;: {
        &amp;quot;path&amp;quot;: &amp;quot;/yourpath/&amp;quot;
        }
      }
    }
  ],
  &amp;quot;outbounds&amp;quot;: [
    {
      &amp;quot;protocol&amp;quot;: &amp;quot;freedom&amp;quot;,
      &amp;quot;settings&amp;quot;: {}
    }
  ]
}

certbot certonly --nginx -d example.com

server {
  listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate       /path/to/your/certificate;
  ssl_certificate_key   /path/to/your/certificate_key;
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;
  ssl_session_tickets off;

  ssl_protocols         TLSv1.2 TLSv1.3;
  ssl_ciphers           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;

  server_name           example.com;
  location /yourpath/ {
    if ($http_upgrade != &amp;quot;websocket&amp;quot;) {
        return 404;
    }
    proxy_redirect off;
    proxy_pass http://127.0.0.1:10000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
    proxy_set_header Host $http_host;
    # Show real IP in v2ray access.log
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}

service nginx restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Disable Python’s output buffering with sys.stdout.flush() or -u command line option.&lt;br&gt;
&lt;a href=&quot;https://python-code.dev/articles/3750&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://python-code.dev/articles/3750&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os
import sys

if not os.environ.get(&amp;quot;PYTHONUNBUFFERED&amp;quot;):
    os.environ[&amp;quot;PYTHONUNBUFFERED&amp;quot;] = &amp;quot;1&amp;quot;
    os.execv(sys.executable, [sys.executable] + sys.argv)

print(&amp;quot;This message will be printed without buffering&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What Is Python Output Buffering and How to Disable It?&lt;br&gt;
&lt;a href=&quot;https://blog.finxter.com/what-is-python-output-buffering-and-how-to-disable-it/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.finxter.com/what-is-python-output-buffering-and-how-to-disable-it/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import io
import os
import sys
import time

try:
    # open stdout in binary mode, then wrap it in a TextIOWrapper and enable write_through
    sys.stdout = io.TextIOWrapper(open(sys.stdout.fileno(), &#39;wb&#39;, 0), write_through=True)
    # for flushing on newlines only use :
    # sys.stdout.reconfigure(line_buffering=True)
except TypeError:
    # In case you are on Python 2
    sys.stdout = os.fdopen(sys.stdout.fileno(), &#39;w&#39;, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How to Check if Python’s Output Buffering Is Enabled&lt;br&gt;
&lt;a href=&quot;https://adamj.eu/tech/2020/06/26/how-to-check-if-pythons-output-buffering-is-enabled/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://adamj.eu/tech/2020/06/26/how-to-check-if-pythons-output-buffering-is-enabled/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import io
import sys

def output_buffering_enabled():
    return isinstance(sys.__stdout__.buffer, io.BufferedWriter)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resume Matcher is an open source, free tool to improve your resume. It works by using language models to compare and rank resumes with job descriptions.&lt;/p&gt;
&lt;p&gt;www.resumematcher.fyi/&lt;/p&gt;
&lt;p&gt;有哪些命令行的软件堪称神器？ - HelloGitHub的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/59227720/answer/2644274078&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/59227720/answer/2644274078&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;滴滴弹性云基于 K8S 的调度实践&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/nMSIsS72fSXGqJO9Vy_Pfw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/nMSIsS72fSXGqJO9Vy_Pfw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sendgrid.com/en-us/marketing/sendgrid-vs-amazon-ses&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sendgrid.com/en-us/marketing/sendgrid-vs-amazon-ses&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx 中运行 JavaScript&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/393788937&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/393788937&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nginx/njs/issues/179&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/nginx/njs/issues/179&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While OpenResty is mature and a great tool to use, we decided to implement our own scripting for nginx for several reason.&lt;/p&gt;
&lt;p&gt;njs is tailored to be executed inside nginx (fast VM creation/destroying), lua may have GC issues under heavy load.&lt;br&gt;
lua adds a lot of ad-hoc features (directives, lua methods), njs strives for simplicity using powerful native nginx primitives (variables, subrequests).&lt;br&gt;
njs is a pure nginx module, OpenResty is a set of patches which sometime abuses original nginx design.&lt;br&gt;
we need our own scripting for nginx-plus (paid version) features.&lt;br&gt;
While we already use njs for production it is still in early phase and lacks many features which OpenResty has. BTW we do not plan to implement everything lua/openresty has because the design philosophy is different.&lt;/p&gt;
&lt;p&gt;Modern C++ Programming Course (C++11/14/17/20)&lt;br&gt;
&lt;a href=&quot;https://github.com/federico-busato/Modern-CPP-Programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/federico-busato/Modern-CPP-Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12 Lessons, Get Started Building with Generative AI&lt;br&gt;
&lt;a href=&quot;https://microsoft.github.io/generative-ai-for-beginners/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://microsoft.github.io/generative-ai-for-beginners/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Longhorn is a distributed block storage system for Kubernetes. Longhorn is cloud-native storage built using Kubernetes and container primitives.&lt;br&gt;
&lt;a href=&quot;https://github.com/longhorn/longhorn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/longhorn/longhorn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go 语言 | 1.16 新增的embed在各流行Web框架中的应用&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/372800639&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/372800639&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get -u &amp;quot;github.com/gin-gonic/gin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go: module github.com/gin-gonic/gin: Get &amp;quot;https://proxy.golang.org/github.com/gin-gonic/gin/@v/list&amp;quot;: dial tcp 142.251.43.17:443: i/o timeout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解决：可以使用国内代理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct

go get -u &amp;quot;github.com/gin-gonic/gin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Golang gin框架&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/book_longker/article/details/123760632&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/book_longker/article/details/123760632&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;golang微框架Gin&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_46079238/article/details/130780276&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_46079238/article/details/130780276&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gin 打包静态文件·&lt;br&gt;
&lt;a href=&quot;https://www.jianshu.com/p/448c6ef02bc8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/448c6ef02bc8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Golang微服务框架居然可以开发单体应用？—— Kratos单体架构实践&lt;br&gt;
&lt;a href=&quot;https://www.jianshu.com/p/c541e7b73c3d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/c541e7b73c3d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从微信后端仓库发展史谈谈单仓和多仓&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/S2vcMTpLJpMREC6UoAGJmQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/S2vcMTpLJpMREC6UoAGJmQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java快速创建http/https服务器&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_18497293/article/details/128019269&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_18497293/article/details/128019269&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyQt5-无边框窗体的移动实现&lt;br&gt;
&lt;a href=&quot;https://www.sumver.cn/archives/955/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sumver.cn/archives/955/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python搭建悬浮窗口&lt;br&gt;
&lt;a href=&quot;https://www.python100.com/html/EKRD86544Y9L.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.python100.com/html/EKRD86544Y9L.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/659744471?utm_id=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/659744471?utm_id=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;20个堪比 Everything 的 Windows 实用小工具推荐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档名搜索神器：Everything&lt;/li&gt;
&lt;li&gt;文件管理和快速启动器：Listary&lt;/li&gt;
&lt;li&gt;全文搜索利器：AnyTXT Searcher&lt;/li&gt;
&lt;li&gt;格式最全的阅读器：SumatraPDF&lt;/li&gt;
&lt;li&gt;剪贴板历史：Ditto&lt;/li&gt;
&lt;li&gt;快速看图：Honeyview&lt;/li&gt;
&lt;li&gt;系统优化利器：Dism++&lt;/li&gt;
&lt;li&gt;软件卸载：GeekUninstaller&lt;/li&gt;
&lt;li&gt;窗口置顶显示：Window TopMost Control&lt;/li&gt;
&lt;li&gt;网络下载神器：IDM&lt;/li&gt;
&lt;li&gt;新一代效率利器：Quicker&lt;/li&gt;
&lt;li&gt;批量重命名：Advanced Renamer&lt;/li&gt;
&lt;li&gt;截图贴图神器：Snipaste&lt;/li&gt;
&lt;li&gt;速度最快的文本编辑器：EmEditor&lt;/li&gt;
&lt;li&gt;电脑上的瑞士军刀：DesktopOK&lt;/li&gt;
&lt;li&gt;电脑分区&amp;amp;数据恢复：DiskGenius&lt;/li&gt;
&lt;li&gt;护眼神器：f.lux&lt;/li&gt;
&lt;li&gt;镜像制作：Rufus&lt;/li&gt;
&lt;li&gt;快速预览文件：QuickLook&lt;/li&gt;
&lt;li&gt;Windows 官方外挂：PowerToys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI绘画软件Fooocus教程&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/656708919https://zhuanlan.zhihu.com/p/656708919&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/656708919https://zhuanlan.zhihu.com/p/656708919&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;整会promise这8个高级用法&lt;br&gt;
&lt;a href=&quot;https://blog.51cto.com/u_14627797/6989643&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.51cto.com/u_14627797
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202310</title>
    <link href="http://blog.ihuhao.com/2023/10/07/202310/"/>
    <id>http://blog.ihuhao.com/2023/10/07/202310/</id>
    <published>2023-10-07T01:45:46.000Z</published>
    <updated>2023-11-04T03:06:33.729Z</updated>
    
    <content type="html">&lt;p&gt;invalid magic number: latest release of llama.cpp cannot import 13B GGML q4.0 model&lt;br&gt;
&lt;a href=&quot;https://huggingface.co/TheBloke/Llama-2-13B-chat-GGML/discussions/14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://huggingface.co/TheBloke/Llama-2-13B-chat-GGML/discussions/14&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rolling back llama.cpp to commit hash a113689 works.&lt;/p&gt;
&lt;p&gt;Yeah, latest llama.cpp is no longer compatible with GGML models. The new model format, GGUF, was merged recently. As far as llama.cpp is concerned, GGML is now dead - though of course many third-party clients/libraries are likely to continue to support it for a lot longer. I need to update my GGML READMEs to mention this and will be doing this shortly.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/tardis/bd/art/647329639?source_id=1001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/tardis/bd/art/647329639?source_id=1001&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参数高效的模型微调&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这一类方法的代表是LORA（&lt;a href=&quot;https://arxiv.org/pdf/2106.09685.pdf%EF%BC%89%E3%80%81LLaMA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/pdf/2106.09685.pdf）、LLaMA&lt;/a&gt; Adapter、Prefix-tuning，微调时对整个模型进行冻结，在模型上加入少量可学习的参数或者网络层，训练时只对这部分进行微调。&lt;/li&gt;
&lt;li&gt;这种方法其实就是将大模型作为提取特征的工具，因为模型本身巨大的参数量无需调整所以计算代价不高，甚至可以在单个消费级显卡上进行微调。&lt;/li&gt;
&lt;li&gt;如果你对大模型的使用场景距离已经训练的大模型的已有能力不远，应该首先尝试这种方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;英语老师必备10条超好用的ChatGPT提示词&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/642571375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/642571375&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请解释&amp;quot;touch base&amp;quot;的意思&lt;/li&gt;
&lt;li&gt;请提供关于&amp;quot;环保&amp;quot;的英语作文范例&lt;/li&gt;
&lt;li&gt;请提供一个关于&amp;quot;现在进行时&amp;quot;的练习题&lt;/li&gt;
&lt;li&gt;请纠正以下句子的语法错误: “She don’t like to swim in the pool.”&lt;/li&gt;
&lt;li&gt;请提供一个关于&amp;quot;在餐厅点餐&amp;quot;的英语口语对话练习&lt;/li&gt;
&lt;li&gt;如何向学生解释&amp;quot;虚拟语气&amp;quot;？&lt;/li&gt;
&lt;li&gt;请提供一个关于&amp;quot;动物&amp;quot;的英语课堂活动&lt;/li&gt;
&lt;li&gt;请提供一个关于&amp;quot;时间&amp;quot;的英语谚语&lt;/li&gt;
&lt;li&gt;如何提高学生的听力能力？&lt;/li&gt;
&lt;li&gt;请提供一个关于&amp;quot;友谊&amp;quot;的英语小故事&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;帮我写一篇“英语老师必备10条超好用的ChatGPT提示词”文章，要求2000字左右&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://huggingface.co/Unbabel/gec-t5_small&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://huggingface.co/Unbabel/gec-t5_small&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This model is an implementation of the paper A Simple Recipe for Multilingual Grammatical Error Correction from Google where they report the State of the art score in the task of Grammatical Error Correction (GEC). We implement the version with the T5-small with the reported F_0.5 score in the paper (60.70).&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/24113539/answer/2565029397&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/24113539/answer/2565029397&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表示程度的优雅形容词，你认识哪几个？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;marvellous 好的非凡的&lt;/li&gt;
&lt;li&gt;splendid 极佳的；非常好的&lt;/li&gt;
&lt;li&gt;sensational 轰动的；引起渲然的；哗众取宠的；耸人听闻的；极好的；绝妙的&lt;/li&gt;
&lt;li&gt;spiffing 极好的；很棒的&lt;/li&gt;
&lt;li&gt;stupendous 极大的；令人惊叹的；了不起的&lt;/li&gt;
&lt;li&gt;ravishing 极其的；迷人的&lt;/li&gt;
&lt;li&gt;dashing 风度翩翩的；自信的；潇洒的&lt;/li&gt;
&lt;li&gt;joyous 高兴的；快乐的；令人愉快的&lt;/li&gt;
&lt;li&gt;glorious 值得称道的；光荣的；荣耀的&lt;/li&gt;
&lt;li&gt;eclectic 不拘一格的；兼收并蓄的&lt;/li&gt;
&lt;li&gt;chuffed 很愉快；很高兴；很满意&lt;/li&gt;
&lt;li&gt;thrilled 非常兴奋；极为激动&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你有什么相见恨晚的英语学习方法？ - 李献计的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/26677313/answer/2611743445&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/26677313/answer/2611743445&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;炒单赚的是几跳的钱，一天要做上百次，但是有很严格的止损止盈的标准，很多时候都是进去之后马上止损出来了。&lt;/p&gt;
&lt;p&gt;这种赚钱模式，赚的其实是频率的钱，不会有太高的胜率。正常来说胜率一般也就是在60%到70%之间，不会有更高的胜率了。如果胜率再高一些，那么盈亏比就是连1比1都做不到了，可能盈利两次才会抵消一次亏损，这样来说就没有意义了。&lt;/p&gt;
&lt;p&gt;以螺纹为例子，三跳止盈止损，胜率70%，一天操作100次的话（操作一手）。盈利2100，亏损900，手续费700，这样来算盈利就是500元。再加上手续费返还的话可能盈利是800或者更多。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/522538926/answer/2589354781&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/522538926/answer/2589354781&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【llm大语言模型】一文看懂llama2(原理,模型,训练) - yeyan的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/651248009&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/651248009&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;炒期货的人最后都变成什么样了？ - 藏巧守拙的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/279198518/answer/2316292946&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/279198518/answer/2316292946&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How have top CDOs used their data to drive customer acquisition, revenue and profit goals? How can analytics create consensus across functional silos and competing c-suite priorities? In this event, top CDOs explore these questions and share the strategies they are using to keep dispersed employees informed, agile and productive.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.forbes.com/sites/insights-teradata/2020/10/01/forbes-virtual-series-the-data-leaders-building-the-future-of-innovation/?sh=df7e0593e1d8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.forbes.com/sites/insights-teradata/2020/10/01/forbes-virtual-series-the-data-leaders-building-the-future-of-innovation/?sh=df7e0593e1d8&lt;/a&gt;&lt;br&gt;
Watch the full event below for actionable insights from dynamic CDOs who have prioritized data and analytics to drive digital transformation and navigate our new reality.&lt;/p&gt;
&lt;p&gt;PostgreSQL怎么查看数据库用户系统权限、对象权限&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_41287260/article/details/127438227&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_41287260/article/details/127438227&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM  pg_roles WHERE rolname=&#39;postgres&#39;;
select * from information_schema.table_privileges where grantee=&#39;postgres&#39;;
select * from information_schema.usage_privileges where grantee=&#39;postgres&#39;;
select * from information_schema.routine_privileges where grantee=&#39;postgres&#39;;
select * from information_schema.column_privileges where grantee=&#39;postgres&#39;;
select * from information_schema.data_type_privileges ;
select * from information_schema.udt_privileges where grantee=&#39;postgres&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Postgres ： 创建schema、创建表空间与指定用户权限&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_42405670/article/details/130569729&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_42405670/article/details/130569729&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE SCHEMA my_schema;
CREATE USER my_user WITH PASSWORD &#39;password&#39;;
GRANT ALL ON SCHEMA my_schema TO my_user;
\dn
\du
grant USAGE on SCHEMA public to test ;
REVOKE ALL ON COMPANY FROM test;
REVOKE ALL ON SCHEMA public FROM test;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/grafana/loki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/grafana/loki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus. It is designed to be very cost effective and easy to operate. It does not index the contents of the logs, but rather a set of labels for each log stream.&lt;/p&gt;
&lt;p&gt;Compared to other log aggregation systems, Loki:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;does not do full text indexing on logs. By storing compressed, unstructured logs and only indexing metadata, Loki is simpler to operate and cheaper to run.&lt;/li&gt;
&lt;li&gt;indexes and groups log streams using the same labels you’re already using with Prometheus, enabling you to seamlessly switch between metrics and logs using the same labels that you’re already using with Prometheus.&lt;/li&gt;
&lt;li&gt;is an especially good fit for storing Kubernetes Pod logs. Metadata such as Pod labels is automatically scraped and indexed.&lt;/li&gt;
&lt;li&gt;has native support in Grafana (needs Grafana v6.0).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;jquery + PHP 上传图片&lt;/p&gt;
&lt;p&gt;php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public function upload_photo() {
    $fileInfo = $_FILES[&#39;file&#39;];

    $uploadPath = &#39;assets/uploads/files/&#39; . date(&#39;Y&#39;) . &#39;/&#39; . date(&#39;m&#39;) . &#39;/&#39; . date(&#39;d&#39;);
    if (!file_exists($uploadPath)) {
        mkdir($uploadPath, 0777, true);
        chmod($uploadPath, 0777);
    }
    $ext = pathinfo($fileInfo[&#39;name&#39;], PATHINFO_EXTENSION);
    $ext = strtolower($ext);
    $allowExt = array(&#39;jpeg&#39;, &#39;jpg&#39;, &#39;png&#39;);
    if (!in_array($ext, $allowExt)) {
        echo &#39;error&#39;;
        return;
    }

    $maxSize = 2097152;
    if ($fileInfo[&#39;size&#39;] &amp;gt; $maxSize) {
        echo &#39;error&#39;;
        return;
    }
    if (!getimagesize($fileInfo[&#39;tmp_name&#39;])) {
        echo &#39;error&#39;;
        return;
    }

    $uniName = md5(uniqid(microtime(true), true)) . &#39;.&#39; . $ext;
    $destination = $uploadPath . &#39;/&#39; . $uniName;
    if (!move_uploaded_file($fileInfo[&#39;tmp_name&#39;], $destination)) {
        echo &#39;error&#39;;
        return;
    }
    echo $destination;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;imgInput&amp;quot; id=&amp;quot;img-upload&amp;quot; type=&amp;quot;file&amp;quot; name=&amp;quot;photo_img&amp;quot; accept=&amp;quot;image/jpeg,image/jpg,image/png&amp;quot;&amp;gt;

var file = $(&amp;quot;#img-upload&amp;quot;)[0].files[0];
if (file){
   var formData = new FormData();
   formData.append(&#39;file&#39;, file);
   $.ajax({
       url: &amp;quot;upload_photo&amp;quot;,
       type: &amp;quot;post&amp;quot;,
       data: formData,
       contentType: false,
       processData: false,
       success: function (res) {
           console.log(JSON.stringify(res));
       }
   })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;精选英文作文21篇&lt;br&gt;
&lt;a href=&quot;https://www.ruiwen.com/yingyuzuowen/5118720.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ruiwen.com/yingyuzuowen/5118720.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;独立开发者靠什么赚钱？ - 李牧云的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/591944056/answer/3247553182&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/591944056/answer/3247553182&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;高中语文将《国风·卫风·氓》编入教材有什么意义？ - 沧浪停云的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/52756329/answer/963323829&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/52756329/answer/963323829&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache Calcite系列&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/614668529&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/614668529&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache Calcite 是一种提供了标准的 SQL 语言、多种查询优化和连接各种数据源基础框架，可以让用户轻松的接入各种数据，并实现使用SQL查询。此外，Calcite 还提供了 OLAP 和流处理的查询引擎。&lt;/p&gt;
&lt;p&gt;大家对Apache Calcite可能不熟悉，但是大家肯定对Hive、Flink、Kylin以及Durid这些框架很熟悉吧，他们内部其实就是用的Apache Calcite。&lt;/p&gt;
&lt;p&gt;pydash &lt;a href=&quot;https://pydash.readthedocs.io/en/latest/devguide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pydash.readthedocs.io/en/latest/devguide.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tool Description Configuration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;black Code formatter pyproject.toml&lt;/li&gt;
&lt;li&gt;isort Import statement formatter setup.cfg&lt;/li&gt;
&lt;li&gt;docformatter Docstring formatter setup.cfg&lt;/li&gt;
&lt;li&gt;flake8 Code linter setup.cfg&lt;/li&gt;
&lt;li&gt;pylint Code linter pylintrc&lt;/li&gt;
&lt;li&gt;mypy Type checker setup.cfg&lt;/li&gt;
&lt;li&gt;pytest Test framework setup.cfg&lt;/li&gt;
&lt;li&gt;tox Test environment manager tox.ini&lt;/li&gt;
&lt;li&gt;invoke CLI task execution library &lt;a href=&quot;http://tasks.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;json 判断为空&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.a&#39;);
+-----------------------------------------------+
| JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.a&#39;) |
+-----------------------------------------------+
| 1                                             |
+-----------------------------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.b&#39;);
+-----------------------------------------------+
| JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.b&#39;) |
+-----------------------------------------------+
| null                                          |
+-----------------------------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.c&#39;);
+-----------------------------------------------+
| JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.c&#39;) |
+-----------------------------------------------+
| []                                            |
+-----------------------------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.d&#39;);
+-----------------------------------------------+
| JSON_EXTRACT(&#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:null,&amp;quot;c&amp;quot;:[]}&#39;,&#39;$.d&#39;) |
+-----------------------------------------------+
| NULL                                          |
+-----------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实现一个四则运算语法解析器 - Gloria的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/112460676&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/112460676&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python 解析时间加时区&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; datetime.strptime(&#39;2023-10-26T16:19:44+08:00&#39;,&#39;%Y-%m-%dT%H:%M:%S%z&#39;)
datetime.datetime(2023, 10, 26, 16, 19, 44, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800)))
&amp;gt;&amp;gt;&amp;gt; print(datetime.strptime(&#39;2023-10-26T16:19:44+08:00&#39;,&#39;%Y-%m-%dT%H:%M:%S%z&#39;))
2023-10-26 16:19:44+08:00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拆分字符串: 写代码或正则把字符串 ‘a(1,2,3),b(1),c,e(f(3,4))’ 拆分成 &lt;code&gt;a(1,2,3)&lt;/code&gt;, &lt;code&gt;b(1)&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;e(f(3,4))&lt;/code&gt;4个子串。&lt;/p&gt;
&lt;p&gt;循序渐进掌握递归正则表达式&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/f-ck-need-u/p/11344531.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/f-ck-need-u/p/11344531.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pyparsing实战&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/259638397&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/259638397&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何看待 Rust 这门语言？ - lencil的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/432640008/answer/2322776585&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/432640008/answer/2322776585&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何使用原生 vim 覆盖90%的插件功能 - 鹅厂架构师的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/599417117&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/599417117&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HubSpot picks up B2B data provider Clearbit to enhance its AI platform&lt;br&gt;
&lt;a href=&quot;https://techcrunch.com/2023/11/01/hubspot-picks-up-b2b-data-provider-clearbit-to-enhance-its-ai-platform/?guccounter=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://techcrunch.com/2023/11/01/hubspot-picks-up-b2b-data-provider-clearbit-to-enhance-its-ai-platform/?guccounter=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Antlr4实现计算器[Python]&lt;br&gt;
&lt;a href=&quot;http://www.opstool.com/article/336&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.opstool.com/article/336&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.19 实现一个简单的递归下降分析器&lt;br&gt;
&lt;a href=&quot;https://python3-cookbook.readthedocs.io/zh-cn/latest/c02/p19_writing_recursive_descent_parser.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://python3-cookbook.readthedocs.io/zh-cn/latest/c02/p19_writing_recursive_descent_parser.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;小试牛刀-递归下降算法（3）&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30314216&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/30314216&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;消除左递归和回溯&lt;br&gt;
&lt;a href=&quot;https://www.bilibili.com/video/BV1BS4y1M7a9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1BS4y1M7a9&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;消除左递归
A -&amp;gt; Aα|β

A -&amp;gt; βA&#39;
A&#39; -&amp;gt; αA&#39;|ε

消除回溯
A -&amp;gt; δβ1 | δβ2 | ... | δβi | βi+1| ... | βj

A  -&amp;gt; δA&#39;|βi+1|βj
A&#39; -&amp;gt; β1|...|βj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;公式解析&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expr        -&amp;gt; expr + term
             | expr - term 
             | term

term        -&amp;gt; term * factor
             | term / factor
             | factor

factor      -&amp;gt; ( expr )
             | var
             | func
             | NUM
var         -&amp;gt; ALPHA
func_call   -&amp;gt; ALPHA ( args )
args        -&amp;gt; expr , expr
             | expr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;去掉左递归&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expr        -&amp;gt; term expr_tail 
expr_tail   -&amp;gt; + term expr_tail
             | - term expr_tail
             | e

term        -&amp;gt; factor term_tail
term_tail   -&amp;gt; * factor term_tail
             | / factor term_tail
             | e

factor      -&amp;gt; ( expr )
             | NUM
             | ALPHA alpha_tail
alpha_tail  -&amp;gt; ( args ) # func call
             | e        # var
args        -&amp;gt; expr args_tail 
args_tail   -&amp;gt; , expr
             | e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用Micronuat + RxJava + KotlinTest&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/113983792&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/113983792&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整会promise这8个高级用法，&lt;br&gt;
&lt;a href=&quot;https://blog.51cto.com/u_14627797/6989643&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.51cto.com/u_14627797/6989643&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;invalid magic number: latest release of llama.cpp cannot import 13B GGML q4.0 model&lt;br&gt;
&lt;a href=&quot;https://huggingface.co/TheBloke/Llama-2-
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202309</title>
    <link href="http://blog.ihuhao.com/2023/09/06/202309/"/>
    <id>http://blog.ihuhao.com/2023/09/06/202309/</id>
    <published>2023-09-06T00:27:35.000Z</published>
    <updated>2023-10-07T01:43:48.969Z</updated>
    
    <content type="html">&lt;p&gt;高手是怎样做日内交易的？（货有点干） - 近我者富的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/137631599&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/137631599&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;交易周期的确定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 分钟交易周期：以小博大，快进快出。&lt;/li&gt;
&lt;li&gt;3 分钟交易周期：小波段交易。&lt;/li&gt;
&lt;li&gt;15 分钟交易周期：日内趋势交易。&lt;/li&gt;
&lt;li&gt;补充：日内短线交易不等于频繁交易。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是交易系统？&lt;/p&gt;
&lt;p&gt;最通俗的理解：进场、出场、止损以及仓位管理的规则或规矩就是交易系统。&lt;/p&gt;
&lt;p&gt;进场&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开盘价高于昨日收盘价，15 分钟不破，我择机进场做多，反之做空&lt;/li&gt;
&lt;li&gt;进场周期为1分钟，价格站在所有均线之上做多，反之做空。&lt;/li&gt;
&lt;li&gt;价格跳空高开不做多，价格跳空低开不做空；&lt;/li&gt;
&lt;li&gt;价格跳空高开跌破昨日最高价放空；价格低开突破昨日最低价做多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出场&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重要压力位置或者阻力位置&lt;/li&gt;
&lt;li&gt;或者盈利目标实现（盈亏比不低于 2:1）&lt;/li&gt;
&lt;li&gt;感觉行情不流畅或者有潜在风险，也会离场&lt;/li&gt;
&lt;li&gt;利必须达到止损的2倍，这是一个离场原则，其次趋势一有停顿的苗头就平仓。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;止损&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每日亏损不允许超过总资金的 1.5%，如果一日我交易 3 次，则每次亏损就是 0.5%。&lt;/li&gt;
&lt;li&gt;每次下单必须立即止损跟上，如果你没有想好，就不要交易。&lt;/li&gt;
&lt;li&gt;止损点位的严格要求，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仓位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以损定量。允许亏损的钱除以点数，就是开仓的手数。&lt;/li&gt;
&lt;li&gt;这次开仓我允许亏损500元，亏损点数是20点，每个点是10元钱，则开仓手数=500/200=2.5手。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;研判&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;研判今天的市场是单边还是震荡，以此制定交易计划；&lt;/li&gt;
&lt;li&gt;价格在30分钟最高价和最低价之间的区域内上下波动为震荡，突破有可能出现趋势。&lt;/li&gt;
&lt;li&gt;震荡行情——高空，低多。&lt;/li&gt;
&lt;li&gt;趋势行情——追随趋势。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期货日内交易如何做到一年3-10倍？ - 傲娇元宝的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/304573577/answer/2511392700&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/304573577/answer/2511392700&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开盘几分钟内、尾盘2、3分钟内不要开仓&lt;/li&gt;
&lt;li&gt;以目标为终点线而不是时间：实现目标后坚决走人（每天的目标是多少，预先设定好，而不是做到交易所休盘时间）&lt;/li&gt;
&lt;li&gt;如果那天处于亏损状态，在亏损到设定的警戒线后也一定要坚决走他人。这里的目标既有盈利也有亏损警戒线。&lt;/li&gt;
&lt;li&gt;在正式开盘后，不要预测走势，要善于发现价格趋势，跟随价格趋势，然后根据自己的技术指标进场，这一点很难。&lt;/li&gt;
&lt;li&gt;上个交易时段尾盘最后趋势，上午10点15分休盘和11点30分休盘前的最后趋势，这个规律几乎百分之95都是可靠的。&lt;/li&gt;
&lt;li&gt;所有的技术指标和参数都是后发的，只有市场心理是唯一的先发指标。这一点对日内交易非常重要。
&lt;ul&gt;
&lt;li&gt;还有整数点尤其是50和100多次上攻或下破都失败，预示着什么；&lt;/li&gt;
&lt;li&gt;开盘20分钟左右开盘价即最高价或最低价意味着什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单边趋势明显，就尽可能做单边，这个时候做双向交易极容易陷入陷井里。&lt;/li&gt;
&lt;li&gt;每个品种一旦行情启动，正常都不会低于多少个点，基本有规律的&lt;/li&gt;
&lt;li&gt;最后，做日内交易，尽量做一个品种，不要分散。&lt;/li&gt;
&lt;li&gt;至于多少资金合适，60万之内都可以随便做，一次下单30%到50%资金没有问题的，不要尝试什么金字塔形加仓。一次性到位。&lt;/li&gt;
&lt;li&gt;什么品种合适呢，按照交易量大、波动幅度大、交易活跃度高来选。资金在10万以上，尽量选金属和贵金属，10万以下选农产品。&lt;/li&gt;
&lt;li&gt;最后建议，每天坚持锻炼身体，保持良好的精神状态和身体状态是成功的外在条件，它们直接影响你的专注力、判断力和行动力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elasticsearch自定义评分的N种方法&lt;br&gt;
&lt;a href=&quot;https://cloud.tencent.com/developer/article/1600163&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1600163&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;布尔查询中的每个must，should和must_not元素称为查询子句。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档满足must或 should条款的标准的程度有助于文档的相关性得分。分数越高，文档就越符合您的搜索条件。&lt;/li&gt;
&lt;li&gt;must_not子句中的条件被视为过滤器。它会影响文档是否包含在结果中，但不会影响文档的评分方式。在must_not里还可以显式指定任意过滤器，以基于结构化数据包括或排除文档。&lt;/li&gt;
&lt;li&gt;filter：必须 匹配，但它以不评分、过滤模式来进行。filter内部语句对评分没有贡献，只是根据过滤标准来排除或包含文档。&lt;/li&gt;
&lt;li&gt;一句话概括：filter、must_not不影响评分，其他影响评分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;独立开发者犯法吗？ - 第五面壁者的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/617917921/answer/3173907554&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/617917921/answer/3173907554&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;89年，手里1269万现金，怎么稳健理财？ - CPA CFA 盐究所的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/596318158/answer/3083468070&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/596318158/answer/3083468070&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;装上了4个兆瓦户用光伏电站，花掉1000多万，每年可以从国家电网收到200万以上的电费，除去各种费用，实际净收入不低于170万。&lt;/p&gt;
&lt;p&gt;然后，如果还能剩下点钱再按照文中方式做做理财&lt;/p&gt;
&lt;p&gt;mapreduce为什么被淘汰了？ - 雷鹏的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/303101438/answer/2925341473&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/303101438/answer/2925341473&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;十多年前在人人网（当时还叫校内网）第一次接触 MapReduce。当时刚入职，团队用 Cascading 做广告数据的分析，整个分析 Pipeline 牵涉到好多个 job，在数十个结点的 hadoop 集群上跑一遍要好几个小时，还经常就把整个集群跑挂了，一直没法上线。&lt;/p&gt;
&lt;p&gt;当时我花了大概一周时间理清了广告分析的业务逻辑，然后写了一个等效的多线程 C++ 单机程序，一共也就 300 多行代码，单机跑一遍数据只要十几分钟。&lt;/p&gt;
&lt;p&gt;职场最重要的能力是什么？ - 策北的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/508168208/answer/2936070092&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/508168208/answer/2936070092&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仔细观察你的老板在做什么事，尤其是在季末、年末这种关键时间节点，你就知道职场中什么能力最重要了。&lt;/p&gt;
&lt;p&gt;作为一个在互联网行业打滚摸爬5年的职场人，我可以负责任地说：职场中最重要的一定是向上汇报的能力，其次是链接资源的能力，最后才是执行力。&lt;/p&gt;
&lt;p&gt;How to remove all event listeners from a DOM element in Javascript&lt;br&gt;
&lt;a href=&quot;https://techoverflow.net/2019/12/26/how-to-remove-all-event-listeners-from-a-dom-element-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://techoverflow.net/2019/12/26/how-to-remove-all-event-listeners-from-a-dom-element-in-javascript/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;var elem = document.getElementById(‘root’);elem.replaceWith(elem.cloneNode(true));&lt;/p&gt;
&lt;p&gt;唐奇安通道–日内策略的鼻祖 - 币圈牛哥的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/551573373&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/551573373&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1970年，唐奇安通道规则在一个对当时最流行的机械交易系统进行模拟测试和比较研究中取得了最优结果，随后声名远扬。唐奇安通道的理论基础是人类最起码需要21日来使得新事物代替旧事物。当绝大多数交易者都在认为趋势可能已经变化时，也就是经过了“21”日的适应期时，主要趋势却已做好了继续运行的准备。&lt;/p&gt;
&lt;p&gt;交易系统可以有多简单？ - 股玄明的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/418378495/answer/3134141491&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/418378495/answer/3134141491&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这就是交易致胜的核心原则，只要符合这些原则，可以用的方法和指标多的是，没有最好，只要最适合自己。需要在实践中去寻找。&lt;/p&gt;
&lt;p&gt;只要掌握并能在实践中遵循这些原则，哪怕用一个很简单的指标，能用纪律保持一致性，你会发现赚钱是一件很简单很无聊的事&lt;/p&gt;
&lt;p&gt;炒股就是要简单的事情重复做，长时间坚持使用一个方法，把它用得炉火纯青，炒股也能像其他行业和一样，熟能生巧，手起刀落，不假思索做出每一个决定。&lt;/p&gt;
&lt;p&gt;那些编程水平很高的程序员是怎么训练出来的? - 郭忠明的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/351504112/answer/2128951951&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/351504112/answer/2128951951&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么国内的独立开发者做不起来？ - The Alpha的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/598811656/answer/3157920350&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/598811656/answer/3157920350&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;国内所谓独立开发者基本就那几样: 记账, 天气, todo list, 背单词, 笔记(基本已经被notion干没了), 现在还有各种gpt套壳.&lt;/p&gt;
&lt;p&gt;什么备案, gitee代码审查根本算不上障碍. 一个人是独立开发者, 首先他是个程序员. 除了 Apple store 要交钱(这个全世界统一), 其他问题有一堆绕过的方法.&lt;/p&gt;
&lt;p&gt;请问真正的交易高手，能否把你们最舍不得分享的交易秘诀，用简单的一两句话暗示一下？谢谢！？ - 老李闯江湖的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/425638863/answer/2957795098&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/425638863/answer/2957795098&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;期货品种详解之玉米期货 - 投资银河汇的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/221958261&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/221958261&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作为中国的高产粮食作物，玉米是畜牧业、养殖业、水产养殖业等的重要饲料来源，也是食品、医疗卫生、轻工业、化工业等的不可或缺的原料之一。&lt;/p&gt;
&lt;p&gt;1 玉米供应&lt;/p&gt;
&lt;p&gt;在国际玉米市场上，美国产量占40%以上，中国产量占近20%，南美产量约占10%。可见美国是世界玉米的主产区，其生产和供应对国际市场的影响很大。特别是美国的玉米生产已成为影响国际供应的最重要因素，其他国家和地区的产量比例较低，对国际市场的影响较小。&lt;/p&gt;
&lt;p&gt;2 对玉米的需求&lt;/p&gt;
&lt;p&gt;美国和中国都是玉米的主要生产国和消费国，玉米消费量较大的国家包括欧盟，日本，巴西，墨西哥等。这些国家的消费需求变化对玉米价格的影响更大。特别是近年来，主要消费国的玉米加工业发展迅速，极大地推动了玉米消费需求。&lt;/p&gt;
&lt;p&gt;铁秃鹰：一个适合散户稳赢的期权策略 - 期权酱的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/647737099&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/647737099&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to fetch an email body using imaplib in python?&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/2230037/how-to-fetch-an-email-body-using-imaplib-in-python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/2230037/how-to-fetch-an-email-body-using-imaplib-in-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一位期货日内短线交易高手的交易技法（附详细方法） - 于渊的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/438891011&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/438891011&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;举例，哪怕先浮盈30点没平，但是行情掉头，哪怕赚2个点都得平！或者先赚了十来个点就平了等下一单机会，不追单，就等符合信号的机会。&lt;/p&gt;
&lt;p&gt;分时图15分钟以后均线向下，只做空，kd超80，直接空，止损线为楼梯上一个N字顶部，就是上一个压力位，止盈跟随止盈就好，距离一个N保本。因为是跟随止盈，所以符合利润奔跑起来，因为反向压力位止损，所以，止损小。符合盈亏比，并且顺势&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/607446554&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/607446554&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一、知道什么时候不交易，才是交易的绝招。&lt;/li&gt;
&lt;li&gt;第二、只交易成交量排名前20的品种。&lt;/li&gt;
&lt;li&gt;第三、利用趋势、形态、成交量抓住行情的爆发点。还要判断行情是否走完，及时止盈。&lt;/li&gt;
&lt;li&gt;第四、顺大势，逆小势；&lt;/li&gt;
&lt;li&gt;第五、日内看分时，不研究基本面。中长线看k线，需要关注基本面；&lt;/li&gt;
&lt;li&gt;第六、趋势反转，快到慢，慢到快。成交量极度缩小，可能也是行情反转的时候。&lt;/li&gt;
&lt;li&gt;第七、看图的时候，重点关注分时图的角度和幅度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期货日内交易中，还是有很多大神的 - 2927913627的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/141439996&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/141439996&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日内只是一个容纳资金相对较小需要素质更高的一条路，你可以走，可以不走，但它从来都不是死胡同。&lt;/li&gt;
&lt;li&gt;日内交易就是重仓，半仓全仓是常态，而且日内只观察市场情绪，不看重什么趋势。&lt;/li&gt;
&lt;li&gt;这个特性排除了大部分强调价值，轻仓，顺势及看指标的这部分人。&lt;/li&gt;
&lt;li&gt;日内做的好的人，中长线也不会差到哪去，但是能做中长线的未必能做日内。&lt;/li&gt;
&lt;li&gt;大部分人做日内死的很快，如果不合适很快就能看出来，长线如果反向波动了还能说是回撤，就算不合适也不是短期能看出来的。&lt;/li&gt;
&lt;li&gt;日内做三个月，你的技术、心态都要比没训练过的人强大很多！&lt;/li&gt;
&lt;li&gt;很多时候日内容易落入频繁交易，盈亏比做不大的怪圈，
&lt;ul&gt;
&lt;li&gt;盈亏比的问题好解决无非拿久一些，&lt;/li&gt;
&lt;li&gt;频繁交易更好解决，以前每天做10单现在我就做2单加严格止损，&lt;/li&gt;
&lt;li&gt;但核心的问题来了，怎么让每天的两单能捕捉到大行情？也就是日内系统其实特别依赖开仓。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期货日内交易的4个方法 - 我要慢慢的变富的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/445493285&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/445493285&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一、开仓的两个基本策略。一是做量价齐升的健康行情，这是程序化喜欢的行情，这种小的单边行情量价同步，只要多巡逻发现，每天有3至5次机会。但是比的是速度，对反应能力要求高。二是做多空行情的转折点、分界点，这种临界点的操作，属于回马枪，抢反弹，顺应小周期的v型，但要符合主趋势方向，不然很容易被秒杀。&lt;/p&gt;
&lt;p&gt;日内交易的时间和空间有限，不专注盯盘是不行的。现在，程序化交易或者称量化交易盛行，不专注盯盘，更干不赢计算机。&lt;/p&gt;
&lt;p&gt;严格止损，树立微利观，降低盈利预期。期货日内交易时，我们有些单子进场后发现不是流畅的行情，没有入场见红，应当迅速的止损。如果出现浮盈后，量价不同步了，要果断止盈。&lt;/p&gt;
&lt;p&gt;现在，许多交易高手都是重仓吃小波动，吃一小段。这也导致日内走势一波三折，盘面不稳定。&lt;/p&gt;
&lt;p&gt;事实上，期货行情震荡的时间远比单边上涨趋势的时间要长得多，日内不要奢求大的单边行情。日内交易坚持小止赢，慢慢变富才是硬道理。&lt;/p&gt;
&lt;p&gt;降低交易频率，控制日内交易的次数。我们需要选择那些连续小阳线或连续小阴线的强势行情，这种流畅的行情稳定性强，才会入场见红。当然这种期货行情不会很多，当没有出现连续流畅的行情，市场方向不明确，持仓量不配合，量行不同步，就应当放弃大部分的垃圾时间和垃圾行。&lt;/p&gt;
&lt;p&gt;日内交易：1.选择大于等待，要找强势品种，联动共振品种。2.固定3分钟周期。3.做多选底部增仓向上，做空选顶部增仓向下。4.主动止损和止盈。5.不要隔夜。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://memo.ac/releases.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://memo.ac/releases.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;logrotate&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#logrotate -d /etc/logrotate.d/testlog
#logrotate -f /etc/logrotate.d/testlog

compress                     通过gzip压缩转储以后的日志
nocompress                   不做gzip压缩处理
copytruncate                 用于还在打开中的日志文件，把当前日志备份并截断；是先拷贝再清空的方式，拷贝和清空之间有一个时间差，可能会丢失部分日志数据。
nocopytruncate               备份日志文件不过不截断
create mode owner group      轮转时指定创建新文件的属性，如create 0777 nobody nobody
nocreate                     不建立新的日志文件
delaycompress                和compress 一起使用时，转储的日志文件到下一次转储时才压缩
nodelaycompress              覆盖 delaycompress 选项，转储同时压缩。
missingok                    如果日志丢失，不报错继续滚动下一个日志
errors address               专储时的错误信息发送到指定的Email 地址
ifempty                      即使日志文件为空文件也做轮转，这个是logrotate的缺省选项。
notifempty                   当日志文件为空时，不进行轮转
mail address                 把转储的日志文件发送到指定的E-mail 地址
nomail                       转储时不发送日志文件
olddir directory             转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统
noolddir                     转储后的日志文件和当前日志文件放在同一个目录下
sharedscripts                运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本
prerotate                    在logrotate转储之前需要执行的指令，例如修改文件的属性等动作；必须独立成行
postrotate                   在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务！必须独立成行
daily                        指定转储周期为每天
weekly                       指定转储周期为每周
monthly                      指定转储周期为每月
rotate count                 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份
dateext                      使用当期日期作为命名格式
dateformat .%s               配合dateext使用，紧跟在下一行出现，定义文件切割后的文件名，必须配合dateext使用，只支持 %Y %m %d %s 这四个参数
size(或minsize) log-size     当日志文件到达指定的大小时才转储，log-size能指定bytes(缺省)及KB (sizek)或MB(sizem).当日志文件 &amp;gt;= log-size 的时候就转储。 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where is the cron / crontab log?&lt;br&gt;
&lt;a href=&quot;https://askubuntu.com/questions/56683/where-is-the-cron-crontab-log&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://askubuntu.com/questions/56683/where-is-the-cron-crontab-log&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tail -f /var/log/syslog | grep CRON
journalctl -u cron.service

Open the file
/etc/rsyslog.d/50-default.conf
Find the line that starts with:
#cron.* 
uncomment that line, save the file, and restart rsyslog:

sudo service rsyslog restart
You should now see a cron log file here:

/var/log/cron.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, you will not see more information about what scripts were actually ran inside /etc/cron.daily or /etc/cron.hourly, unless those scripts direct output to the cron.log (or perhaps to some other log file).&lt;/p&gt;
&lt;p&gt;Scripteable GPT partitions using parted&lt;br&gt;
&lt;a href=&quot;https://unix.stackexchange.com/questions/200582/scripteable-gpt-partitions-using-parted&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://unix.stackexchange.com/questions/200582/scripteable-gpt-partitions-using-parted&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parted --script /device \
    mklabel gpt \
    mkpart primary 1MiB 100MiB \
    mkpart primary 100MiB 200MiB \
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sudo 出现unable to resolve host 解决方法 Ubuntu环境, 假设这台机器名字叫abc(机器的hostname), 每次执行sudo 就出现这个警告讯息: sudo: unable to resolve host abc 虽然sudo 还是可以正常执行, 但是警告讯息每次都出来,而这只是机器在反解上的问题, 所以就直接从/etc/hosts 设定, 让abc(hostname) 可以解回127.0.0.1 的IP 即可&lt;/p&gt;
&lt;p&gt;我认为做期货必须对均价线极为重视，均价线就是盘中分时图上一根黄色线，别小看这根线，在期货短线操作中，我大部分时间是以这根黄线进行短线操作。简单的方法是如果当日期价跳空高开，期价回落至均价下方，等到第二低点不低于第一低点时，买入！等到拉升至均价上方，特别是当天出现较大的涨幅时，短线抛出！这样，可以轻松获取至少500元以上的收益。反之也是这样，当期价跳空低开，期价在多方逢低买盘介入下，会出现反弹，第一波反弹不必着急沽空，等第二波反弹时，发现不能突破盘中的最高点，沽空！等下跌至均价下方，可当日平仓。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/343907175&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/343907175&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/304573577/answer/2511392700&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/304573577/answer/2511392700&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日内短线交易入市之后如果不能马上获利，就准备迅速离场，不加仓，不补仓，不逆势死扛，不持仓过夜。&lt;/li&gt;
&lt;li&gt;开盘几分钟内、尾盘 2、3 分钟内不要开仓
&lt;ul&gt;
&lt;li&gt;当然这个期间开仓也是输赢效率最大的时候，很多时候一笔交易可以快速在 1，2 分钟实现 5-10% 的盈利，没有5年以上的的经验不要尝试，&lt;/li&gt;
&lt;li&gt;因为这个时段的行情基本上和技术指标、价格趋势没有多大关系，更多的交易心理导致的价格走势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以目标为终点线而不是时间：实现目标后坚决走人
&lt;ul&gt;
&lt;li&gt;每天的目标是多少，预先设定好，而不是做到交易所休盘时间&lt;/li&gt;
&lt;li&gt;因为一个人在多次操作后，判断力控制力专注力都会下降，很难一直保持高水平。&lt;/li&gt;
&lt;li&gt;这里强调一下，如果那天处于亏损状态，在亏损到设定的警戒线后也一定要坚决走他人。这里的目标既有盈利也有亏损警戒线。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在正式开盘后，不要预测走势，要善于发现价格趋势，跟随价格趋势，然后根据自己的技术指标进场，这一点很难。&lt;/li&gt;
&lt;li&gt;上个交易时段尾盘最后趋势，上午 10 点 15 分休盘和 11 点 30 分休盘前的最后趋势，这个规律几乎百分之 95 都是可靠的。&lt;/li&gt;
&lt;li&gt;所有的技术指标和参数都是后发的，只有市场心理是唯一的先发指标。&lt;/li&gt;
&lt;li&gt;整数点尤其是 50 和 100 多次上攻或下破都失败，预示着什么；开盘20分钟左右开盘价即最高价或最低价意味着什么。&lt;/li&gt;
&lt;li&gt;单边趋势明显，就尽可能做单边，这个时候做双向交易极容易陷入陷井里。
&lt;ul&gt;
&lt;li&gt;开盘就是最高或次高、最低或次低价，基本上就是单边强趋势。&lt;/li&gt;
&lt;li&gt;震荡行情就做双向交易。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后，做日内交易，尽量做一个品种，不要分散。&lt;/li&gt;
&lt;li&gt;至于多少资金合适，60 万之内都可以随便做
&lt;ul&gt;
&lt;li&gt;一次下单 30% 到 50% 资金没有问题的，不要尝试什么金字塔形加仓。&lt;/li&gt;
&lt;li&gt;一次性到位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么品种合适呢，按照交易量大、波动幅度大、交易活跃度高来选。
&lt;ul&gt;
&lt;li&gt;资金在10万以上，尽量选金属和贵金属&lt;/li&gt;
&lt;li&gt;10万以下选农产品。&lt;/li&gt;
&lt;li&gt;不建议选白糖、镍这类“妖”风盛行的品种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做短线你必须认识到，从你介入行情的那一秒开始，行情在未来的走势就必须符合你的心理预期。如果行情出现不确定，或者波动加剧，此时市场虽然还未证明你错了，但是如果你还不进行减仓或平仓来抑制风险，那么真正等市场证明你错了的时候，你已经无力承担这种止损规模了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scala主要解决 Java 在灵活性和可扩展性方面的缺陷，它提供了更加强大的函数式编程和面向对象编程模式，以及更高效的内存管理机制。&lt;/li&gt;
&lt;li&gt;Groovy主要解决 Java 在语法简洁性和可读性方面的缺陷，它提供了更加灵活的语法，使得 Java 的代码变得更加简洁易读。&lt;/li&gt;
&lt;li&gt;Clojure主要解决 Java 在函数式编程方面的缺陷，它提供了更加灵活的函数式编程模型，使得代码更加简洁、可读性更高、测试更容易。&lt;/li&gt;
&lt;li&gt;Kotlin是想干掉Java。众所周知Scala用户里有Better Java派和Pure-FP派。Kotlin在很多地方就是学习了Scala的语法，比如说data class和类构造器的设计，在Scala中都可以找到类似的东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编程三大信息学赛事CSP、NOIP、NOI，一文搞清！&lt;br&gt;
这三个比赛都是由中国计算机学会（CCF）举办的。从报名资格上看，参加CSP-S复赛非零分者，将自动入围NOIP。所以大致同学们的竞赛之路如下：&lt;/p&gt;
&lt;p&gt;1、CSP-J/S初赛&lt;br&gt;
2、CSP-J/S复赛&lt;br&gt;
3、NOIP&lt;br&gt;
4、省内选拔（省选）&lt;br&gt;
5、NOI（国赛）&lt;/p&gt;
&lt;p&gt;信奥赛CSP、NOIP、NOI 一文搞清关系&lt;br&gt;
&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1744364952219454792&amp;amp;wfr=spider&amp;amp;for=pc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baijiahao.baidu.com/s?id=1744364952219454792&amp;amp;wfr=spider&amp;amp;for=pc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Llama 2 本地运行全攻略&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/vMNGwf5F_nJ-Q0h6LA0cyw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/vMNGwf5F_nJ-Q0h6LA0cyw&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;高手是怎样做日内交易的？（货有点干） - 近我者富的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/137631599&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zh
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>easy_english_every_day</title>
    <link href="http://blog.ihuhao.com/2023/08/08/easy-english-every-day/"/>
    <id>http://blog.ihuhao.com/2023/08/08/easy-english-every-day/</id>
    <published>2023-08-08T01:27:08.000Z</published>
    <updated>2023-10-24T01:07:09.531Z</updated>
    
    <content type="html">&lt;h1&gt;Easy English Every Day&lt;/h1&gt;
&lt;p&gt;01 打招呼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Great to see you!&lt;/li&gt;
&lt;li&gt;Good to see  you!&lt;/li&gt;
&lt;li&gt;How are you doing?&lt;/li&gt;
&lt;li&gt;How have you been?&lt;/li&gt;
&lt;li&gt;What are you doing here?&lt;/li&gt;
&lt;li&gt;Oh I’m meeing my friend.&lt;/li&gt;
&lt;li&gt;I’m superised to see you here.&lt;/li&gt;
&lt;li&gt;You look excited.&lt;/li&gt;
&lt;li&gt;What’s going on?&lt;/li&gt;
&lt;li&gt;Joe and I are getting married next month.&lt;br&gt;
And we’re having our honeymoon in Europe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;02 对不起&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I heard Juliet divorced her husband.&lt;/li&gt;
&lt;li&gt;Oh! I’m sorry to hear that.&lt;/li&gt;
&lt;li&gt;You know, they fell in love at first sight and quickly jumped into marriage.&lt;/li&gt;
&lt;li&gt;Really? I never heard.&lt;/li&gt;
&lt;li&gt;She looks quite depressed.&lt;/li&gt;
&lt;li&gt;It’s so sad. I hope she’ll get through this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;03 请再说一遍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excuse me?&lt;/li&gt;
&lt;li&gt;Sorry! I didn’t get you.&lt;/li&gt;
&lt;li&gt;I could use some water.&lt;/li&gt;
&lt;li&gt;I didn’t get the joke.&lt;/li&gt;
&lt;li&gt;Could you say that again?&lt;/li&gt;
&lt;li&gt;Could you slow down please?&lt;/li&gt;
&lt;li&gt;Could you speak up a bit?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;04 再见&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have some errands to run. I’v got to go.&lt;/li&gt;
&lt;li&gt;OKay. I’ll catch you later.&lt;/li&gt;
&lt;li&gt;run some errands.&lt;/li&gt;
&lt;li&gt;I called, but I did’t catch you.&lt;/li&gt;
&lt;li&gt;Oh!It’s getting late. I’d better go.&lt;/li&gt;
&lt;li&gt;Bye!See you!&lt;/li&gt;
&lt;li&gt;You’d better sit and have a rest.&lt;/li&gt;
&lt;li&gt;I have another appointment. I probably should get going.&lt;/li&gt;
&lt;li&gt;Nice talking to you.Bye!&lt;/li&gt;
&lt;li&gt;have an appointment.&lt;/li&gt;
&lt;li&gt;make an appointment.&lt;/li&gt;
&lt;li&gt;keep an appointment.&lt;/li&gt;
&lt;li&gt;I had an appointment with doctor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;05 求助&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hello! Could you help me a little bit?&lt;/li&gt;
&lt;li&gt;No problem!&lt;/li&gt;
&lt;li&gt;He always help me with the housework.&lt;/li&gt;
&lt;li&gt;Could you give me a hand?&lt;/li&gt;
&lt;li&gt;OKay!&lt;/li&gt;
&lt;li&gt;Let me give you a hand with those bags.&lt;/li&gt;
&lt;li&gt;Could you do me a favour?&lt;/li&gt;
&lt;li&gt;Sure.I’d love do.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;06 借东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Could you lend me a book?&lt;/li&gt;
&lt;li&gt;Sure, there you go.&lt;/li&gt;
&lt;li&gt;Can I borrow you pen?&lt;/li&gt;
&lt;li&gt;Yes, here you are.&lt;/li&gt;
&lt;li&gt;Can I borrow you pen for a few days?&lt;/li&gt;
&lt;li&gt;Do you have a pen?&lt;/li&gt;
&lt;li&gt;I don’t have one with me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;07 谢谢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The coat looks great for you!&lt;/li&gt;
&lt;li&gt;Tha’s very nice to you to say.&lt;/li&gt;
&lt;li&gt;I was just noticing your boots, what a great color.&lt;/li&gt;
&lt;li&gt;Your lasagna is delicious!&lt;/li&gt;
&lt;li&gt;Oh, I’m glad you like it.&lt;/li&gt;
&lt;li&gt;You’re the best teacher ever.&lt;/li&gt;
&lt;li&gt;Thanks for saying so.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;08 你知道吗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you know Andy?&lt;/li&gt;
&lt;li&gt;Yes. We went to school together. What’s up?&lt;/li&gt;
&lt;li&gt;Do you know where he is?&lt;/li&gt;
&lt;li&gt;Do you happen to know his number?&lt;/li&gt;
&lt;li&gt;Yes, I have his number.&lt;/li&gt;
&lt;li&gt;Do you happen to know the nearest bookstore?&lt;/li&gt;
&lt;li&gt;Do you have any idea how to contact him?&lt;/li&gt;
&lt;li&gt;We locked our keys in the car! Do you have any idea how we can get in?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;09 受够了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’m fed up with the music.&lt;/li&gt;
&lt;li&gt;Yeah! This place is really dull.&lt;/li&gt;
&lt;li&gt;I’m fed up with you complaint.&lt;/li&gt;
&lt;li&gt;Do you get along with your husband?&lt;/li&gt;
&lt;li&gt;He’s driving me crazy!&lt;/li&gt;
&lt;li&gt;That noise is driving mad.&lt;/li&gt;
&lt;li&gt;This computer is annoying me!&lt;/li&gt;
&lt;li&gt;Uh-oh! It broken down again. Your need to buy a new one.&lt;/li&gt;
&lt;li&gt;It annoys me …&lt;/li&gt;
&lt;li&gt;It really annoys me when people forget to say thank you.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10 婉拒邀请&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Joe and I are having a party this Saturday. Would you like to come?&lt;/li&gt;
&lt;li&gt;I’d love to, but I don’t think I can make it!&lt;/li&gt;
&lt;li&gt;Will you come to my party weekend?&lt;/li&gt;
&lt;li&gt;I’m so sorry! I have another commitment.&lt;/li&gt;
&lt;li&gt;Drop by if you can.&lt;/li&gt;
&lt;li&gt;Thanks for inviting me. May be another time.&lt;/li&gt;
&lt;li&gt;Thank you for coming.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;11 小长假&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How was your weekend?&lt;/li&gt;
&lt;li&gt;I went hiking with my family.&lt;/li&gt;
&lt;li&gt;a long weekend&lt;/li&gt;
&lt;li&gt;How was your day?&lt;/li&gt;
&lt;li&gt;How was your trip?&lt;/li&gt;
&lt;li&gt;Terrific! How was that?&lt;/li&gt;
&lt;li&gt;We have a log of fun together. We also had a picnic by the lake.&lt;/li&gt;
&lt;li&gt;no picnic&lt;/li&gt;
&lt;li&gt;Bringing up kids is  no picni.&lt;/li&gt;
&lt;li&gt;How did you spend your weekend?&lt;/li&gt;
&lt;li&gt;Oh, nothing special. I hung out with my friend.&lt;/li&gt;
&lt;li&gt;I barely hang out with my frends.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;12 接受邀请&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Would you like to come over for dinner tonight?&lt;/li&gt;
&lt;li&gt;Sure, want me to bring anything?&lt;/li&gt;
&lt;li&gt;Thank you for dinner, it was sa tasty!&lt;/li&gt;
&lt;li&gt;You’re welcome.&lt;/li&gt;
&lt;li&gt;Thank you for such wonderful gift.&lt;/li&gt;
&lt;li&gt;Thank you for having us. We had a good time.&lt;/li&gt;
&lt;li&gt;Any time.&lt;/li&gt;
&lt;li&gt;I had some friends over last night.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;13 压力大，工作忙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How’s it going?&lt;/li&gt;
&lt;li&gt;I’m very busy with work these days.&lt;/li&gt;
&lt;li&gt;Then why don’t you take a few days off?&lt;/li&gt;
&lt;li&gt;be in the middle of (doing) sth.&lt;/li&gt;
&lt;li&gt;I’m in middle of a big project.&lt;/li&gt;
&lt;li&gt;I’m in middle of my new business.&lt;/li&gt;
&lt;li&gt;How is school?&lt;/li&gt;
&lt;li&gt;I can never finish my homework.&lt;/li&gt;
&lt;li&gt;Oh, relax! Everything will be ok.&lt;/li&gt;
&lt;li&gt;be working on (doing) sth.&lt;/li&gt;
&lt;li&gt;I’m woking on my homework/speech/essay.&lt;/li&gt;
&lt;li&gt;I’m working on making new firends.&lt;/li&gt;
&lt;li&gt;I’m under a lot of pressure right now.&lt;/li&gt;
&lt;li&gt;Don’t let it get top of you.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;14 失恋了，不开心&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What’s the matter, Joanna? Why the long face?&lt;/li&gt;
&lt;li&gt;It’s difficult to explain. I just feel so sad.&lt;/li&gt;
&lt;li&gt;Try me. It’s not as sad as you think.&lt;/li&gt;
&lt;li&gt;You know, my boyfirend broke up with me. I can’t get over him.&lt;/li&gt;
&lt;li&gt;America is not as good as you think.&lt;/li&gt;
&lt;li&gt;break up with sb.&lt;/li&gt;
&lt;li&gt;divorce sb.&lt;/li&gt;
&lt;li&gt;Move on! You need get over your ex!&lt;/li&gt;
&lt;li&gt;Maybe tomorrow will be different.&lt;/li&gt;
&lt;li&gt;Yes, maybe I should try starting to date someone new.&lt;/li&gt;
&lt;li&gt;I’m dating my frend’s brother.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;15 你俩很熟吗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you know that girl?
&lt;ul&gt;
&lt;li&gt;Are you familiar with someone? // 慎用，这样问可能是窥探人家的隐私&lt;/li&gt;
&lt;li&gt;I thought hew was a bit familiar with my wife. // 我觉得他和我老婆有一点太随便了&lt;/li&gt;
&lt;li&gt;Do you know someone well? // 应该这样问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The tall one?&lt;/li&gt;
&lt;li&gt;No, not that one. The one in jacket, with long hair.
&lt;ul&gt;
&lt;li&gt;blond(blonde) 金黄色&lt;/li&gt;
&lt;li&gt;brown 棕色的&lt;/li&gt;
&lt;li&gt;chestnut 栗色的&lt;/li&gt;
&lt;li&gt;the gril with brown hair&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;She’s Ann. She works with Max.&lt;/li&gt;
&lt;li&gt;She’s cute.&lt;/li&gt;
&lt;li&gt;And she’s smart. She graduated from Stanford.
&lt;ul&gt;
&lt;li&gt;She graduated from colleage tow years ago.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;16 介绍朋友&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can I introduce you to my friend, Jane?&lt;/li&gt;
&lt;li&gt;Hi, Jane! I’m Will. Haven’t we met before?&lt;/li&gt;
&lt;li&gt;Will, meet my frend Jane.&lt;/li&gt;
&lt;li&gt;Jane, this is Will, my work firend.&lt;/li&gt;
&lt;li&gt;I’d like you to meet my friend, Jane.&lt;/li&gt;
&lt;li&gt;Hi Jane, It’s pleasure to meet you!&lt;/li&gt;
&lt;li&gt;I think you guys might hit it off.
&lt;ul&gt;
&lt;li&gt;We hit it off with each other as soon as we meet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We sure did!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;17 搭讪金句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are a friend of Jenny’s right?&lt;/li&gt;
&lt;li&gt;Yes, I am. Did I see you before?&lt;/li&gt;
&lt;li&gt;I’m afraid you’ve got the wrong person.&lt;/li&gt;
&lt;li&gt;I’m so sorry, my brain is not kicking into gear.&lt;/li&gt;
&lt;li&gt;Please remind me about your name.&lt;/li&gt;
&lt;li&gt;I feel like I know you from somewhere.&lt;/li&gt;
&lt;li&gt;I know your face, but I can’t put a name to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;18 和老外聊天&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where are you from? 你来自于哪里？
&lt;ul&gt;
&lt;li&gt;Where are you coming from? 你刚才从哪里来？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I’m from the States.
&lt;ul&gt;
&lt;li&gt;I’m originally from Oslo, Norway, but I live in Chicago.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Are you from Washington?&lt;/li&gt;
&lt;li&gt;No. I’m  from California.&lt;/li&gt;
&lt;li&gt;I heard that California is known for its beaches, sunshine and year round great weather.&lt;/li&gt;
&lt;li&gt;I’ve been to Los Angeles.&lt;/li&gt;
&lt;li&gt;First time in Bejing?&lt;/li&gt;
&lt;li&gt;Actually I first came here in 2012.
&lt;ul&gt;
&lt;li&gt;This is the first/second/third time I’ve been here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What do you think is the most famous place in Beijing?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;19 马上能用到的聊天技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where did you grow up?&lt;/li&gt;
&lt;li&gt;I was born in Beijing and brought up in Shanghai.
&lt;ul&gt;
&lt;li&gt;I was born and brought up in Beijing,&lt;br&gt;
but I moved to Shanghai with my parents 5 years ago.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How long have you been here?
&lt;ul&gt;
&lt;li&gt;How long have you worked here?&lt;/li&gt;
&lt;li&gt;How long have you been single?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I’ve been here for 5 years.&lt;/li&gt;
&lt;li&gt;How do you like it here so far?
&lt;ul&gt;
&lt;li&gt;How do you like the weather?&lt;/li&gt;
&lt;li&gt;I wish it would stop raining.&lt;/li&gt;
&lt;li&gt;I prefer it warmer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I like the food and the secnic spots here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;20 聊职业&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What do you do for a living?&lt;/li&gt;
&lt;li&gt;I’m a marking manager for a tech company.
&lt;ul&gt;
&lt;li&gt;I’m a 职业 for 工作地.&lt;/li&gt;
&lt;li&gt;I’m a music teacher for a private school.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What line of business are you in?&lt;/li&gt;
&lt;li&gt;I’m a English teacher instructing people in English online.
&lt;ul&gt;
&lt;li&gt;instruct someone in something&lt;/li&gt;
&lt;li&gt;He instructs me in use the gym enquiment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What type of work do you do?&lt;/li&gt;
&lt;li&gt;I’m a fitness trainer specializeing in creating easy and fun&lt;br&gt;
exercise programs for people who don’t enjoy going to  the gym.
&lt;ul&gt;
&lt;li&gt;specialize in 专门从事，专攻&lt;/li&gt;
&lt;li&gt;The hop specializes in handmade chocolates.&lt;/li&gt;
&lt;li&gt;go to the gym 去健身房&lt;/li&gt;
&lt;li&gt;I go go the gym twice a week.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;21 聊运动健身&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you do any sports?
&lt;ul&gt;
&lt;li&gt;do/play sports&lt;/li&gt;
&lt;li&gt;What’s the favorite sport to play? 你最喜欢什么运动&lt;/li&gt;
&lt;li&gt;What’s your favorite sport? 不一定是做运动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No, I don’t do sports, I’m not a big fan.
&lt;ul&gt;
&lt;li&gt;I’m not a fan. 我不热爱某事物&lt;/li&gt;
&lt;li&gt;I’m not that into that. 我不太感兴趣。(这句语法很诡异)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you play any ball games?
&lt;ul&gt;
&lt;li&gt;play+球类&lt;/li&gt;
&lt;li&gt;backetball, baseball, soccer, golf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Yes, I play backetball. It’s my thing.&lt;/li&gt;
&lt;li&gt;Do you usually work out?
&lt;ul&gt;
&lt;li&gt;do lifting 做负重练习，举铁&lt;/li&gt;
&lt;li&gt;do yoga 做瑜伽&lt;/li&gt;
&lt;li&gt;do plank 做平板支撑&lt;/li&gt;
&lt;li&gt;How often do you work out? 你多久锻炼一次啊？&lt;/li&gt;
&lt;li&gt;How many hours do you usually spend on working out every day?&lt;br&gt;
你每天要锻炼多长时间啊？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I do the gym a lot, sometimes I do yoga.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;22 最爱的书和电影&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What kind of books do you read?
&lt;ul&gt;
&lt;li&gt;stick to 坚持，忠于做某事&lt;/li&gt;
&lt;li&gt;science fiction 科幻小说/电影&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I most like to sitck to science fiction.
&lt;ul&gt;
&lt;li&gt;tend to do 倾向于做某事&lt;/li&gt;
&lt;li&gt;I tend to read books like ‘I’ll Give you the Sun’ by Jandy Nelson.&lt;/li&gt;
&lt;li&gt;I read verfy little thrillers and fansasy.&lt;/li&gt;
&lt;li&gt;I like all kinds of books.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What kind of movies do you like?
&lt;ul&gt;
&lt;li&gt;movie 电影&lt;/li&gt;
&lt;li&gt;romantic comedy 浪漫喜剧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;My favorite types of movies are romantic comedies.
&lt;ul&gt;
&lt;li&gt;I love … the most. 我最喜欢…&lt;/li&gt;
&lt;li&gt;I never like horror movies.&lt;/li&gt;
&lt;li&gt;action 动作片&lt;/li&gt;
&lt;li&gt;thriller 惊险片&lt;/li&gt;
&lt;li&gt;horror 恐怖片&lt;/li&gt;
&lt;li&gt;comedy 喜剧片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Who’s your favorite actor?
&lt;ul&gt;
&lt;li&gt;actor 男演员&lt;/li&gt;
&lt;li&gt;actress 女演员&lt;/li&gt;
&lt;li&gt;ideal 完美的，理想的人或事物&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I’m a fan of Matt Damon from the Martians. He is an ideal for me.
&lt;ul&gt;
&lt;li&gt;I’m a fan of 很喜欢某演员。&lt;/li&gt;
&lt;li&gt;He’s a good family man. 他是个很有家庭观念的人。&lt;/li&gt;
&lt;li&gt;He has a good sence of humor. 他是个很有幽默感的人。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;23 你说怎么样？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you like your new job?&lt;/li&gt;
&lt;li&gt;I like it. And I still have a lot to learn and improve&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;learn 学习&lt;/li&gt;
&lt;li&gt;improve 提高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;How do you like …? 你觉得…怎么样？问客观评价&lt;/li&gt;
&lt;li&gt;How did you like Paris?&lt;/li&gt;
&lt;li&gt;How did you like it when you live in Paris?&lt;/li&gt;
&lt;li&gt;How do you like these shoes?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How do you feel about your coworkers?&lt;/li&gt;
&lt;li&gt;They are friendly and easy to get along with.&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;coworker 同事&lt;/li&gt;
&lt;li&gt;friendly 友善的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;How do you feel about…? 你觉得…怎么样？问主管感受，真实想法&lt;/li&gt;
&lt;li&gt;How do you feel about overtime?&lt;/li&gt;
&lt;li&gt;I don’t mind working overtime at all,&lt;br&gt;
and I’m flexble with my hours,&lt;br&gt;
so I won’t have a problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What do you say we go to see a move?&lt;/li&gt;
&lt;li&gt;OKay, Let’s go.&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;tonight 今晚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;What do you say? 征求别人的建议和想法&lt;/li&gt;
&lt;li&gt;Let’s go to the movies tonight, wht do you say?&lt;/li&gt;
&lt;li&gt;Let’s eat out tonight. What do you say?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;24 学会夸人&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;That’s a lovely hat! It looks great on you!&lt;/li&gt;
&lt;li&gt;Oh,!I’m glad you like it!&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;lovely 好看的&lt;/li&gt;
&lt;li&gt;hat 帽子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;That’s a lovely … …真好看&lt;/li&gt;
&lt;li&gt;something looks great on someone 更侧重于说东西漂亮。&lt;/li&gt;
&lt;li&gt;I really like your… 夸别人的衣着，可以说，我很喜欢你的…&lt;/li&gt;
&lt;li&gt;I really like your outfit. 我好喜欢你的衣服。&lt;/li&gt;
&lt;li&gt;I really like the way you look. 我好喜欢你的打扮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You look pretty in that dress!&lt;/li&gt;
&lt;li&gt;Thank you. That’s very nice of you to say.&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;pretty 漂亮的&lt;/li&gt;
&lt;li&gt;dress 裙子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;You look pretty in … 更侧重于说人（穿什么）漂亮&lt;/li&gt;
&lt;li&gt;You are looking nice today! 你今天真漂亮！&lt;/li&gt;
&lt;li&gt;形容女人漂亮动人，还可以用 beautiful, stunning, gorgeous&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Those errrings suit you well.&lt;br&gt;
这耳环真配你。&lt;/li&gt;
&lt;li&gt;Thanks. My boyfirend send them to me as birthday gifts.&lt;br&gt;
谢谢，这耳环是我男朋友送我的生日礼物。&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;earring 耳环&lt;/li&gt;
&lt;li&gt;suit 相配，适合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;Blue suits you well. 蓝色很适合你&lt;/li&gt;
&lt;li&gt;It brings out your eyes. 它更显你漂亮(帅气)。&lt;/li&gt;
&lt;li&gt;It really match your skin tone. 它很配你的肤色。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;25 迟到了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are 20 minutes late. What kept you?&lt;br&gt;
你迟到了20分钟，怎么回事？&lt;/li&gt;
&lt;li&gt;I went the wrong way.&lt;br&gt;
我走错路了。&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;minute 分钟&lt;/li&gt;
&lt;li&gt;wrong 错误的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;I wasn’t feeling well and overslept.&lt;br&gt;
我感觉不舒服，睡过头了。&lt;/li&gt;
&lt;li&gt;I got stuck in the traffic.&lt;br&gt;
我遇到了交通堵塞。&lt;/li&gt;
&lt;li&gt;I got stuck in the rain/snow.&lt;br&gt;
我被雨/雪困住了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I’m sorry for being late. 对不起，我来晚了。&lt;/li&gt;
&lt;li&gt;Never mind. 没关系的&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;late 迟到的&lt;/li&gt;
&lt;li&gt;mind 介意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;My car broke down. 我的车坏了。&lt;/li&gt;
&lt;li&gt;I missed the bus/train. 我没有赶上公共汽车/地铁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sorry for keep you waiting. 真抱歉让你久等了。&lt;/li&gt;
&lt;li&gt;No bit deal. 没什么的。&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;wait 等待&lt;/li&gt;
&lt;li&gt;deal 交易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;Sorry for taking up more or your time.&lt;br&gt;
真不好意思耽误了你那么久。&lt;/li&gt;
&lt;li&gt;Thank you for your flexibility.&lt;br&gt;
感谢你抽出时间来见我。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;26 征求同意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I was wondering if I could use your computer?&lt;br&gt;
不知道我能不能用一下你的电脑？&lt;/li&gt;
&lt;li&gt;yes, feel free.&lt;br&gt;
可以，你用吧。&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;wonder 想知道&lt;/li&gt;
&lt;li&gt;computer 电脑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用场景
&lt;ul&gt;
&lt;li&gt;I was wondering if&lt;br&gt;
表示委婉征求同意，行吗？可以吗？&lt;/li&gt;
&lt;li&gt;I was wondering if I could park here?&lt;br&gt;
请问这里能停车吗？&lt;/li&gt;
&lt;li&gt;feel free&lt;br&gt;
请随意，回答别人的询问，表示你想怎么做都可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you mind me opening the window?&lt;/li&gt;
&lt;li&gt;No, not at all. Please do so.&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;mind 介意&lt;/li&gt;
&lt;li&gt;window 窗户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;Do you mind…?&lt;br&gt;
委婉征求同意，表示 你不介意…吗？&lt;/li&gt;
&lt;li&gt;Do you mind if open the window?&lt;/li&gt;
&lt;li&gt;I feel a little chilly, please don’t.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Is Mike cool with us using this house?&lt;br&gt;
Mike 不介意我们借用这房子吧？&lt;/li&gt;
&lt;li&gt;Relax, he would be cool with that.&lt;br&gt;
放心，他不会介意的。&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;cool 赞同的&lt;/li&gt;
&lt;li&gt;use 使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;be cool with 同意，赞同某事&lt;/li&gt;
&lt;li&gt;I’m cool with that 我没意见/我同意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;27 社交网站头像&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excuse me!Could you take a picture of us?&lt;br&gt;
麻烦您能帮我们拍张照片吗？&lt;/li&gt;
&lt;li&gt;OKay.&lt;br&gt;
可以的&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;picture 照片&lt;/li&gt;
&lt;li&gt;photo 照片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;Could you please 可以表示 劳驾您，麻烦您&lt;/li&gt;
&lt;li&gt;take a picture/photo of 给某人或景物照相&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Could you take one more from this angle?&lt;br&gt;
能从这个角度再帮我拍一张吗？&lt;/li&gt;
&lt;li&gt;Sure.&lt;br&gt;
好呀&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;angle 角度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;take one more (picture) 再拍一张（照片）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;will you take a selfie with me?&lt;br&gt;
能跟我一起拍张照片吗？&lt;/li&gt;
&lt;li&gt;No problem.&lt;br&gt;
没问题&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;selfie 自拍照&lt;/li&gt;
&lt;li&gt;profile picture (网站个人资料) 头像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;Would you mind if we take a picture together?&lt;br&gt;
请问您能跟我合个影吗？&lt;/li&gt;
&lt;li&gt;Hey, let’s take a quick picture.&lt;br&gt;
咱们拍张照片吧&lt;/li&gt;
&lt;li&gt;Let’s document our firendship. CHEESE!&lt;br&gt;
我们来吧友谊记录下来吧。茄子！&lt;/li&gt;
&lt;li&gt;Can we take a picture? I want a new  profile pic.&lt;br&gt;
咱们拍张照片吧，我想换个新头像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;28 你有空吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you have a minite? 你有时间吗？&lt;/li&gt;
&lt;li&gt;I would like to give you my full attention.&lt;br&gt;
我很想挺你把话说完，&lt;br&gt;
May I let you know when I can do that?&lt;br&gt;
不过我们可以下次有空再说吗？&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;full 完全的&lt;/li&gt;
&lt;li&gt;attention 注意力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;Do you have a moment? 你有时间吗？&lt;/li&gt;
&lt;li&gt;Can I talk you for a moment? 我能跟你说点事吗？&lt;/li&gt;
&lt;li&gt;Could I have a word with you? 我能跟你说几句话吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can you spare me a few seconds?&lt;br&gt;
能给我几分钟时间吗？&lt;/li&gt;
&lt;li&gt;I’m sorry. I’m a little busy right now.&lt;br&gt;
不好意思，我现在很忙&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;spare 空出，腾出&lt;/li&gt;
&lt;li&gt;second 秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;I’m in such a rush. 我正在赶时间&lt;/li&gt;
&lt;li&gt;I’m rushing a meeting. 我正赶着要开会&lt;/li&gt;
&lt;li&gt;Can we make it another time?&lt;br&gt;
我们下次再约个时间吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can I have Lily for a second?&lt;br&gt;
我想找 Lily 说句话。&lt;/li&gt;
&lt;li&gt;OKay. 好的&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;interrupt 打断（谈话）&lt;/li&gt;
&lt;li&gt;mean 有意，打算做某事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;Ah…Sorry to interrupt. 呃。对不起，打扰一下。&lt;/li&gt;
&lt;li&gt;Umm…I didn’t mean to interrupt.&lt;br&gt;
嗯，不好意思，打扰一下。&lt;/li&gt;
&lt;li&gt;May I borrow Mike for a sec?&lt;br&gt;
我想找 Mike 一下，&lt;br&gt;
I need him to check on my computer.&lt;br&gt;
我想让他检查一下我的电脑。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;29 道歉了，就一定会原谅？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I apologize for screwing up your plans.&lt;br&gt;
对不起把你的计划打乱了。&lt;/li&gt;
&lt;li&gt;I hear you.&lt;br&gt;
我知道&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;apologize 道歉&lt;/li&gt;
&lt;li&gt;screw up 搅乱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;apologize for 为…而道歉&lt;/li&gt;
&lt;li&gt;I apologize for losing my temper&lt;br&gt;
对不起，我发脾气了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I’t my fault. Will you forgive me?&lt;br&gt;
是我的错，你能原谅我吗？&lt;/li&gt;
&lt;li&gt;I forgive you.&lt;br&gt;
我原谅你&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;fault 错误&lt;/li&gt;
&lt;li&gt;forgive 原谅&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;I accept your apology.&lt;br&gt;
我接受你的道歉。&lt;/li&gt;
&lt;li&gt;I appreciate your apology.&lt;br&gt;
很感谢你能向我道歉。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I feel really bad about what I just said.&lt;br&gt;
我刚才那样说，真的很抱歉&lt;/li&gt;
&lt;li&gt;It’s okay. 没事的。&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;feel 感觉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;feel bad about 为…感到愧疚，不好意思&lt;/li&gt;
&lt;li&gt;I feel bad about leaving without saying goodbye.&lt;br&gt;
我连句再见都没说，心里感觉很过意不去。&lt;/li&gt;
&lt;li&gt;I feel bad about not inviting hi.&lt;br&gt;
我没邀请他，觉得很过意不去。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;30 听不清，没信号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hello. Could I speak to Andrew Pryce, Please?&lt;br&gt;
你好，我想找一下 Andrew Pryce.&lt;/li&gt;
&lt;li&gt;He’s not here. Would you lile to leave a message?&lt;br&gt;
他现在不在。我能帮你留言给他妈？&lt;/li&gt;
&lt;li&gt;Oh, yes, could you ask him to call me back?&lt;br&gt;
好的，你能转告他给我回个电话吗？&lt;/li&gt;
&lt;li&gt;May I ask who is calling?&lt;br&gt;
请问你是哪位呢？&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;speak 说话&lt;/li&gt;
&lt;li&gt;message 消息，留言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;He’s not in the office.&lt;br&gt;
他没在办公室&lt;/li&gt;
&lt;li&gt;Oh, thanks. I’ll call back later&lt;br&gt;
谢谢，我一会儿再打过来。&lt;/li&gt;
&lt;li&gt;He’s on another call.&lt;br&gt;
他正在打电话&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hey, Dane, this is Joanna. Is Linda there?&lt;br&gt;
嗨，Dane，我是 Joanna。Linda 在吗？&lt;/li&gt;
&lt;li&gt;Hang on a sec.&lt;br&gt;
你等一下&lt;/li&gt;
&lt;li&gt;词汇
&lt;ul&gt;
&lt;li&gt;hang on 等一下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活用
&lt;ul&gt;
&lt;li&gt;This is … 我是…（打电话时）&lt;/li&gt;
&lt;li&gt;Hold on. 等一下&lt;/li&gt;
&lt;li&gt;Just a minute. 等一下&lt;/li&gt;
&lt;li&gt;On moment please 请稍等&lt;/li&gt;
&lt;li&gt;Please hold. 请稍等&lt;/li&gt;
&lt;li&gt;I’ll get her/him. 我去叫他/她。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Your are breaking up. I can barely here you.&lt;br&gt;
你说话断断续续的，我几乎听不见你说什么。&lt;/li&gt;
&lt;li&gt;We had a bad connection. Could you say that agaain&lt;br&gt;
我们的通话质量不好，你能再说一遍吗？&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1&gt;Easy English Every Day&lt;/h1&gt;
&lt;p&gt;01 打招呼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Great to see you!&lt;/li&gt;
&lt;li&gt;Good to see  you!&lt;/li&gt;
&lt;li&gt;How are you doing?&lt;/li&gt;
&lt;li&gt;How
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202308</title>
    <link href="http://blog.ihuhao.com/2023/08/03/202308/"/>
    <id>http://blog.ihuhao.com/2023/08/03/202308/</id>
    <published>2023-08-03T02:15:37.000Z</published>
    <updated>2023-09-01T05:41:12.124Z</updated>
    
    <content type="html">&lt;h2 id=&quot;shell-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#shell-2&quot;&gt;¶&lt;/a&gt;shell&lt;/h2&gt;
&lt;p&gt;以 &lt;code&gt;@a_b_c&lt;/code&gt; 的式样&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a：基于索引（ind）还是值（val）来排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b：按字符串（str）比较，按数值（num）比较和按类型（type）比较。如果是按照类型，在升序的情况下，数值&amp;gt;字符串&amp;gt;数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c：指定升序（asc）或降序（desc）&lt;/p&gt;
&lt;p&gt;awk ‘BEGIN{a[“AAAA”]=“4”;a[“BBBB”]=“3”;a[“CCCC”]=“2”;a[“DDDD”]=“1”;PROCINFO[“sorted_in”]=“@ind_str_asc”;for(i in a)print i,a[i]}’&lt;/p&gt;
&lt;p&gt;AAAA 4&lt;br&gt;
BBBB 3&lt;br&gt;
CCCC 2&lt;br&gt;
DDDD 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;清理临时文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tmpreaper 3d /tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;java-8&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-8&quot;&gt;¶&lt;/a&gt;java&lt;/h2&gt;
&lt;p&gt;keycloak 是一个开源的进行身份认证和访问控制的软件。是由Red Hat基金会开发的，我们可以使用keycloak方便的向应用程序和安全服务添加身份认证，非常的方便。基于 Java 开发，支持多种数据库。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/2275ae26bcd1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/2275ae26bcd1&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.keycloak.org/getting-started/getting-started-zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.keycloak.org/getting-started/getting-started-zip&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://keycloak.org.cn/docs/latest/securing_apps/index.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://keycloak.org.cn/docs/latest/securing_apps/index.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;fellow是什么职位&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在职场中，“Fellow”这个词常常被提到，特别是在高科技领域或大型科技公司中。但是究竟什么是Fellow？&lt;/p&gt;
&lt;p&gt;Fellow一般指一家公司内部地位非常高的职位，通常是该公司的高级工程师或研究员，以及在公司的业务领域内有卓越贡献的专家或者知名人士。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;符号意义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fellow是一种荣誉职位，通常并不属于资深的管理层，但是比其他技术职位更为高级。这样的职位通常拥有许多特权，例如能够拥有极高的薪水、股票期权、和决策权等等。此外，Fellow这一荣誉称号通常是有名有姓的，可以增加其个人名望影响力。&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;职责与作用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作为Fellow，他们不仅需要掌握自己所擅长的技术领域，更需要关注公司在其主要业务领域中所面临的各种挑战，对公司的业务发展提供战略上的支持和帮助。此外，Fellow还通常担任公司内部的技术指导角色，他森弊梁们需要指导和协助团队内的其他工程师或研此运究人员进行技术探讨和方案设计。&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;如何成为Fellow&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通俗的讲，成为Fellow需要具备出色的技术能力，背景广泛，创新意识强，以及在业界享有广泛赞誉。但是正如各大高科技公司都非常注重的一点，除了技术能力外，想要成为Fellow还需要在公司的其他方面拥有贡献，例如文化影响力、创新推动、团队管卜坦理等等。因此，沉淀和积累多年的技术能力，加上个人的职业发展规划，透过事业上不断的提升，才能够拥有成为Fellow的机会。&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;不同公司的Fellow&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽管Fellow是一种荣誉职位，但是在不同的公司内，其意义和职责并不完全相同。在一些公司，Fellow与高级工程师等级相当，只是更为高端的称号，并没有其他明显的区别；而在一些公司中，Fellow则是公司内技术发展中不可或缺的重要人才。此外，在某些公司中，Fellow可以作为公司内部层级更高的一种董事会成员，直接参与公司战略设计和管理决策。&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;综合展望&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fellow的职位定位非常高，拥有丰富的工作经验、专业知识和独特的技能，是公司内部顶尖的科技人才。成为Fellow不仅需要掌握技术，更需要有广阔的视野和洞察力，能够全面了解公司的业务和发展规划。未来Fellows的标准可能会更高，要想成为科技领域的佼佼者，一定需要不断地完善自己的技能和知识储备，拥有更强的团队领导和规划战略的能力。&lt;/p&gt;
&lt;h2 id=&quot;english-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#english-2&quot;&gt;¶&lt;/a&gt;english&lt;/h2&gt;
&lt;p&gt;While building your web application, you may have some tasks, such as parsing and storing an uploaded CSV file, that take too long to perform during a typical web request. Thankfully, Laravel allows you to easily create queued jobs that may be processed in the background. By moving time intensive tasks to a queue, your application can respond to web requests with blazing speed and provide a better user experience to your customers.&lt;/p&gt;
&lt;p&gt;For example, you may wish to allow users to backup their data once per hour while imposing no such limit on premium customers.&lt;/p&gt;
&lt;h2 id=&quot;python-9&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#python-9&quot;&gt;¶&lt;/a&gt;python&lt;/h2&gt;
&lt;p&gt;Building LLM applications for production&lt;br&gt;
&lt;a href=&quot;https://huyenchip.com/2023/04/11/llm-engineering.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://huyenchip.com/2023/04/11/llm-engineering.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python高性能编程六：multiprocessing模块&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/455171966&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/455171966&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多进程中运行了一定数量的Python进程，每个进程都有自己的内存空间等，所以没有GIL竞争。而对一个进程的多线程，会存在GIL竞争而造成额外开销，于是代码运行会变慢。&lt;/li&gt;
&lt;li&gt;每当一个线程被唤醒并设法获得GIL时，就使用了系统资源。如果一个线程忙碌，那么其他线程将重复不断地唤醒并设法获取GIL，这些重复造成开销越来越大。&lt;/li&gt;
&lt;li&gt;当然，这是多线程运行于多个CPU上的问题，多线程的单核CPU没有没有GIL竞争。&lt;/li&gt;
&lt;li&gt;同样比纯Python快了很多，并且线程越多，速度基本会越快。通过工作于GIL之外，numpy能够用多线程达到更快的速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是时候进行OAuth 2.1了&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/553934043?utm_id=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/553934043?utm_id=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果您现在想要实施安全的OAuth解决方案，则需要阅读以下内容：RFC 6749（OAuth 2.0 Core），RFC 6750（持有者令牌），RFC 6819（威胁模型和安全注意事项），RFC 8252（本机应用程序的OAuth），RFC 8628（设备授予），基于浏览器的应用程序的OAuth，OAuth 2.0安全最佳实践，RFC 7009（令牌吊销），RFC 8414（授权服务器元数据）， 如果您还要实现OAuth服务器，那么您需要阅读RFC 7519（JWT），JWT Best Current Practice，JWT Profile for Access Tokens，以及我忘记的其他一些内容。&lt;/p&gt;
&lt;p&gt;OAuth 2.1中将包含的内容的细节仍在小组内进行讨论，并将在即将举行的IETF会议的议程中。这些讨论的起点大致如下。&lt;/p&gt;
&lt;p&gt;从 OAuth 2.0 Core、RFC 6749 开始&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括 OAuth 2.0 持有者令牌，RFC 6750&lt;/li&gt;
&lt;li&gt;采用安全 BCP，这将删除密码授予和隐式流&lt;/li&gt;
&lt;li&gt;要求所有客户端类型使用 PKCE，而不仅仅是公共客户端（在安全性 BCP 中定义）&lt;/li&gt;
&lt;li&gt;采用本机应用和基于浏览器的应用 BCP&lt;/li&gt;
&lt;li&gt;包括设备授予作为可用的顶级授权选项 （RFC 8626）&lt;/li&gt;
&lt;li&gt;包括令牌吊销 （RFC 7009）&lt;/li&gt;
&lt;li&gt;包括授权服务器元数据 （RFC 8414）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果授权服务器打算与任意资源服务器（如 OAuth 服务和开源项目）进行互操作，则还有一组附加要求，其中包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令牌自检 （RFC 7662）&lt;/li&gt;
&lt;li&gt;JWT访问令牌（当前工作组草案）&lt;/li&gt;
&lt;li&gt;智威汤逊当前最佳实践（当前工作组草案）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们都知道OAuth2.0的授权码模式是最安全的授权模式。但在非TLS链接发生时，该模式的部分授权流程可能被拦截导致“中间人攻击”。为了防止报文被修改，在授权码的基础上附加了一个PKCE流程RFC7636用于JavaScript单页应用，后面还出台了针对移动端的PKCE规范RFC8252。&lt;/p&gt;
&lt;p&gt;登录鉴权理论知识串讲：OAuth2、JWT、session、refresh token、SSO、OIDC、IDP…&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/573697777&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/573697777&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth, OpenID Connect(OIDC), SAML, JWT, IDP, UMA, CAS，SSO，PKCE, LDAP, kerberos&lt;/p&gt;
&lt;p&gt;OpenID Connect（简称 OIDC）1.0 是建立在 OAuth 2.0 上的身份验证机制，它允许客户端通过授权服务对用户进行认证，以及获取用户信息。其意义主要在于以安全的方式分发用户的唯一标识（访问凭证依然是 Access Token）。&lt;br&gt;
&lt;a href=&quot;http://timd.cn/openid-connect/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://timd.cn/openid-connect/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OP：OpenID Provider，即 OAuth 2.0 中的授权服务，用于对用户进行鉴权&lt;/li&gt;
&lt;li&gt;RP：Relying Part，即 OAuth 2.0 中的客户端，它从 OP 获取对鉴权信息和用户信息&lt;/li&gt;
&lt;li&gt;ID Token：是一个 JWT，包含本次授权的基本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;金融&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#金融&quot;&gt;¶&lt;/a&gt;金融&lt;/h2&gt;
&lt;p&gt;QuantLib是基于欧美成熟金融市场开发的大型金融产品定价分析框架，其涵盖的金融工具（Instruments）主要分为四类：固定收益（Fixed Income）、期权（Option）、信贷（Credit）和通胀（Inflation）。每一个大类又包含了多个金融工具或衍生品，比如固定收益产品包括远期（Forward）、债券（Bonds）和互换（Swaps）等。&lt;/p&gt;
&lt;p&gt;高频交易的常见策略包括，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做市策略（Market Making)：这种策略中，做市商手中持有一定现货，在交易所挂限价单，同时和买卖双方进行交易，为市场提供流动性。这种策略的收入包括买卖价差和交易所返佣两个部分。&lt;/li&gt;
&lt;li&gt;趋势策略（Directional)：简单说就是进行价格预测。高频使用了更深度、颗粒度更细的行情，会做相对中低频更精细的预测，并且会用报撤单速度的优势，先下单来人为制造趋势。&lt;/li&gt;
&lt;li&gt;套利策略（Arbitrage)：简单说就是价格回归。流动性越好的市场，具有相关性的品种、合约价差会越快消失，速度最快的玩家才可以抓住这些转瞬即逝的机会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在国内，证券交易所不允许日内交易，没有返佣；期货交易所流动性好的品种都限制日内报撤单数量，返佣非常不稳定。扣除高频在硬件和系统开发上的投入成本，（算算GPU，万兆网卡多少钱），纯粹的高频做市策略，收益绝对没有到“暴利”的程度。&lt;/p&gt;
&lt;p&gt;而在套利策略和趋势策略中，其实高频交易主要提供的是运算速度和交易执行速度上的优势，但是一旦策略本身研发能力跟不上，速度也不会给策略带来明显的优势。而且套利和趋势策略追求的对价格和价格关系的准确计算，并不是说做到了高频就一定能赚钱，刻意提高频率，一味追求频繁交易只会增加交易费用，增加亏损的概率。&lt;/p&gt;
&lt;p&gt;而且，高频的一大问题是，策略的资金容量非常有限。即使策略本身收益稳定且高，绝对收益的数量也是有上限的。&lt;/p&gt;
&lt;p&gt;一般来说，国内的高频团队，能够赚钱的，都是在趋势策略、套利策略等其他策略上也很有实力的团队，都会逐渐往大资金容量的中长周期低频策略上发展，九坤、幻方、锐天、明泓、宽德都是如此。&lt;/p&gt;
&lt;p&gt;卷因子更需要一些计算机和数学方面的能力，目前主流的利用机器学习遗传算法发现因子，需要强大的编程方面的能力，同时也需要数理统计方面的知识对数据进行处理，对超参数进行合理预估。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/314495451/answer/1046204865&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/314495451/answer/1046204865&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我一直很好奇，高中数学考试每次145+的人怎么做到的？ - 川上老师的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/525449367/answer/2963025237&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/525449367/answer/2963025237&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;br&gt;
①计算能力★&lt;br&gt;
②预习课本&lt;br&gt;
③刷题&lt;br&gt;
④广泛学习课外知识&lt;br&gt;
⑤做题习惯好——心态好，稿纸、卷面工整&lt;br&gt;
⑥考试合理分配时间&lt;br&gt;
⑦检查考试卷——新法重做/逐步检验&lt;br&gt;
⑧适当投机取巧&lt;br&gt;
⑨不要懒惰，反复巩固&lt;/p&gt;
&lt;p&gt;庄家能把散户看透到什么地步？ - 酒馆的投资笔记的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/435574315/answer/2978606013&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/435574315/answer/2978606013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1、世人都有贪嗔痴，行情上涨总是想多赚点，行情一跌就开始装死，不愿意认输。好不容易解套，直接就成了放牛娃。在这个市场当中，如果你没有原则，你一定会被庄家左右，被自己的情绪左右，我的原则是每次亏损不超过本金5%，如果盈利则至少要10%，一旦10个点以上盈利开始回吐，至少要保证当笔交易不能亏损出局。这样即便你的胜率只有50%，100次，你的收益也将达到800%，难吗？难的是人的贪婪和恐惧，知行合一。&lt;/p&gt;
&lt;p&gt;2、集中投资，学会空仓。散户的最大痛点：不会空仓，弱势亏损补仓，本金少股票多，亏损死扛，100万以下不宜超过3只股，把那些大级别均线系统向下的，股性不强，不在主流赛道的股票去掉，认错，可能对于你来说需要很大的勇气，但是承认自己的错误，是我们成功的开始。会买的是徒弟，会卖的是师父，会空仓的是祖师爷。当行情不好的时候，一定要能管住自己的手。而当你真正看好的时候，要敢于重仓，其实投资市场绝大部分盈利都是来自于几只好股票。我的持仓从来不超过3只，哪怕是在牛市。&lt;/p&gt;
&lt;p&gt;3、我自始至终觉得成交量这个指标非常重要，学会这点你将碾压80%的交易选手。量比小于0.5，属于明显缩量，缩量能创新高，说明主力高度控盘，而且可以排除主力出货的可能，如果正好处于上升通道，则吃肉的概率极大。如果股票涨停，量比小于1，说明还有较大的上涨空间，次日再次涨停的概率极大，如果量比大于1.5，而且突破某个重要阻力位（比如20日均线）之后缩量回调的个股，是不可多得的买入对象。&lt;/p&gt;
&lt;p&gt;4、暴跌是检验股票的试金石，牛市里行情暴跌意味着抄底的机会，也是选股的好时机，如果大盘暴跌，你的股票微跌甚至不跌，那明显是有资金抱团，拒绝下跌，所以这种票可以放心持有，必有回报。如果大盘暴跌，你的票大跌，第二天大盘涨它暴涨，这很可能是主力借大盘下跌洗盘，股性不错，这种票你可以在大盘暴跌时买入，大盘涨的时候出，短线反弹套利。&lt;/p&gt;
&lt;p&gt;5、趋势为王，顺势而为。趋势一旦形成，不用多分析，必须跟随，跟着资金走，不猜，不预测，不假设，如果你不会判断趋势，你就看均线，所谓均线，就是把行情划分为多头和空头，多头就是向上，空头就是乡下，短线你就看5日均线，放量突破，你就跟进，中长线趋势你就看20日均线，放量突破你就进，破则出。&lt;/p&gt;
&lt;p&gt;6、把握情绪冰点。大盘每天都有自己的情绪，大部分时候，盘中会出现一些情绪“冰点”，可能是在开盘，可能是开盘一段时间后的分歧点，也可能是下午，或者是尾盘，总之，每天的盘面几乎都有情绪冰点。这个时候往往会选择在冰点进行出手，因为冰点恰好可以考验出个股强弱，这样往往能够获得被情绪带下来的恐慌筹码，也能够有效避免追高。&lt;/p&gt;
&lt;p&gt;7、懂得看题材：消息面、主线，资金，承接力度。消息是最能刺激行情的催化剂，这是短线选手必须要关注的点，主线就是市场最热门的方向，比如2021年的新能源、2022年的新冠药概念；资金主要看主力净流入，承接力度指的是板块的持续性，是否有资金愿意去抬轿形成合力。&lt;/p&gt;
&lt;p&gt;8、做短期强势股要关注量能和换手率：大涨的时候，必须是放量的，说明有资金介入，看好未来的走势；另外，一般当天涨幅大于5个点以上，换手率不要低于5%，但最好不要超过30%，这些都是多年经验的总结，不信大家可以去观察最近的强势股走势，你会给我点赞的。&lt;/p&gt;
&lt;p&gt;9、倍阳缩倍阴是非常靠谱的起涨形态，什么叫倍阳缩倍阴？就是大涨的当天是放倍量的，隔天的阴线量能缩一倍。但值得注意的是，回调没有破第一天大阳线的底部，随后出现小阴小阳的K线就是绝佳的进场机会，后市爆发力极高！&lt;/p&gt;
&lt;p&gt;10、投资源于生活，从细节中寻找机会，看一个公告要从点推面。资金介入的逻辑是赚钱，赚钱的逻辑是价值，价值的逻辑是商业行为的落地。所以，思考的方向是消息面 - 逻辑面 - 资金面 - 技术面 – 分时盘口，从生活的案例中提炼出精华。&lt;/p&gt;
&lt;p&gt;11、长线思维。看长做短，意思是你不一定要长期持有一个票，但是一定要有这种思维，所谓长线思维指的是你要有自己操作模式，不要人云亦云，坚持自己的思路，不断完善，你才能够稳定获利，精益求精。&lt;/p&gt;
&lt;p&gt;12、大赚之后要学会空仓，散户大赚之后往往就会骄傲，然而骄兵必败，厉兵秣马再战，商品是有时间周期的，大赚以后会忘记时间的价值，当一个人成功一次后会增加自信心，连续成功便会自信心爆棚，对自己的判断是百分百认可，看好一个股就立马买了，如果买错了但小亏并不会让自己的信心减少多少，只有直到大亏时才会使信心大幅下降，当信心下降后，出手便会容易变形！不要妄想抓住每个版块的机会，同时追两只兔子的人，一直也会逮不到！&lt;/p&gt;
&lt;p&gt;13、交易越是不顺的时候，越要沉住气，艰难的路不是谁都有资格走的，扛得住涅槃之痛，才配的上重生之美。股市就是这样，当赚钱效应出来的时候赚钱很容易。当亏钱效应出来的时候亏钱也很容易，关键点在于勇于出手和即时收手。&lt;/p&gt;
&lt;p&gt;14、“一将功成万骨枯”，炒股其实是很血腥的，一赚二平七亏，是这个市场唯一不变的真理。我认识的很多股市高手，都会研究佛学，每一波大的行情，无论是上涨还是下跌，我们都会选择去放生，我知道这毫无意义，但求念头通畅。如果有一天大家都成功的时候，一定要记得做一些对社会有意义的事情！佛系点说这是因果，正经点说达则兼济天下！&lt;/p&gt;
&lt;p&gt;以上都是我炒股16年实践经验和技术的总结，不一定适用每个人，需要每个人结合自己的实践去使用总结，作为交易者，最可怕的不是你技术上存在问题，而是你的认知不够，掉进了这些交易陷阱却不自知！没有无敌的交易系统，只有无敌地使用交易系统的人！这是真理，交易系统最终要回归到人身上！&lt;/p&gt;
&lt;p&gt;个人维护一个20%收益的低频量化策略，难度有多大?现实吗？ - quantkoala的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/270964258/answer/3138383627&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/270964258/answer/3138383627&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端-5&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前端-5&quot;&gt;¶&lt;/a&gt;前端&lt;/h2&gt;
&lt;p&gt;前端Web实战：从零打造一个类Visio的流程图拓扑图绘图工具&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/Alsmile/article/details/131725305&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/Alsmile/article/details/131725305&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;其它-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#其它-2&quot;&gt;¶&lt;/a&gt;其它&lt;/h2&gt;
&lt;p&gt;高中数学学那么多三角函数公式到底有什么用？ - 吾欲揽六龙的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/62411548/answer/2572017203&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/62411548/answer/2572017203&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flink-Table API(概念、基础操作、流表转换)&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/EnzoDin/p/16743404.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/EnzoDin/p/16743404.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;个人做量化交易靠谱吗？ - 金融圈笛子的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/329206671/answer/2363335984&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/329206671/answer/2363335984&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指数增强策略里最重要的一块是因子投资，也就是我们通过一定的标准，选出能够跑赢指数的股票组合。在海外几十年的历史中，人们总结了四大跑赢指数的因子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;价值，也就是认为，低市盈率的公司可以跑赢高市盈率的公司。&lt;/li&gt;
&lt;li&gt;质量，也就是现金流好，负债率低的公司，可以跑赢现金流差，负债率高的公司。&lt;/li&gt;
&lt;li&gt;规模，也就是小盘股可以跑赢大盘股。&lt;/li&gt;
&lt;li&gt;动量，也就是过去强势的公司，在未来会跑赢过去弱势的公司。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;量化交易都有哪些主要的策略模型？ - 金融圈笛子的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/24179101/answer/2188611287&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/24179101/answer/2188611287&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;个人做量化交易靠谱吗？ - 泛程序员的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/329206671/answer/2079148606&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/329206671/answer/2079148606&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于实时性不敏感的策略，再更一个散户白嫖AWS的信息。我有几个日内策略（1分钟蜡烛图）的策略是用AWS Lambda + DynamoDB + S3 + CloudWatch 实现的。因为aws每个月都有一定的免费额度，特别是lambda额度很大。。那几个策略就是白用的状态。因为是日内1分钟策略，每天的Lambda运算量只有几千秒，远远达不到aws收费限额。。。但是lambda省心，不用维护不用停机。。就这么省心。DynamoDB用来维护状态，因为lambda是无状态的，也是免费用。S3用来维护一些历史数据，定期清理，一个月0.2美金。。。就这样跑了大半年，没有出过任何问题。。日常交易、警报直接通过lambda发邮件过来。。。挺舒心的。。。&lt;/p&gt;
&lt;p&gt;夏普率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你实盘夏普超过1后，通常已经有比较好的框架了：包括资产配置和风险控制。&lt;/li&gt;
&lt;li&gt;且做到夏普过1，已经旱涝保收了，说实话，已经超过许多所谓“专家”了。&lt;/li&gt;
&lt;li&gt;夏普1的意思就是长期看，你每承担的1分风险，换得了1分回报，很公平。&lt;/li&gt;
&lt;li&gt;在这之前，没必要投资研究更好的回测系统和交易系统。&lt;/li&gt;
&lt;li&gt;如果你做了几年实盘，夏普低于0.7，请不要再做了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交易中的高手高在哪里? - 道行天的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/322969695/answer/2945988471&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/322969695/answer/2945988471&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要入行机器学习是不是非学数学不可？要学到什么程度，如何才能提高数学水平？ - 生姜DrGinger的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/597884858/answer/3002690154&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/597884858/answer/3002690154&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;举个例子，仅仅满足调用Python机器学习、深度学习的包，比如SK-learn、PyTorch，是不够的。&lt;br&gt;
为了调参，为了解释结果，也需要大家理解机器学习算法的底层数学知识。&lt;br&gt;
这些数学基础大致可以分成如下几个板块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微积分（比如，向量微积分中的梯度、黑塞矩阵）&lt;/li&gt;
&lt;li&gt;线性代数（比如，向量空间、特征值分解、奇异值分解）&lt;/li&gt;
&lt;li&gt;概率统计（比如，最小二乘法、多元统计、多元高斯分布、最大似然估计MLE、贝叶斯推断、最大后验估计）&lt;/li&gt;
&lt;li&gt;数值与优化（比如，极值、数值微积分、拉格朗日乘子法、基于梯度的优化方法、遗传算法）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了学习深度学习，大家当然可以进一步学习随机过程、自动微分、信息论、图论等内容。&lt;/p&gt;
&lt;p&gt;对于国内理工科同学来说，虽然数学三件套（微积分、线性代数、概率统计）学了很多数学工具，但是想要入门机器学习，现有的数学三件套的知识体系已经很落后“时代需求”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微积分：过度一元，极少多元&lt;/li&gt;
&lt;li&gt;线性代数：为什么要那么强调行列式？&lt;/li&gt;
&lt;li&gt;线性代数：为什么不联系数据、几何、多元微积分、优化、统计？&lt;/li&gt;
&lt;li&gt;概率统计：太多一元，极少多元&lt;/li&gt;
&lt;li&gt;概率统计：太多频率派，极少贝叶斯派&lt;/li&gt;
&lt;li&gt;贝叶斯统计推断更靠近“人脑思维”模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线性代数是现代计算的核心。最应该强调“多视角”，比如数据视角、几何视角、空间视角、优化视角、统计视角等等。“多重视角”把代数、线性代数、几何、解析几何、概率统计、微积分、优化方法等编织成一张绵密的网络。&lt;/p&gt;
&lt;p&gt;为什么全世界都在加息，而中国却在减息，有金融大神科普一下吗？ - 佐伊24的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/559951607/answer/3126681915&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/559951607/answer/3126681915&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/439091470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/439091470&lt;/a&gt;&lt;br&gt;
分享的小白避免踩坑六大神句，分享给大家：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“长期持有”&lt;/li&gt;
&lt;li&gt;“减少操作”&lt;/li&gt;
&lt;li&gt;“大类配置”&lt;/li&gt;
&lt;li&gt;“分散持仓”&lt;/li&gt;
&lt;li&gt;“坚持定投”&lt;/li&gt;
&lt;li&gt;“选基选人”&lt;/li&gt;
&lt;li&gt;用“选基选人”“分散持仓”规划自己的收入来源，让自己既有稳定的主业收入，也有爱好和投资收入，让自己接下来的人生选择更有底气。&lt;/li&gt;
&lt;li&gt;用“长期持有”“大类配置”去设定自己的人生目标，做长期主义者。&lt;/li&gt;
&lt;li&gt;用“减少操作”“坚持定投”去远离浮躁，一点点收获成长，实现自己的人生目标。&lt;/li&gt;
&lt;li&gt;End~&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在股市里怎么跑赢90%以上的股民？ - 渔人日志的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/413391595/answer/2585672232&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/413391595/answer/2585672232&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所有的指标都是事后诸葛，唯有成交量和换手率是一个例外，这两个指标都是真金白银堆出来的&lt;/p&gt;
&lt;p&gt;3分钟”战胜“市场：一个简单的投资组合 - 泛程序员的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/249909117&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/249909117&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你在开发新策略，至少需要检测两个参数，即 sharpe 和 相关性。&lt;/li&gt;
&lt;li&gt;即使新策略的sharpe超过了1.1，如果与市场相关性过高，那么并不一定是好的策略。&lt;/li&gt;
&lt;li&gt;相反的，即使新策略sharpe没有很好，但是相关性非常低，那么这个新策略就可以与市场形成一个新的投资组合，进而实现更高的sharpe。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看哪些纪录片可以提高认知？ - 似舟的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/599621146/answer/3059427656&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/599621146/answer/3059427656&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1《隐姓亿万富豪》&lt;/p&gt;
&lt;p&gt;有自己的量化模型，可以提供两年实盘交易记录，如何找投资？ - Spectre的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/561140482/answer/2958575664&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/561140482/answer/2958575664&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其次是国内的公司quant思路，主流的就是高频交易、因子选股、日内交易，基本不会做低频CTA、统计套利和宏观对冲。&lt;/p&gt;
&lt;p&gt;说说你的日内交易策略是什么？ - 郑多多的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/42126058/answer/3046718478&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/42126058/answer/3046718478&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;波动率突破，除了突破多空信号之外，还可以在波动线和加仓信号进场，日内交易机会很多。&lt;/li&gt;
&lt;li&gt;大部分行情都是震荡行情，利用成交量加权平均价通道来确定日内压力和支撑，如下图所示，能比较好的做好止盈和止损。&lt;/li&gt;
&lt;li&gt;主图粗线为vwap成交量加权平均价，上下沿分别为1和2单位的ATR标准差，视作支撑和压力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fin tune&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s/4v45pshI8wwvMXPpBEPAQw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/4v45pshI8wwvMXPpBEPAQw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;海龟交易策略使用了什么量化交易模型? - 李奇的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/495850466/answer/2207096515&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/495850466/answer/2207096515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;深度学习做股票预测靠谱吗？ - Spectator的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/54542998/answer/2867826714&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/54542998/answer/2867826714&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;线性代数到底是什么？ - AK Fourier的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/489470968/answer/3117627141&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/489470968/answer/3117627141&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「成考」和「自考」的区别是什么？ - 自考上岸锦鲤的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/21912024/answer/2611884601&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/21912024/answer/2611884601&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;jstack命令详解 - 知乎用户BgiUTI的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/475571849&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/475571849&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;终极找 bug 大法 - 二分&lt;br&gt;
&lt;a href=&quot;https://segmentfault.com/a/1190000041400805&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000041400805&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.51cto.com/article/677058.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.51cto.com/article/677058.html&lt;/a&gt;&lt;br&gt;
安全 | 零知识证明是零信任吗？&lt;/p&gt;
&lt;p&gt;java 应用 cpu 过高故障排查&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_41538097/article/details/131842679&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_41538097/article/details/131842679&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看进程下的线程详情 top -H -p 11748&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将线程 12240 的 pid 转为 16 进制 printf “0x%x\n” 12240&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 java jdk 下自带的 jstack 查看进程的快照 jstack 12227|grep -A 20 0x2fd0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top+top -Hp + jstack排查是&amp;quot;VM Thread&amp;quot;消耗过多资源，可以进一步使用jmap工具进行内存溢出排查。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务执行过慢问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top+top -Hp + jstack排查发现是普通业务线程，可看到具体是哪个接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jstack + Java进程打印堆栈信息中包含死锁信息deadlock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程处于waiting状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多打印几次jstack信息，对比一直停留在waiting状态的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/wx17343624830/article/details/130946645&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wx17343624830/article/details/130946645&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java解决HTTP请求异常的方法&lt;br&gt;
&lt;a href=&quot;http://news.558idc.com/617235.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://news.558idc.com/617235.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接超时异常（ConnectTimeoutException）：当HTTP请求连接超时时抛出此异常。通常是因为连接到外部系统花费的时间超过了预定的最大连接时间。&lt;/li&gt;
&lt;li&gt;请求超时异常（SocketTimeoutException）：当HTTP请求发送后，在指定的时间内没有得到响应时，会抛出此异常。通常是由于外部系统处理请求的时间过长或者响应消息丢失造成。&lt;/li&gt;
&lt;li&gt;无法建立连接异常（ConnectionRefusedException）：当向外部系统发起连接请求时，被拒绝连接时会抛出此异常。通常是由于外部系统关闭或者未启动。&lt;/li&gt;
&lt;li&gt;主机不可达异常（UnknownHostException）：当通过域名解析得到的IP地址无法与目标主机建立连接时，会抛出此异常。通常是由于网络不可达或者域名解析错误引起。&lt;/li&gt;
&lt;li&gt;SSL证书异常（SSLHandshakeException）：当与外部系统进行HTTPS通信时，验证SSL证书失败时会抛出此异常。通常是由于证书过期、证书不受信任或者证书链不完整等原因引起。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Analysis of HTTP Performance problems&lt;br&gt;
&lt;a href=&quot;https://www.w3.org/Protocols/HTTP-NG/http-prob.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.w3.org/Protocols/HTTP-NG/http-prob.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Timing breakdown phases explained&lt;br&gt;
&lt;a href=&quot;https://developer.chrome.com/docs/devtools/network/reference/?utm_source=devtools#timing-explanation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.chrome.com/docs/devtools/network/reference/?utm_source=devtools#timing-explanation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有适合于2万元（人民币）以内小资金的股票量化策略吗？ - 徐西摩的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/436291669/answer/3101205205&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/436291669/answer/3101205205&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【105】因子择时到底行不行？ - llanglli的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/632461153&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/632461153&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【量化课堂】多因子策略入门&lt;br&gt;
&lt;a href=&quot;https://www.joinquant.com/view/community/detail/fd9bf8d85320864d6718ed35e16d4c6a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.joinquant.com/view/community/detail/fd9bf8d85320864d6718ed35e16d4c6a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二分查找 1000万数据和二分查找 500 万数据的速度变化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3
Python 3.8.10 (default, Nov 14 2022, 12:59:47)
[GCC 9.4.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import timeit
&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#39;bisect.bisect(a,3)&#39;, &#39;import bisect;a = list(range(10000000))&#39;)
0.40884770452976227
&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#39;bisect.bisect(a,3)&#39;, &#39;import bisect;a = list(range(10000000))&#39;)
0.4190584868192673
&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#39;bisect.bisect(a,3)&#39;, &#39;import bisect;a = list(range(10000000))&#39;)
0.3647211641073227
&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#39;bisect.bisect(a,3)&#39;, &#39;import bisect;a = list(range(5000000))&#39;)
0.3612236827611923
&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#39;bisect.bisect(a,3)&#39;, &#39;import bisect;a = list(range(5000000))&#39;)
0.354061558842659
&amp;gt;&amp;gt;&amp;gt; timeit.timeit(&#39;bisect.bisect(a,3)&#39;, &#39;import bisect;a = list(range(5000000))&#39;)
0.35363607108592987
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分区问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一个表，8000万数据，有三列 id, user_id, created_at，物理设备就一块磁盘。

常用查询（需保证速度）： select count(*) from t where user_id = xxx;
不常用的查询（慢点无所谓）： select count(*) from t where created_at &amp;gt; &#39;2023-08-06&#39;;

A 方案是就存单表，在user_id和created_at上加索引。
B 方案是根据 user_id 分成 5 个 hash 分区，user_id 和 created_at上依旧有索引。

只说常用查询，问 B 方案比 A方案性能快很多吗？为什么？
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/Hmj050117/article/details/121349435&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/Hmj050117/article/details/121349435&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指针数如何计算？&lt;br&gt;
假设主键ID为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节，这样一共14字节。&lt;/p&gt;
&lt;p&gt;那么一个页中能存放多少这样的组合，就代表有多少指针，即 16384 / 14 = 1170。那么可以算出一棵高度为2 的B+树，能存放 1170 * 16 = 18720 条这样的数据记录。&lt;/p&gt;
&lt;p&gt;同理：&lt;br&gt;
高度为3的B+树可以存放的行数 = 1170 * 1170 * 16 = 21902400&lt;/p&gt;
&lt;p&gt;千万级的数据存储只需要约3层B+树，查询数据时，每加载一页（page）代表一次IO。所以说，根据主键id索引查询约3次IO便可以找到目标结果。&lt;/p&gt;
&lt;p&gt;金融里的IR和IC是什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IC即信息系数(Information Coefficient),表示所选股票的因子值与股票下期收益率的截面相关系数 ,通过IC值可以判断因子值对下期收益率的预测能力。&lt;/li&gt;
&lt;li&gt;当IC的绝对值大于0.05时,因子的选股能力较强,当IR大于0.5时因子稳定获取超额收益能力较强&lt;/li&gt;
&lt;li&gt;IR即信息比率(Information Ratio),是超额收益的均值与标准谁差之比,IR=IC的多周期均值/IC的标准谁方差,代表因子获取稳定Alpha的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指数列表&lt;br&gt;
&lt;a href=&quot;https://www.joinquant.com/data/dict/indexData&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.joinquant.com/data/dict/indexData&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只要三步，就能让你找到买了就会涨的股票！ - 笑看人生886的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/532831538&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/532831538&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SVM 讲解&lt;br&gt;
机器学习在量化交易上有应用吗，效果怎么样？ - quantkoala的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/534980414/answer/3089883071&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/534980414/answer/3089883071&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;求期权的卖方策略，让资金取得长期稳定的低风险高收益？ - 東雲的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/581979454/answer/2877622828&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/581979454/answer/2877622828&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;快速了解 OpenAI 的 fine-tune 和 Embedding 能力 - 人类观察所主任的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/609359047&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/609359047&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_39199838/article/details/130810313&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_39199838/article/details/130810313&lt;/a&gt;&lt;br&gt;
利用openai的Chat-3模型fine-tuning训练自己的模型&lt;/p&gt;
&lt;p&gt;这四个模型的成本差异比较大，给个直观的示例：我自己准备的10条文本数据（csv文件大小18K）用davinci训练花费是$1.56。&lt;/p&gt;
&lt;p&gt;ChatGPT背后的技术-基于人类反馈的强化学习(RLHF)&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/616708590&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/616708590&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenAI API (三)Fine-tuning&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/648714349&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/648714349&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一句话解释，Fine-tuning就是在基础模型上根据新的数据训练出自定义模型。&lt;/p&gt;
&lt;p&gt;通过Fine tuning，您可以从API提供的模型中获得更多好处，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比提示设计更高质量的结果&lt;/li&gt;
&lt;li&gt;能够训练超过提示所容纳的更多示例&lt;/li&gt;
&lt;li&gt;由于较短的提示而节省tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;训练样本越多，效果就越好。数据集大小每翻倍，模型质量线性增加。&lt;/p&gt;
&lt;p&gt;数云融合｜探究GPT家族的进化之路：GPT-3、GPT-3.5和GPT-4的比较分析&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/616691512&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/616691512&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenAI的GPT1,GPT2,GPT3,GPT4系列的模型概览&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/650057910&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/650057910&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI Canon&lt;br&gt;
&lt;a href=&quot;https://a16z.com/2023/05/25/ai-canon/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://a16z.com/2023/05/25/ai-canon/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI Linkedin Post Generator&lt;br&gt;
&lt;a href=&quot;https://taplio.com/generate-linkedin-posts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://taplio.com/generate-linkedin-posts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么有人不愿意承认能上985/211的大多是智商高的？ - 走心小哥的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/561073604&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/561073604&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你在国内亲眼见过自己一个人全职做 量化交易、并比同等相近能力的上班族赚得多很多的人吗？ - 金融圈笛子的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/360042171/answer/2415198507&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/360042171/answer/2415198507&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你在国内亲眼见过自己一个人全职做 量化交易、并比同等相近能力的上班族赚得多很多的人吗？ - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/360042171/answer/1989559460&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/360042171/answer/1989559460&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;交易产生手续费一万块，交易所返7500到期货公司，期货公司拿到这个钱，首先要交掉大约6.7%左右的税，这个是没办法免的，这以后才给你返90%或95%，事实上你到手的返佣/你交出去的手续费，大概就是50~60%这样。上期所会高很多，INE会低很多。当然这个月INE90%了，综合返率本月会上到70%+&lt;/p&gt;
&lt;p&gt;托管机房里机器到交易所的RTT也就350us左右，标准差没几个us。&lt;/p&gt;
&lt;p&gt;高频看不看K线，就跟造房子看不看牛顿三定律一样。K线是基石，但过于基础了，现在的做法已经在K线、微观之上，叠了太多太多太多的东西了，绝不是“肉眼看K线形态”这种电视股票脱口秀的东西了。&lt;/p&gt;
&lt;p&gt;请教您行情源您用的是哪个呢?我不太懂,难不成您是用的ctp,然后直接tcpdump抓包,分析协议以后再进fpga处理?&lt;br&gt;
直接交易所进期货公司第一级交换机的镜像数据。如果你也是同行，详询期货公司，这个现在已经普及了。&lt;/p&gt;
&lt;p&gt;Elasticsearch：普通检索和向量检索的异同？&lt;br&gt;
&lt;a href=&quot;https://ost.51cto.com/posts/11561&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ost.51cto.com/posts/11561&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你在搜索时不知道确切的query 词元，或者你希望能对更广泛的同/近义词所指向的内容进行召回，可以考虑通过向量搜索来完成&lt;br&gt;
他们大多会具有以下一些特点：&lt;/p&gt;
&lt;p&gt;1.较慢的索引速度&lt;br&gt;
2.较大的索引大小&lt;br&gt;
3.较慢的查询速度（在大数据量的场景）&lt;br&gt;
4.限的缩放比例&lt;br&gt;
5.（对于精确匹配）具有较低的精度&lt;br&gt;
6.较差的词元和词组的搜索能力&lt;br&gt;
7.通过向量（某些解决方案中可以包含一部分标量字段）进行召回&lt;br&gt;
8.对近似语义的捕获程度较高，可以很好的处理同/近义词&lt;/p&gt;
&lt;p&gt;OpenAI的新功能：Function Calling - BitByBit的文章 - 知乎&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/637107426&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/637107426&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;shell-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#shell-2&quot;&gt;¶&lt;/a&gt;shell&lt;/h2&gt;
&lt;p&gt;以 &lt;code&gt;@a_b_c&lt;/code&gt; 的式样&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a：基于索引（ind）还是值（val）来
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202307</title>
    <link href="http://blog.ihuhao.com/2023/07/05/202307/"/>
    <id>http://blog.ihuhao.com/2023/07/05/202307/</id>
    <published>2023-07-05T01:01:51.000Z</published>
    <updated>2023-08-03T02:14:51.919Z</updated>
    
    <content type="html">&lt;h2 id=&quot;english&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#english&quot;&gt;¶&lt;/a&gt;english&lt;/h2&gt;
&lt;p&gt;余光中：怎样改进英式中文？- 论中文的常态与变态&lt;br&gt;
&lt;a href=&quot;https://open.leancloud.cn/improve-chinese/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://open.leancloud.cn/improve-chinese/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前谷歌工程师的英语频道&lt;br&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=pDehb5xQfWc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=pDehb5xQfWc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;英语口语教程&lt;br&gt;
&lt;a href=&quot;https://www.youtube.com/@SpeakEnglishWithTiffani/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/@SpeakEnglishWithTiffani/videos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2021/leveraging-behavior-analytic-computation-for-anti-abuse-defenses&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://engineering.linkedin.com/blog/2021/leveraging-behavior-analytic-computation-for-anti-abuse-defenses&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Behavior analytic computation, on the other hand, can provide high quality features for bot-driven attacks without collecting extra user data.&lt;/p&gt;
&lt;p&gt;The idea of behavior analytic computation is to capture the key bot/automation signatures hidden among the existing feature values or numbers—these signatures can be preserved even if the features are constantly changed.&lt;/p&gt;
&lt;p&gt;It intelligently utilizes simple arithmetic and logarithmic operations to transform existing features into more robust ones in constant time.&lt;br&gt;
Two key operations of behavior analytic computation are ratio and logarithm.&lt;br&gt;
Ratio can capture the relative change of numbers instead of absolute numbers;&lt;br&gt;
logarithm can amplify particular ratio values that differentiate bot/automation traffic and human traffic patterns.&lt;/p&gt;
&lt;p&gt;When two features are independent of each other, statistically we will see some kinds of natural distributions between them.&lt;br&gt;
Assuming X and Y are two feature types, xi and yi are values of the feature, respectively.&lt;br&gt;
When a particular value x1 is selected and the request numbers from top values of Y within a certain time period are sorted descendingly, the distribution of different yi count can be obtained.&lt;/p&gt;
&lt;p&gt;Another example where behavior analytic computation can contribute is by improving the quality of counters.&lt;br&gt;
Counters are commonly used against large-scale abuse,&lt;br&gt;
as higher counter values typically reflect the likelihood of automation-driven abuse.&lt;/p&gt;
&lt;p&gt;However, certain behavioral and structural information that is not captured by counters will also be missed by models if only typical counters are used as the features.&lt;/p&gt;
&lt;p&gt;Fig. 2 shows two examples of the requests from a single user within one hour where the x-axis is time and y-axis is the request index.&lt;/p&gt;
&lt;p&gt;The counter values for both cases are identical, but different behaviors are shown.&lt;/p&gt;
&lt;p&gt;While there is no obvious automation evidence found on Fig a, the requests on Fig b contain certain regular patterns indicating automation behind the scenes.&lt;/p&gt;
&lt;p&gt;Behavior analytic computation again captures such a plot signature into a single automation score where more human-like plots (Fig. 2(a)) have lower scores and automation-like plots (Fig. 2(b)) have higher scores.&lt;/p&gt;
&lt;p&gt;The extracted score is able to capture the key automation pattern even if users constantly adjust different regularities within the same time period.&lt;/p&gt;
&lt;p&gt;The same lightweight computation continues to provide speed and flexibility to the defense.&lt;/p&gt;
&lt;p&gt;More importantly, the extracted automation score is able to fill the gap where typical counters fail to differentiate between human requests or bot-driven automation requests at low counting numbers.&lt;/p&gt;
&lt;p&gt;Due to its capability to detect low-frequency automation, this extracted automation score has almost doubled our machine learning model recall on detecting automation-driven abuse at LinkedIn.&lt;/p&gt;
&lt;p&gt;Overall, we are able to leverage behavior analytic computation for our anti-abuse defense from three different aspects:&lt;/p&gt;
&lt;p&gt;Behavior analytic computation can capture automation signatures as robust features,&lt;br&gt;
thus improving model and rule resilience against fast-changing attacks.&lt;br&gt;
When defending against an actual dynamic attack,&lt;br&gt;
the extracted feature can bring significant robustness improvements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;greatly extending the time of protection by more than two orders of magnitude.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other key merit of behavior analytic computation is the ability to expand abuse labels.&lt;br&gt;
The typical anti-abuse defense is based on supervised models.&lt;br&gt;
However, for many bot-driven abuse types, such as scraping or account takeover,&lt;br&gt;
often only a small portion of all abusive requests/users are labeled,&lt;br&gt;
which limits the effectiveness of the models.&lt;/p&gt;
&lt;p&gt;Behavior analytic computation&lt;br&gt;
provides an unsupervised approach&lt;br&gt;
where each extracted automation signature&lt;br&gt;
can perform as an automation detection classifier.&lt;br&gt;
Those signatures have helped&lt;br&gt;
expand the overall recall&lt;br&gt;
when defending against bot-driven large-scale attacks&lt;br&gt;
in many abuse verticals at LinkedIn.&lt;/p&gt;
&lt;p&gt;Overall, we are able to&lt;br&gt;
leverage behavior analytic computation&lt;br&gt;
for our anti-abuse defense&lt;br&gt;
from three different aspects:&lt;/p&gt;
&lt;p&gt;As bad actors can&lt;br&gt;
persistently adapt to penetrate existing defenses&lt;br&gt;
and additional applications on the platform&lt;br&gt;
can provide entry points&lt;br&gt;
for new abuse scenarios,&lt;br&gt;
anti-abuse defense&lt;br&gt;
inevitably needs to continually handle&lt;br&gt;
new abuse scenarios and behaviors.&lt;/p&gt;
&lt;p&gt;Quick turnaround to the new abuse activities&lt;br&gt;
becomes critical to properly contain the overall damage.&lt;br&gt;
Unlike other robust features,&lt;br&gt;
such as browser or device fingerprinting,&lt;br&gt;
which often require longer engineering time and higher cost to onboard,&lt;br&gt;
behavior analytic computation&lt;br&gt;
can provide a prompt response&lt;br&gt;
to evolving attack signals&lt;br&gt;
to mitigate the threat.&lt;/p&gt;
&lt;p&gt;When facing new abuse scenarios&lt;br&gt;
where early assessment of existing features&lt;br&gt;
is critical to define anti-abuse strategy,&lt;br&gt;
behavior analytic computation’s lightweight extraction&lt;br&gt;
can also offer fast offline analysis&lt;br&gt;
and quick preliminary defense onboarding.&lt;/p&gt;
&lt;p&gt;Bad actors will always continue to change&lt;br&gt;
and evolve their behaviors,&lt;br&gt;
so resilience of the defense and fast turnaround&lt;br&gt;
are essential to ensure long lasting anti-abuse success.&lt;br&gt;
Behavior analytic computation is a newer concept&lt;br&gt;
that offers a lightweight and quick defense onboarding&lt;br&gt;
based on existing features,&lt;br&gt;
while preserving member privacy.&lt;/p&gt;
&lt;p&gt;The extracted automation signatures&lt;br&gt;
can not only enrich the feature set,&lt;br&gt;
enhancing defense robustness,&lt;br&gt;
but also provide expanded abuse labels&lt;br&gt;
to significantly improve incident response time and coverage&lt;br&gt;
for large-scale bot-driven attacks.&lt;/p&gt;
&lt;p&gt;Fighting abuse at LinkedIn&lt;br&gt;
is an ongoing effort&lt;br&gt;
requiring extensive collaboration&lt;br&gt;
between multiple teams.&lt;br&gt;
I would like to acknowledge our partners from the following teams,&lt;br&gt;
without whom this would not have been possible:&lt;/p&gt;
&lt;h2 id=&quot;架构&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#架构&quot;&gt;¶&lt;/a&gt;架构&lt;/h2&gt;
&lt;p&gt;技术架构评审需要考虑的问题-朱晔&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件选型
&lt;ul&gt;
&lt;li&gt;A 不是开源的，出了问题怎么办？&lt;/li&gt;
&lt;li&gt;B 虽然是开源的，但是是 Erlang 写的，公司没人能看懂怎么办？&lt;/li&gt;
&lt;li&gt;C 我看待解决的 Issues 还有很多，有没有去了解过？&lt;/li&gt;
&lt;li&gt;这个组件在性能方面你是否了解过？&lt;/li&gt;
&lt;li&gt;开源的免费版本不支持集群怎么办？&lt;/li&gt;
&lt;li&gt;如果彻底要自己写这个组件有没有可能性？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;整体设计上会做到的 TPS、QPS 和 RT 是多少？&lt;/li&gt;
&lt;li&gt;随着数据量的增大系统性能会不会出现明显问题？&lt;/li&gt;
&lt;li&gt;系统哪个环节会是最大的瓶颈？&lt;/li&gt;
&lt;li&gt;是否打算做压力测试，压力测试方案是怎么样的？&lt;/li&gt;
&lt;li&gt;怎么提高前端用户的访问流畅性？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可伸缩性
&lt;ul&gt;
&lt;li&gt;每一个环节是否都是可以横向扩展的？&lt;/li&gt;
&lt;li&gt;扩容需要怎么做手动还是自动？&lt;/li&gt;
&lt;li&gt;数据库不能横向扩展怎么办？&lt;/li&gt;
&lt;li&gt;纵向扩展有多少效果？&lt;/li&gt;
&lt;li&gt;横向扩展是否是线性的？&lt;/li&gt;
&lt;li&gt;扩展后是否可以提高响应速度？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;灵活性
&lt;ul&gt;
&lt;li&gt;是否有了解过产品层面以后会怎么发展？&lt;/li&gt;
&lt;li&gt;模块 A 是否能拆分出去独立为其它业务服务？&lt;/li&gt;
&lt;li&gt;模块 B 是否可以替换为另一种第三方数据源？&lt;/li&gt;
&lt;li&gt;如果流程有变，需要多大的工作量来适应？&lt;/li&gt;
&lt;li&gt;业务是否可以做到可配？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可扩展性
&lt;ul&gt;
&lt;li&gt;为什么 A 和 B 都有差不多的逻辑？&lt;/li&gt;
&lt;li&gt;是否考虑到了 A 业务的实现以后还有 B 的可能性？&lt;/li&gt;
&lt;li&gt;如果现在有两种策略以后扩展到了八种策略怎么做？&lt;/li&gt;
&lt;li&gt;以后是否可以把这个业务的 H5 前端适配到 PC？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性
&lt;ul&gt;
&lt;li&gt;是否架构中有单点？&lt;/li&gt;
&lt;li&gt;故障转移是怎么实现的？&lt;/li&gt;
&lt;li&gt;集群内部故障转移需要多久？&lt;/li&gt;
&lt;li&gt;MQ 或存储出现问题的时候系统会怎么样？&lt;/li&gt;
&lt;li&gt;MQ 或存储出现问题又恢复了系统是否会自己恢复？&lt;/li&gt;
&lt;li&gt;是否考虑过异地故障转移的方案？&lt;/li&gt;
&lt;li&gt;是否考虑过多活的方案？&lt;/li&gt;
&lt;li&gt;是否有数据丢失的可能性？&lt;/li&gt;
&lt;li&gt;数据丢失后是否可以恢复？&lt;/li&gt;
&lt;li&gt;系统彻底挂了对其它业务的影响是什么？&lt;/li&gt;
&lt;li&gt;系统彻底挂了是否可以有线下的方式走业务？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全性
&lt;ul&gt;
&lt;li&gt;是否彻底避免 SQL 注入和 XSS？&lt;/li&gt;
&lt;li&gt;是否做了风控策略？&lt;/li&gt;
&lt;li&gt;是否有防刷保护机制？&lt;/li&gt;
&lt;li&gt;数据库拖库了会怎么样？&lt;/li&gt;
&lt;li&gt;是否有数据泄露的可能性？&lt;/li&gt;
&lt;li&gt;数据的权限怎么控制的？&lt;/li&gt;
&lt;li&gt;功能的权限是怎么控制的？&lt;/li&gt;
&lt;li&gt;是否做了日志审计？&lt;/li&gt;
&lt;li&gt;受到了 DDOS 攻击怎么办？&lt;/li&gt;
&lt;li&gt;数据传输是否加密验签？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;兼容性
&lt;ul&gt;
&lt;li&gt;老的系统打算怎么办？&lt;/li&gt;
&lt;li&gt;怎么进行新老系统替换？&lt;/li&gt;
&lt;li&gt;新老系统能否来回切换？&lt;/li&gt;
&lt;li&gt;别的系统怎么连接你这套新服务？&lt;/li&gt;
&lt;li&gt;上下游依赖是否梳理过，影响范围多大？&lt;/li&gt;
&lt;li&gt;上下游改造的难度怎么样？&lt;/li&gt;
&lt;li&gt;上下游改造有排期吗？&lt;/li&gt;
&lt;li&gt;上下游改造的计划和通知时间确定了吗？&lt;/li&gt;
&lt;li&gt;使用了新的数据源数据怎么迁移？&lt;/li&gt;
&lt;li&gt;使用了新的技术老项目开发能否适应？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;弹性处理
&lt;ul&gt;
&lt;li&gt;这个数据重复消费会怎么样？&lt;/li&gt;
&lt;li&gt;这个接口重复调用会怎么样？&lt;/li&gt;
&lt;li&gt;是否考虑了服务降级？哪些业务支持降级？&lt;/li&gt;
&lt;li&gt;是否考虑了服务熔断？熔断后怎么处理？&lt;/li&gt;
&lt;li&gt;是否考虑了服务限流？限流后客户端表现怎么样？&lt;/li&gt;
&lt;li&gt;队列爆仓会怎么样？&lt;/li&gt;
&lt;li&gt;是否考虑了隔离性？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事务性
&lt;ul&gt;
&lt;li&gt;这段业务由谁保证事务性？&lt;/li&gt;
&lt;li&gt;数据库事务回滚后会怎么样？&lt;/li&gt;
&lt;li&gt;服务调用了失败怎么办？&lt;/li&gt;
&lt;li&gt;队列补偿怎么做的？&lt;/li&gt;
&lt;li&gt;服务调用补偿怎么做的？&lt;/li&gt;
&lt;li&gt;数据补偿实现最终一致需要多久？&lt;/li&gt;
&lt;li&gt;在数据不完整的时候用户会感知到吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可测试性
&lt;ul&gt;
&lt;li&gt;测试环境和线上的差异多大？&lt;/li&gt;
&lt;li&gt;是否支持部署多套隔离的测试环境？&lt;/li&gt;
&lt;li&gt;是否打算做单元测试，覆盖率目标是多少？&lt;/li&gt;
&lt;li&gt;测试黑盒白盒工作量的比例是怎么样的？&lt;/li&gt;
&lt;li&gt;是否支持接口层面的自动化测试？&lt;/li&gt;
&lt;li&gt;是否有可能做UI自动化测试？&lt;/li&gt;
&lt;li&gt;压测怎么造数据？&lt;/li&gt;
&lt;li&gt;是否可以在线上做压测？&lt;/li&gt;
&lt;li&gt;线上压测怎么隔离测试数据？&lt;/li&gt;
&lt;li&gt;是否有测试白名单功能？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可运维性
&lt;ul&gt;
&lt;li&gt;每一个组件对服务器哪方面的压力会最大？&lt;/li&gt;
&lt;li&gt;重新搭建整套系统最快需要多少时间？&lt;/li&gt;
&lt;li&gt;系统是否可以完全基于源代码构建？&lt;/li&gt;
&lt;li&gt;系统是否有初始化或预热的环节？&lt;/li&gt;
&lt;li&gt;系统里哪些环节需要人工参与？&lt;/li&gt;
&lt;li&gt;数据是否需要定期归档处理？&lt;/li&gt;
&lt;li&gt;会不会有突发的数据量业务量增大？&lt;/li&gt;
&lt;li&gt;随着时间的推移如果压力保持不变的话系统需要怎么来巡检和维护？&lt;/li&gt;
&lt;li&gt;怎么在容器里进行部署？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;监控
&lt;ul&gt;
&lt;li&gt;业务层面哪些指标需要监控和报警？&lt;/li&gt;
&lt;li&gt;应用层面系统内部是否有暴露了一些指标作监控和报警？&lt;/li&gt;
&lt;li&gt;系统层面使用的中间件和存储是否有监控报警？&lt;/li&gt;
&lt;li&gt;是否所有环节都接入了全链路跟踪？&lt;/li&gt;
&lt;li&gt;出现报警的时候应该由谁来处理？&lt;/li&gt;
&lt;li&gt;每一个模块是否有固定的主要和次要负责人？&lt;/li&gt;
&lt;li&gt;有没有可能系统出了问题无法通过监控指标体现？&lt;/li&gt;
&lt;li&gt;哪些指标需要上大屏由监控进行7*24监控？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mysql-10&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mysql-10&quot;&gt;¶&lt;/a&gt;mysql&lt;/h2&gt;
&lt;p&gt;使用delete删除mysql数据的时候，mysql并没有把数据文件删除，而是将数据文件的标识位删除，没有整理文件，因此不会彻底释放空间。被删除的数据将会被保存在一个链接清单中，当有新数据写入的时候，mysql会利用这些已删除的空间再写入。即，删除操作会带来一些数据碎片，正是这些碎片在占用硬盘空间。 -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;optimize table table_name
alter table table_name engine=engine_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该方法通常用于切换表的引擎，例如MyISAM转为InnoDB，但是同样适用于释放表空间，只不过切换后的引擎和原来的engine相同罢了。&lt;/p&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这两种方式都适用于我们常用的表，myisam和innodb。&lt;/li&gt;
&lt;li&gt;优化表的时候会锁表，数据表越大，耗时越长，因此不要在网站忙时进行表优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL进阶三板斧（三）看清“触发器 (Trigger)”的真实面目&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/158670286&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/158670286&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to detect rows with chinese characters in MySQL?&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/9795137/how-to-detect-rows-with-chinese-characters-in-mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/9795137/how-to-detect-rows-with-chinese-characters-in-mysql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notice the Chinese Character is from E4 to E9, hence we use the code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select number 
from Chinese_Test
where HEX(contents) REGEXP &#39;^(..)*(E[4-9])&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;python-8&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#python-8&quot;&gt;¶&lt;/a&gt;python&lt;/h2&gt;
&lt;p&gt;如何使用Python画QQ图&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/neweastsun/article/details/125859614&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/neweastsun/article/details/125859614&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np

np.random.seed(0)
data = np.random.normal(0,1, 1000)

import statsmodels.api as sm
import matplotlib.pyplot as plt

fig = sm.qqplot(data, line=&#39;45&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;QQ 图的 X 轴是理论分位数，这意味着显示不是实际数据，而是实际数据在正态分布下的位置。&lt;br&gt;
Y 轴显示实际数据。这意味着如果数据值沿45度角的大致直线下降，那么数据分布服从正态分布。&lt;/p&gt;
&lt;p&gt;一文让你彻底搞懂最小二乘法（超详细推导）&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/MoreAction_/article/details/106443383&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/MoreAction_/article/details/106443383&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用Python实现最小二乘算法&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/115648166&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/115648166&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_43693650/article/details/120295362&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_43693650/article/details/120295362&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_44231148/article/details/107149604&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_44231148/article/details/107149604&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/NanShan2016/p/5493429.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/NanShan2016/p/5493429.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from scipy.optimize import leastsq

def fun(p,x): #回归模型函数
    k,b = p
    return k*x+b

def error(p,x,y): #误差
    return fun(p,x)-y

p0 = np.array([1,3])
para = leastsq(error,p0,args=(Xi,Yi))

k,b = para[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;现实生活中我们可以利用最小二乘法解决更为复杂的问题。&lt;/li&gt;
&lt;li&gt;比方说有一个未知系数的二元二次函数 f(x,y)=w0x^2+w1y^2+w2xy+w3x+w4y+w5，这里 w0~w5 为未知的参数，为了确定下来这些参数，将会给定一些样本点 (xi,yi,f(xi,yi))，然后通过调整这些参数，找到这样一组 w0~w5，使得这些所有的样本点距离函数f(x,y)的距离平方之和最小。&lt;/li&gt;
&lt;li&gt;至于具体用何种方法来调整这些参数呢？有一种非常普遍的方法叫“梯度下降法”，它可以保证每一步调整参数，都使得f(x,y)朝比当前值更小的方向走，只要步长 α 选取合适，我们就可以达成这种目的。&lt;/li&gt;
&lt;li&gt;而这里不得不提的就是神经网络了。神经网络其实就是不断调整权值 w 和偏置 b，来使得cost函数最小，从这个意义上来讲它还是属于最小二乘法。&lt;/li&gt;
&lt;li&gt;更为可爱的一点是，神经网络的调参用到的仍是梯度下降法，其中最常用的当属随机梯度下降法。&lt;/li&gt;
&lt;li&gt;而后面伟大的 bp 算法，其实就是为了给梯度下降法做个铺垫而已，bp 算法的结果是 cost 函数对全部权值和全部偏置的偏导，而得知了这些偏导，对于各个权值 w 和偏置 b 该走向何方就指明了方向。&lt;/li&gt;
&lt;li&gt;因此，最小二乘法在某种程度上无异于机器学习中基础中的基础，且具有相当重要的地位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线性回归是确定两种及两种以上变量的相互依赖关系。在数据分析中，线性回归是最简单且最有效的分析方法。&lt;br&gt;
举个简单的例子，某商品的利润在售价为 2 元、5 元、10 元时分别为 4 元、10 元、20 元，我们很容易得出商品的利润与售价的关系符合直线：y=2x. 在上面这个简单的一元线性回归方程中，我们称 “2” 为回归系数，即斜率为其回归系数，回归系数表示商品的售价(x)每变动一个单位，其利润(y)与之对应的变动关系。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from numpy.linalg import inv  # 矩阵求逆
from numpy import dot  # 矩阵点乘
X = np.array([[1],[2],[3]])
Y = 2*X
#theta = (X.T*X)^-1X.T*Y
theta = dot(dot(inv(dot(X.T,X)),X.T),Y)
print(theta)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即X的转置与X点乘，再求逆， 再与X的转置点乘，再与Y点乘，一层层加括号即可。&lt;/p&gt;
&lt;p&gt;python实现线性回归之最小二乘法，最小二乘法详解&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/m0_38075425/article/details/90738415/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/m0_38075425/article/details/90738415/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thonny，更适合青少年学习编程的IDE工具。&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/464253266?utm_id=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/464253266?utm_id=0&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 编程工具比较多样，像比较入门的 Mu Editor，项目在用的 Pycharm、Pydev 等等&lt;/li&gt;
&lt;li&gt;Thonny 由爱沙尼亚的 Tartu 大学开发，它的调试器是专为学习和教学编程而设计的，针对初学者学习 Python 语言优化了很多工具上的方式和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;错误处理&lt;br&gt;
Go&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func main() {
   f, err := ioutil.ReadFile(&amp;quot;test.xml&amp;quot;)
   if err != nil {
      fmt.Println(err)
   } else {
      fmt.Println(f)
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn main() {
    let f = File::open(&amp;quot;hello.txt&amp;quot;);
    match f {
        Ok(file) =&amp;gt; {
            println!(&amp;quot;File opened successfully.&amp;quot;);
        },
        Err(err) =&amp;gt; {
            println!(&amp;quot;Failed to open the file.&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try {
    File file = new File(&amp;quot;test.txt&amp;quot;);
    FileReader reader = new FileReader(file);
} catch (FileNotFoundException e) {
    System.out.println(&amp;quot;文件不存在！&amp;quot;);
} catch (IOException e) {
    System.out.println(&amp;quot;文件读取失败！&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NodeJs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fs.readFile(&#39;file.txt&#39;, &#39;utf8&#39;, function (err, data) {
    if (err) rerurn console.log(err);
    console.log(data)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好的，对于普通可逆的矩阵，我们可以使用高斯-约当消元法来计算它的逆矩阵。这个算法包括三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造增广矩阵：将一个大小为 (N, 2N) 的增广矩阵创建为原始矩阵和单位矩阵的水平拼接。&lt;/li&gt;
&lt;li&gt;对增广矩阵进行行变换：通过一系列行变换将增广矩阵变成上三角形矩阵。&lt;/li&gt;
&lt;li&gt;反向代入：通过反向代入的方式，将上三角形矩阵转换成单位矩阵，同时右侧的部分即为原始矩阵的逆矩阵。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个用 Rust 实现这个函数的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;matrix_inverse&lt;/span&gt;&lt;/span&gt;(matrix: &lt;span class=&quot;built_in&quot;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;f64&lt;/span&gt;&amp;gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;f64&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n = matrix.len();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 构造增广矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; augmented_matrix = &lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * n]; n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            augmented_matrix[i][j] = matrix[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        augmented_matrix[i][i + n] = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 行变换，将增广矩阵变成上三角形矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; augmented_matrix[i][i] == &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果主对角线上的元素为零，则矩阵不可逆&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ratio = augmented_matrix[j][i] / augmented_matrix[i][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                augmented_matrix[j][k] -= ratio * augmented_matrix[i][k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 反向代入，将上三角形矩阵变成单位矩阵以及右侧的部分即为逆矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..n).rev() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += augmented_matrix[i][k] * augmented_matrix[k][j + n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            augmented_matrix[i][j + n] = (augmented_matrix[i][j + n] - sum) / augmented_matrix[i][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        augmented_matrix[i][i] = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 对角线上的元素变成1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 提取逆矩阵部分并返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; inverse_matrix = &lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;; n]; n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;..n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            inverse_matrix[i][j] = augmented_matrix[i][j + n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;literal&quot;&gt;Some&lt;/span&gt;(inverse_matrix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; matrix = &lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; inverse_matrix = matrix_inverse(matrix).unwrap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;:?&amp;#125;&quot;&lt;/span&gt;, inverse_matrix);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以将你的矩阵作为参数传递给 &lt;code&gt;matrix_inverse&lt;/code&gt; 函数，并得到其逆矩阵作为返回值。请注意，这个函数假设矩阵是可逆的，并且不对输入进行验证。&lt;/p&gt;
&lt;p&gt;OAuth2.0 原理流程及其单点登录和权限控制&lt;br&gt;
&lt;a href=&quot;https://kefeng.wang/2018/04/06/oauth2-sso/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://kefeng.wang/2018/04/06/oauth2-sso/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;游戏-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#游戏-2&quot;&gt;¶&lt;/a&gt;游戏&lt;/h2&gt;
&lt;p&gt;Rpg maker 教程1：RM系列软件异同&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/59197226&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/59197226&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;java-7&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-7&quot;&gt;¶&lt;/a&gt;java&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wdays83892469/article/details/126216765&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wdays83892469/article/details/126216765&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java AOT 在经过一波三折的发展后，目前最为成熟可行的方案就是 GraalVM Native Image，它所带来的优势是显著的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更快的启动速度、&lt;/li&gt;
&lt;li&gt;更小的内存消耗、&lt;/li&gt;
&lt;li&gt;脱离JVM独立运行 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但对应的，它也存在着非常多的限制，尤其是在充满了反射等动态特性的 Java 工程生态圈，很难得到大规模的广泛应用。&lt;/p&gt;
&lt;p&gt;总的来说，Java AOT目前是有着明确使用场景的一种技术，主要可以应用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写命令行 CLI 程序，希望程序可以完整独立运行而不是需要额外安装JVM。&lt;/li&gt;
&lt;li&gt;运行环境资源严重受限的场景，例如 IoT 设备、边缘计算等场景。&lt;/li&gt;
&lt;li&gt;希望追求极致的启动速度，并且应用逻辑相对足够轻量，如 FaaS。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java 9 ~Java 17 主要更新了什么？&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/513873484/answer/2328624634&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/513873484/answer/2328624634&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot 最新版3.x 集成 OAuth 2.0实现认证授权服务、第三方应用客户端以及资源服务&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/friendlytkyj/article/details/128889875&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/friendlytkyj/article/details/128889875&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hxx688/article/details/127035172&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/hxx688/article/details/127035172&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_50909707/article/details/127165284&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_50909707/article/details/127165284&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Security OAuth停更了？探索官方进化版Spring Authorization Server的革新之处！&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/citywu123/article/details/131080947&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/citywu123/article/details/131080947&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth2一些常见问题的QA&lt;br&gt;
&lt;a href=&quot;https://felord.cn/oauth2-qa.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://felord.cn/oauth2-qa.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端-4&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前端-4&quot;&gt;¶&lt;/a&gt;前端&lt;/h2&gt;
&lt;p&gt;Chrome 80.0中将SameSite的默认值设为Lax,对现有的Cookie使用有什么影响?&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/373011996/answer/2442976854?utm_id=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/373011996/answer/2442976854?utm_id=0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Marketing Secrets Apple &amp;amp; Tesla Always Use: Rory Sutherland | E165&lt;br&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=Hz3RWxJck68&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youtube.com/watch?v=Hz3RWxJck68&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;后台&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#后台&quot;&gt;¶&lt;/a&gt;后台&lt;/h2&gt;
&lt;p&gt;Fast, secure data deduplication solutions&lt;br&gt;
&lt;a href=&quot;https://redis.com/solutions/use-cases/deduplication/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://redis.com/solutions/use-cases/deduplication/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RedisBloom: Probabilistic Data Structures for Redis&lt;br&gt;
&lt;a href=&quot;https://github.com/RedisBloom/RedisBloom&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/RedisBloom/RedisBloom&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;bloom filter之所以能做到在时间和空间上的效率比较高，是因为牺牲了判断的准确率、删除的便利性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在误判，可能要查到的元素并没有在容器中，但是 hash 之后得到的k个位置上值都是 1。
&lt;ul&gt;
&lt;li&gt;如果 bloom filter 中存储的是黑名单，那么可以通过建立一个白名单来存储可能会误判的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除困难。一个放入容器的元素映射到 bit 数组的 k 个位置上是1，删除的时候不能简单的直接置为0，可能会影响其他元素的判断。
&lt;ul&gt;
&lt;li&gt;可以采用Counting Bloom Filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试&lt;br&gt;
235w url， 占内存才 14M&lt;/p&gt;
&lt;p&gt;Redis：HyperLogLog使用与应用场景&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/445885116&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/445885116&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;布隆过滤器的误判率该如何计算？ - 领创集团Advance Group的回答 - 知乎&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/38573286/answer/2750794079&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/38573286/answer/2750794079&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;过滤器中有 1 亿个元素, k 取值为 14，那么需要空间约为 20 亿 bit ( 238MB )&lt;br&gt;
误报率是2.019*10^9&lt;/p&gt;
&lt;h2 id=&quot;期权&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#期权&quot;&gt;¶&lt;/a&gt;期权&lt;/h2&gt;
&lt;p&gt;买近卖远，卖近买远——好难把握的日历价差&lt;br&gt;
&lt;a href=&quot;http://options.hexun.com/2020-11-06/202380118.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://options.hexun.com/2020-11-06/202380118.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;买近卖远&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图形和买跨有些类似， 都是中间震荡会亏损，两边大幅突破会盈利。但是稍微带点曲度。&lt;/li&gt;
&lt;li&gt;认购日历来说，如果大涨，希望近月涨的多，远月涨得少，那就赚了；&lt;/li&gt;
&lt;li&gt;如果大跌，希望近月跌有限，远月跌的多点，那也还是赚的。&lt;/li&gt;
&lt;li&gt;如果一直震荡，平值期权到期归零，远月还有价值，则整体可能亏损。&lt;/li&gt;
&lt;li&gt;买近卖远的目的还有一个
&lt;ul&gt;
&lt;li&gt;就是希望在远月波动率比较高的时候（希腊字母vega相关），能赚取远月降波的收益&lt;/li&gt;
&lt;li&gt;同时，近月的gamma比较高，希望波动大点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;卖近买远&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图形类似于卖跨的损益图。&lt;/li&gt;
&lt;li&gt;希望标的近期震荡，然后再涨或者跌，把近月时间价值损耗完。&lt;/li&gt;
&lt;li&gt;通常笔者用于卖方末日轮的对冲。&lt;/li&gt;
&lt;li&gt;还可以赚取远月升波的收益。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;策略难点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该组合的价差，在日内基本上横在一个数值附近，远月近月合约涨跌的金额基本对等~全天来看，收益极少。&lt;/li&gt;
&lt;li&gt;日历策略的影响因素比较多：
&lt;ul&gt;
&lt;li&gt;近月远月合约的涨跌金额&lt;/li&gt;
&lt;li&gt;近月远月合约的波动率升降规律&lt;/li&gt;
&lt;li&gt;上涨时谁上涨的多，下跌时谁下跌的少。&lt;/li&gt;
&lt;li&gt;标的窄幅震荡时，这个因素更没有可控性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期权卖方终极指南-第七章：如何正确交易日历价差&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/443166257&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/443166257&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本章将主要讨论做多日历价差，也就是买入远期的认购合约 卖出近月认购合约。&lt;/p&gt;
&lt;p&gt;日历价差的最大亏损就是建仓付出的权利金之差，比如上述苹果的例子，每组损失 = 340美元。&lt;/p&gt;
&lt;p&gt;平值日历价差的希腊字母如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delta 中性 - 建仓时我们对于股价运动方向不敏感&lt;/li&gt;
&lt;li&gt;空 Gamma - 快速的上涨或下跌将使我们亏损&lt;/li&gt;
&lt;li&gt;多 Theta - 其他条件不变时，随着时间的推移我们会挣钱&lt;/li&gt;
&lt;li&gt;多 vega - 隐波上升时我们会挣钱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认为日历价差实际上多 vega 实际上是大多数人犯的错误&lt;/li&gt;
&lt;li&gt;日历价差的真正意义 - 针对远期隐波(Forward Volatility）下注&lt;/li&gt;
&lt;li&gt;日历价差实际上是在交易 gamma 和 vega 的相对值。&lt;/li&gt;
&lt;li&gt;可以认为日历价差做空 gamma 的同时用 vega 对冲，或者说针对远期隐波下注。&lt;/li&gt;
&lt;li&gt;7 月合约的损益主要来自 gamma，而 9 月合约的损益主要来自 vega。&lt;/li&gt;
&lt;li&gt;实际上，在日历价差中，波动率的变化带来的盈亏，会被期限结构完全对冲。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假如你得到消息某个制药公司将要在 9 月 1 日公布一个新药，此时不同合约的隐波如下：&lt;/p&gt;
&lt;p&gt;七月 = 30%&lt;br&gt;
八月 = 30%&lt;br&gt;
九月 = 30%&lt;br&gt;
十月 = 30%&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在我们知道 9 月份会有一个大新闻，其他人并不知道。因此 9 月合约的隐波应该比现在的更高才对，那么我们就卖出八月合约同时买入九月合约。&lt;/li&gt;
&lt;li&gt;这样，当新药公布后 9 月合约的隐波将会上涨，我们的日历价差组合也会盈利。&lt;/li&gt;
&lt;li&gt;究其原因，这种隐波的变化并非是跨期的，近月的隐波没有变化。我们建立组合时买入的远期隐波 = 30%，而八月结束后，隐波上升了，所以我们赚钱了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;波动率锥可以帮我们评估对于同一行权价的合约，哪个到期日的合约的隐波被高估或者低估。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如说如果我们看到一张合约 30 日到期的隐波 = 80， 120 日到期的隐波 = 80，&lt;/li&gt;
&lt;li&gt;由于期限结构的存在，我们可以认为 120 日的隐波被高估了，特别是当股票的实际波动 = 100时，30 日隐蔽显然被低估了。&lt;/li&gt;
&lt;li&gt;对于这种情况，我们应该做空日历价差，卖出 120 日合约 + 买入 30 日合约。&lt;/li&gt;
&lt;li&gt;这个组合表达的观点是，gamma 相对于 vega 更便宜，所以我们做多 gamma，做空 vega。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讲讲低风险套利——日历价差&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/375927451&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/375927451&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么是波动率？它代表市场上人心的看法，买的人多就会升波，卖的人多就会降波。&lt;/p&gt;
&lt;p&gt;围绕做空波动率这个核心，我们开展开讲讲什么时候做正（卖近买远），什么时候做反（买近卖远）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果股市一直打横，那所有合约波动率将趋于统一。股市震荡才是常态，高位似尖峰，终将回落。&lt;/li&gt;
&lt;li&gt;如果市场认为最近市场要跌（买沽多），沽合约近月合约波动率先行升波，远月合约波动率滞后后行，反之亦然&lt;/li&gt;
&lt;li&gt;如果市场认为最近市场跌无可跌（卖沽多），那沽合约近月波动率会降得比远月更低&lt;/li&gt;
&lt;li&gt;远月合约价值高，一旦升波增长幅度会更大，反之亦然&lt;/li&gt;
&lt;li&gt;近月合约时间价值消减数倍于远月&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由上述原因我根据观察推出几个心得：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果近月波高，远月波低，那我们做正日历（卖近买远）。正日历乃王道，它完美贴合第1、4、5点的理念。因此它收益是最高的。&lt;/li&gt;
&lt;li&gt;如果近月波低，远月波高，那我们做反日历（买近卖远）。反日历做为正日历的补充，因为第2、3点的关系，它更温和稳健，回撤也更小。&lt;/li&gt;
&lt;li&gt;市场不可能又看涨（购合约），又看跌（沽合约），所以它们购沽双方经常一个适合做正，一个适合做反。可互为补充来选择适合自己的组合。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;english&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#english&quot;&gt;¶&lt;/a&gt;english&lt;/h2&gt;
&lt;p&gt;余光中：怎样改进英式中文？- 论中文的常态与变态&lt;br&gt;
&lt;a href=&quot;https://open.leancloud.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202306</title>
    <link href="http://blog.ihuhao.com/2023/06/06/202306/"/>
    <id>http://blog.ihuhao.com/2023/06/06/202306/</id>
    <published>2023-06-06T05:37:33.000Z</published>
    <updated>2023-08-21T02:17:45.289Z</updated>
    
    <content type="html">&lt;h2 id=&quot;linux-10&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linux-10&quot;&gt;¶&lt;/a&gt;linux&lt;/h2&gt;
&lt;p&gt;ModSecurity3_Nginx 指南&lt;br&gt;
&lt;a href=&quot;https://www.jianshu.com/p/d22f3914d153&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/d22f3914d153&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;理财-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#理财-2&quot;&gt;¶&lt;/a&gt;理财&lt;/h2&gt;
&lt;h3 id=&quot;加仓方法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#加仓方法&quot;&gt;¶&lt;/a&gt;加仓方法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/vBI_JG20xEDiWaqKVc8NXw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/vBI_JG20xEDiWaqKVc8NXw&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定投加仓法:
&lt;ul&gt;
&lt;li&gt;每个月设定一个或者多个定投日，只在定投日买入基金固定的金额。&lt;/li&gt;
&lt;li&gt;适合于那些没有过多时间精力投入到研究市场估值、宏观经济状况等因素的投资者。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指数加仓法:
&lt;ul&gt;
&lt;li&gt;根据单日指数的跌幅来决定是否加仓的。&lt;/li&gt;
&lt;li&gt;这最好是有纪律性的，而不是凭感觉。
&lt;ul&gt;
&lt;li&gt;比如当单日跌幅大于某个数值，就可以加仓；&lt;/li&gt;
&lt;li&gt;或者近几日跌幅大于某个数值，就加仓。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沪深 300 指数近 20 年单日跌幅超过一定比例的次数和概率
&lt;ul&gt;
&lt;li&gt;单日跌幅超过 1% 的有 954 次，发生的概率是 20%；&lt;/li&gt;
&lt;li&gt;单日跌幅超 2% 的有 368 次，发生概率是 8%。&lt;/li&gt;
&lt;li&gt;具体按多少加仓，就看你想触发的加仓概率是多少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为了防止市场跌跌不休，指数的跌幅一直超过设定的参数，还需要加一个参数，
&lt;ul&gt;
&lt;li&gt;即“ n 个交易日不重复触发”，通常可以选择 3、5、10 个交易日。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正金字塔加仓法:
&lt;ul&gt;
&lt;li&gt;简单地说，就是跌的越多，买的也越多。&lt;/li&gt;
&lt;li&gt;例如，投资者可以把资金分为6份，
&lt;ul&gt;
&lt;li&gt;当下跌达10%时，加仓一份，也就是1/6。&lt;/li&gt;
&lt;li&gt;当下跌达20%时，加仓两份，也就是2/6。&lt;/li&gt;
&lt;li&gt;当下跌达30%时，加仓三份，也就是3/6。&lt;/li&gt;
&lt;li&gt;当然了，在按批次加过仓后，如果你还有充足的资金，可以继续加仓，&lt;br&gt;
一直到你觉得市场不在被低估为止，结束加仓。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这种加仓的方法需要在开始投资之前，就确立好准备投入的总资金额，以便于将资金分配。&lt;/li&gt;
&lt;li&gt;到底跌多少再加仓，最好结合基金的回撤，这就引申到了下一个加仓方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回撤加仓法：
&lt;ul&gt;
&lt;li&gt;根据基金的回撤来买入。可以是等额买入，也可以是正金字塔买入。&lt;/li&gt;
&lt;li&gt;第一种，把 1 万元分成三等份，每跌 10%，补一份，就属于等额买入。&lt;/li&gt;
&lt;li&gt;第二种，把 1 万元分成三份，注意不是三等份，
&lt;ul&gt;
&lt;li&gt;第一份占资金的 1/6，第二份占资金的 2/6，第三份占资金的 3/6，&lt;/li&gt;
&lt;li&gt;这就属于正金字塔买入，拉低成本价的效果更加明显。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果基金没跌这么多呢，比如跌了20%，万一只补仓了一点怎么办？
&lt;ul&gt;
&lt;li&gt;假设跌 14%，补仓 = 10000*14%/42%=3333.33 元；&lt;/li&gt;
&lt;li&gt;然后跌到 20% 的时候，还可以补仓，补仓金额 = 10000*20%/42% - 第一次补仓的金额&lt;br&gt;
= 4761.90-3333.33=1428.57 元。&lt;/li&gt;
&lt;li&gt;如果跌到 25%，还可以继续补。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对比：
&lt;ul&gt;
&lt;li&gt;定投加仓法
&lt;ul&gt;
&lt;li&gt;优势: 简单易操作、适合小白和繁忙上班族、资金支出稳定&lt;/li&gt;
&lt;li&gt;劣势：缺少对于市场估值的判断、跌幅较大的时候买的少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正金字塔式加仓法
&lt;ul&gt;
&lt;li&gt;优势：更低的持仓成本、总资金量确定、 可以与回撤加仓法搭配使用&lt;/li&gt;
&lt;li&gt;劣势：小回撒导致加仓不足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回撤加仓法
&lt;ul&gt;
&lt;li&gt;优势：资金投入灵活、参照历史最大回撒跌也不慌&lt;/li&gt;
&lt;li&gt;劣势：极端行情导致回撒超出、需较多精力跟踪回撒，小回撒导致加仓不足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指数加仓法
&lt;ul&gt;
&lt;li&gt;优势：直观易懂，明确下跌带来的机遇&lt;/li&gt;
&lt;li&gt;劣势：特定基金与指数相关性低，资金量不确定，跌幅闭值设罟难度大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;雷公&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#雷公&quot;&gt;¶&lt;/a&gt;雷公&lt;/h3&gt;
&lt;p&gt;趋势交易流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前趋势的方向是怎样的？&lt;/li&gt;
&lt;li&gt;趋势的斜率（时钟方向）是怎样的？&lt;/li&gt;
&lt;li&gt;你打算交易的方向是怎样的？&lt;/li&gt;
&lt;li&gt;你的预期是怎样的？&lt;/li&gt;
&lt;li&gt;满足怎样的条件止盈出局？&lt;/li&gt;
&lt;li&gt;你的底线是什么？&lt;/li&gt;
&lt;li&gt;满足怎样的条件止损出局？&lt;/li&gt;
&lt;li&gt;根据5、7两项计算理论盈亏比。&lt;/li&gt;
&lt;li&gt;这笔交易你能承受的最大亏损金额是多少？&lt;/li&gt;
&lt;li&gt;根据9.来确定持有头寸数量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我的持仓构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，大盘指数是机会成本，这部分投资占比30%以上；&lt;/li&gt;
&lt;li&gt;其次，个股投资主要分为两类：
&lt;ul&gt;
&lt;li&gt;1）垄断巨头企业（长期持有）和&lt;/li&gt;
&lt;li&gt;2）动量交易（短期投机）。&lt;/li&gt;
&lt;li&gt;个股投资部分占比不超过30%；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此外，我还持有30%左右的固定收益类品种，以此获取日常现金流。&lt;/li&gt;
&lt;li&gt;最后，10% 左右的备用金，以防不测。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日常现金流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为职业投资者，我的日常现金流主要就是来自固定收益类品种。&lt;/li&gt;
&lt;li&gt;持有债券还是持有高息存款，取决于两者的现金分红率的高低。&lt;/li&gt;
&lt;li&gt;目前我主要持有 GIC，平均利率在 4.5% 左右。&lt;/li&gt;
&lt;li&gt;最后，10% 备用金主要用于在市场不好的时候作对冲。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;趋势的五种类型与交易策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一类：1点钟～12点钟方向，斜率加速上涨的趋势。
&lt;ul&gt;
&lt;li&gt;这类属于斜率加速的行情，通常出现在趋势刚开始的阶段，或者是趋势即将结束的阶段。&lt;/li&gt;
&lt;li&gt;交易策略：
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;无持仓，不参与；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;有持仓，不急于兑现。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;关注市场转向的迹象，等待明确出现关键性波动之后再考虑兑现出局。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二类：2点半～1点钟方向，稳定的上涨趋势。
&lt;ul&gt;
&lt;li&gt;这类趋势的斜率稳定，可以走很长时间，是大行情的摇篮。&lt;/li&gt;
&lt;li&gt;交易策略：
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;趋势形成过程中，第一次回撤到短期均线、中期均线、长期均线，都是非常好的进入位置；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;回撤有可能击穿均线，但不应改变均线运行方向；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;进入时机：底部构造+低一级别多头排列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三类：2点半～3点半方向，横向整理姿态的趋势。
&lt;ul&gt;
&lt;li&gt;这种类型的趋势也称之为「密集成交区」，通常是大周期趋势的中途休息站。&lt;br&gt;
休整结束之后，通常会延续原有大周期趋势的方向。&lt;/li&gt;
&lt;li&gt;交易策略：
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;横向波动的时间要足够长、均线密集之后；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;在突破密集成交区之前完成了均线多头排列，可进入，赌突破。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四类：3点半～5点钟方向，稳定的下跌趋势。
&lt;ul&gt;
&lt;li&gt;这类趋势的方向与第二类相反，交易策略相同但方向相反。&lt;br&gt;
第五类：5点钟～6点钟方向，加速下跌的趋势。&lt;/li&gt;
&lt;li&gt;这类趋势的方向与第一类相反，交易策略相同但方向相反。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作个股是否需要以大盘指数为参考？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要。&lt;/li&gt;
&lt;li&gt;我的每一只股票都会有各自的止损或止盈位置的设定，这些设定并不依据大盘指数为参考。&lt;/li&gt;
&lt;li&gt;很多时候，大盘还处在弱势格局，但是有一些股票已经满足交易条件，我就会进入交易，不理会大盘。&lt;/li&gt;
&lt;li&gt;同理，很多时候，大盘尚处在强势，而我的股票却已经纷纷触发止盈止损出局，我同样也不会理会大盘。&lt;/li&gt;
&lt;li&gt;在大盘很弱的时候，满足进入条件的股票却越来越多，这说们市场即将走强。&lt;/li&gt;
&lt;li&gt;相反，当满足退出条件的股票越来越多，而大盘还处在强势，这种强势大概率是虚假的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雷公的 TradingView指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如圖所示，四個週期呈現在同一個界面上，附加黑綠K線、雙均線、抵扣價以及籌碼分布等指標。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tradingview.com/chart/fVnTylmi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.tradingview.com/chart/fVnTylmi/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;掌握这些概念，我想你会想明白很多事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;美元 是全球的资本成本，&lt;/li&gt;
&lt;li&gt;美债 是美元的资本成本，&lt;/li&gt;
&lt;li&gt;Bitcoin 反应投机资本的活跃度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;杂项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了反对而反对，这是初学交易者最容易犯的错误。&lt;/li&gt;
&lt;li&gt;优秀的交易者在头脑中同时存在正反两方面的意见，不断地自我博弈过程，动态调整方向。&lt;/li&gt;
&lt;li&gt;你不必反驳任何人的观点，没有人掌握真理，多数人只是在表达情绪。&lt;/li&gt;
&lt;li&gt;请记住，你最大的对手，就是你自己——不要让情绪降低了智商。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;杂项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在我的词典中是没有「主力」「大户」这类假想敌的。&lt;/li&gt;
&lt;li&gt;我每次亏损并不是有人故意陷害所致，事实上，往往是我没有计划的随机交易、或者有计划却未能坚决执行时对我的伤害最大。&lt;/li&gt;
&lt;li&gt;交易者最大的对手不是别人，就是你自己。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;杂项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交易，不是一场「猜涨跌」的游戏。&lt;/li&gt;
&lt;li&gt;交易，是一门生意。你需要知道怎样更容易赚到钱；&lt;/li&gt;
&lt;li&gt;你需要拥有一个在你睡觉时也能为你赚钱的系统；&lt;/li&gt;
&lt;li&gt;你需要界定你的退出机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;风险量化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交易资金管理的核心是风险数量化。 我的每一笔交易都设有止损价格。&lt;/li&gt;
&lt;li&gt;依据止损价格来明确每一笔交易的最大损失金额，由此倒算出我应该持有的头寸数量，这就是风险量化。&lt;/li&gt;
&lt;li&gt;每一笔交易都有对应的风险值，整个 Portfolio 的风险就可以数量化。&lt;/li&gt;
&lt;li&gt;这样就很清楚在极端情况下总体风险有多大。&lt;/li&gt;
&lt;li&gt;最重要的是，可以根据总体风险值来设计对冲策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;亏钱原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不懂看图，是绝大多数人在金融市场亏钱的主要原因；&lt;/li&gt;
&lt;li&gt;把图画得太复杂，是绝大多数会看图的人亏损的主要原因；&lt;/li&gt;
&lt;li&gt;试图找到一个决胜指标或者某个神奇数字，又是多数人在建立交易系统过程中亏钱的主要原因。&lt;/li&gt;
&lt;li&gt;在金融市场里长期获利，我认为以下两个认知非常重要。所有的方法工具都必须围绕这两点展开：
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;识别趋势。什么时候市场运动的方向对我有利，什么时候不利。不利的时候，不要参与或者出局；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;趋势对我有利的时候，要抱住不放。直到趋势开始对我不利。 简而言之：认清趋势，让时间成为朋友。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;币圈的繁荣，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）是建立在全球流动性泛滥基础上的，&lt;/li&gt;
&lt;li&gt;2）是传统投资领域（股市债市房地产）资本外溢的结果，&lt;/li&gt;
&lt;li&gt;3）在高速发展过程中的制度性漏洞被充裕的流动性掩盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做投资两件事最重要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，你必须要知道风险在哪，风险必须可以数量化；&lt;/li&gt;
&lt;li&gt;第二，你也必须要有办法对冲风险。有办法对冲的风险就不是风险，暂时没办法对冲的风险就不要去碰。&lt;/li&gt;
&lt;li&gt;本质上说，投资是在解决一系列风险问题的同时并获取回报的过程。&lt;/li&gt;
&lt;li&gt;风险越大、不确定性越大，你最终获取的回报也就越大。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;英语-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#英语-2&quot;&gt;¶&lt;/a&gt;英语&lt;/h2&gt;
&lt;p&gt;听力练习&lt;br&gt;
&lt;a href=&quot;https://www.youzack.com/ListeningExercise/Episode/3668/?mediaType=audio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.youzack.com/ListeningExercise/Episode/3668/?mediaType=audio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;腾讯微云网盘：&lt;br&gt;
&lt;a href=&quot;https://share.weiyun.com/ChATk7JK&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://share.weiyun.com/ChATk7JK&lt;/a&gt;&lt;br&gt;
请安装微云网盘客户端APP后，用客户端下载&lt;/p&gt;
&lt;p&gt;百度网盘：&lt;br&gt;
&lt;a href=&quot;https://pan.baidu.com/s/14ryQc0HVxSpzCGi9scQLaA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/14ryQc0HVxSpzCGi9scQLaA&lt;/a&gt;&lt;br&gt;
提取码：2021&lt;br&gt;
请安装百度网盘客户端APP后，用客户端下载&lt;/p&gt;
&lt;p&gt;听力课堂&lt;br&gt;
&lt;a href=&quot;https://www.tingclass.net/show-5026-9-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.tingclass.net/show-5026-9-1.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前端-6&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前端-6&quot;&gt;¶&lt;/a&gt;前端&lt;/h2&gt;
&lt;p&gt;傻傻分不清楚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nest (NestJS) 是一个用于构建高效、可扩展的 Node.js 服务器端应用程序的开发框架。&lt;/li&gt;
&lt;li&gt;NuxtJS 让你构建你的下一个 Vue.js 应用程序变得更有信心。这是一个 开源 的框架，让 web 开发变得简单而强大。&lt;/li&gt;
&lt;li&gt;Next.js 为您提供生产环境所需的所有功能以及最佳的开发体验：包括静态及服务器端融合渲染、 支持 TypeScript、智能化打包、 路由预取等功能 无需任何配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多语言、登录SSO、日志、健康检查全都有 &lt;a href=&quot;https://github.com/andrechristikan/ack-nestjs-boilerplate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/andrechristikan/ack-nestjs-boilerplate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JS原生—歌词滚动效果案例&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/llllllllolllllll/article/details/129340505&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/llllllllolllllll/article/details/129340505&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;font-size的改变就导致了元素几何信息的变化，几何信息的变化就意味着会导致reflow，会使页面重新布局，影响效率。 而transform 变形，并不是在渲染主线程中执行，不占用主线程，而是在合成线程中执行，最终的实现也是交给cpu，所以不会导致页面重新布局，不影响效率。&lt;/p&gt;
&lt;p&gt;Vue3中使用this&lt;br&gt;
&lt;a href=&quot;https://juejin.cn/post/7028386809939755021&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.cn/post/7028386809939755021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;const { proxy, ctx } = getCurrentInstance()&lt;/p&gt;
&lt;p&gt;Vue3中如何使用WeUI&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/wangyangnuli/article/details/121397759&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wangyangnuli/article/details/121397759&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install weui.js weui -S

import { createApp } from &#39;vue&#39;
import store from &#39;@/store&#39;
import weui from &#39;weui.js&#39;
import &#39;weui&#39;
import App from &#39;@/App.vue&#39;
import router from &#39;@/router&#39;
const app = createApp(App)
app.config.globalProperties.$weui = weui
app.use(store).use(router).mount(&#39;#app&#39;)


import { ref,getCurrentInstance } from &#39;vue&#39;
const $weui = proxy.$weui;

const test = () =&amp;gt; {
  $weui.alert(&amp;quot;服务器错误&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WeUI.JS 中文文档&lt;br&gt;
&lt;a href=&quot;https://www.kancloud.cn/ywfwj2008/weuijs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.kancloud.cn/ywfwj2008/weuijs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;十分钟，带你了解 Vue3 的新写法&lt;br&gt;
&lt;a href=&quot;https://juejin.cn/post/7225267685763907621&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.cn/post/7225267685763907621&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;weui 文档&lt;br&gt;
&lt;a href=&quot;https://weui.shanliwawa.top/weui/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://weui.shanliwawa.top/weui/index.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://weui.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://weui.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vue3&lt;br&gt;
&lt;a href=&quot;https://www.runoob.com/vue3/vue3-v-for.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.runoob.com/vue3/vue3-v-for.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;助你上手Vue3全家桶之Vue-Router4教程&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/pdd11997110103/article/details/121036684&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/pdd11997110103/article/details/121036684&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;游戏-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#游戏-3&quot;&gt;¶&lt;/a&gt;游戏&lt;/h2&gt;
&lt;p&gt;模拟器游戏下载&lt;br&gt;
&lt;a href=&quot;https://www.emulatorgames.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.emulatorgames.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;浏览器中的 n64 模拟器&lt;br&gt;
&lt;a href=&quot;https://www.neilb.net/n64wasm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.neilb.net/n64wasm/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;mysql-11&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mysql-11&quot;&gt;¶&lt;/a&gt;mysql&lt;/h2&gt;
&lt;p&gt;自从MySQL启动起来的QPS的平均值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Threads: 350  Questions: 112619252828  Slow queries: 1156228  Opens: 138939  Flush tables: 1  Open tables: 2048  Queries per second avg: 23283.127

if (!(uptime= (ulong) (thd-&amp;gt;start_time.tv_sec - server_start_time)))
    queries_per_second1000= 0;
else
    queries_per_second1000= thd-&amp;gt;query_id * 1000LL / uptime;

length = my_snprintf(buff, buff_len - 1,
                    &amp;quot;Uptime: %lu  Threads: %d  Questions: %lu  &amp;quot;
                    &amp;quot;Slow queries: %llu  Opens: %llu  Flush tables: %lu  &amp;quot;
                    &amp;quot;Open tables: %u  Queries per second avg: %u.%03u&amp;quot;,
                    uptime,
                    (int) thd_manager-&amp;gt;get_thd_count(), (ulong) thd-&amp;gt;query_id,
                    current_global_status_var.long_query_count,
                    current_global_status_var.opened_tables,
                    refresh_version,
                    table_cache_manager.cached_tables(),
                    (uint) (queries_per_second1000 / 1000),
                    (uint) (queries_per_second1000 % 1000));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;other-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#other-3&quot;&gt;¶&lt;/a&gt;other&lt;/h2&gt;
&lt;p&gt;制作ascii图表&lt;br&gt;
&lt;a href=&quot;https://asciiflow.com/#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://asciiflow.com/#/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;rust-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#rust-2&quot;&gt;¶&lt;/a&gt;rust&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://rust-on-nails.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rust-on-nails.com&lt;/a&gt;&lt;br&gt;
Rust全栈WEB开发指南，体系化介绍了作者认为rust WEB开发过程中比较好的一些工具，也包含CI/CD、数据库等，有点意思&lt;/p&gt;
&lt;h2 id=&quot;english-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#english-3&quot;&gt;¶&lt;/a&gt;english&lt;/h2&gt;
&lt;p&gt;As the labeled abuse data is limited and more unsupervised approaches are explored, the feature quality becomes the key for machine learning models to succeed. The features used by models normally belong within two categories: 1) value features and 2) counting features. Value features are the most common category; they directly use the value of raw features, such as IP address, name, email, etc. Some abuse patterns can be found by finding identical or similar feature values among massive requests/users (e.g., clustering); some abuse patterns can be found by identifying different feature values from the same entity (e.g., account takeover). Counting features are based on the feature counting numbers within a certain time period, which are commonly used for large-scale abuse prevention. Various machine learning approaches (supervised/unsupervised) basically try to find the complex relationship between these features.&lt;/p&gt;
&lt;p&gt;Counting features are based on the feature counting numbers within a certain time period, which are commonly used for large-scale abuse prevention. Various machine learning approaches (supervised/unsupervised) basically try to find the complex relationship between these features.&lt;/p&gt;
&lt;p&gt;When abusers start to change their signals once anti-abuse defenses are applied, we often see both value features and counting features are subject to be compromised.&lt;/p&gt;
&lt;p&gt;Rules and models based on value features often need to adjust parameters or retrain if feature values are changed/spoofed.&lt;/p&gt;
&lt;p&gt;Counting features will lose the visibility to differentiate bot and human traffic once abusers lower their request rate.&lt;/p&gt;
&lt;p&gt;The fact that features are constantly altered or changed can significantly degrade the performance of rules and models.&lt;/p&gt;
&lt;p&gt;If you compare yourself to others in tech, you are going to rob yourself of your happiness faster than Nicolas Cage steals the Declaration of Independence.&lt;/p&gt;
&lt;p&gt;One of the biggest benefits of the tech industry is being able to collaborate with extremely talented people - Don’t turn that into downside.&lt;/p&gt;
&lt;p&gt;There are always going to be brilliant peers who grow at a much faster rate. That’s what we all signed up for when we decided to work in this crazy field.&lt;/p&gt;
&lt;p&gt;You are only hurting yourself when you treat others’ accomplishments as a baseline for yourself, creating an unrealistic growth deadline to hit.&lt;/p&gt;
&lt;p&gt;Your career is a marathon not a race. In order to keep on running, you can’t hold yourself back feeling bad that you aren’t at the same level as someone else.&lt;/p&gt;
&lt;p&gt;For those ahead of you, extract the learnings from their success, apply it to your own work, and keep on chugging along. You will eventually get to where you want to go.&lt;/p&gt;
&lt;p&gt;To learn more about maintaining a healthy mentality, not comparing yourself to others, and long-term career growth, check out the in-depth discussion here:&lt;/p&gt;
&lt;p&gt;As models are only able to learn from the information captured by the features, any information missed by the features will be overlooked by the models as well.&lt;/p&gt;
&lt;p&gt;Higher quality features to capture more insights and provide higher resistance to attack variability are essential for successful anti-abuse defense.&lt;/p&gt;
&lt;p&gt;There are other technologies that could serve the purpose, but they often require collecting additional user information.&lt;/p&gt;
&lt;h2 id=&quot;算法-4&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#算法-4&quot;&gt;¶&lt;/a&gt;算法&lt;/h2&gt;
&lt;p&gt;畅销20年，被麻省理工推荐，每个程序员都该读的编程珠玑&lt;br&gt;
&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTIzMzIxNQ==&amp;amp;mid=2652879187&amp;amp;idx=1&amp;amp;sn=4caaf94034ca7ff1313bc1d7b012dbfd&amp;amp;chksm=8498bb83b3ef3295785aca3b8aeba035e72bf7b2da2cda53fd0c5e1d7e333a0122292ab753b5&amp;amp;scene=27&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=MzA3NTIzMzIxNQ==&amp;amp;mid=2652879187&amp;amp;idx=1&amp;amp;sn=4caaf94034ca7ff1313bc1d7b012dbfd&amp;amp;chksm=8498bb83b3ef3295785aca3b8aeba035e72bf7b2da2cda53fd0c5e1d7e333a0122292ab753b5&amp;amp;scene=27&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《编程珠玑》习题练习In Python——第三章 数据决定程序结构&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/vincent_hbl/article/details/53446014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/vincent_hbl/article/details/53446014&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《编程珠玑》习题练习In Python——第二章 啊哈！算法&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/vincent_hbl/article/details/53438282&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/vincent_hbl/article/details/53438282&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Programming Pearls Second Edition&lt;br&gt;
&lt;a href=&quot;https://github.com/Folgerjun/Programming-Pearls&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Folgerjun/Programming-Pearls&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux-10&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linux-10&quot;&gt;¶&lt;/a&gt;linux&lt;/h2&gt;
&lt;p&gt;ModSecurity3_Nginx 指南&lt;br&gt;
&lt;a href=&quot;https://www.jianshu.com/p/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202305</title>
    <link href="http://blog.ihuhao.com/2023/05/04/202305/"/>
    <id>http://blog.ihuhao.com/2023/05/04/202305/</id>
    <published>2023-05-04T03:41:53.000Z</published>
    <updated>2023-05-29T09:23:29.777Z</updated>
    
    <content type="html">&lt;h2 id=&quot;linux-9&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linux-9&quot;&gt;¶&lt;/a&gt;linux&lt;/h2&gt;
&lt;p&gt;sed&lt;/p&gt;
&lt;h1&gt;在每行的头添加字符，比如&amp;quot;HEAD&amp;quot;，命令如下：&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;sed &#39;s/^/HEAD&amp;amp;/g&#39; test.file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#在每行的行尾添加字符，比如“TAIL”，命令如下：&lt;br&gt;
sed ‘s/$/&amp;amp;TAIL/g’ test.file&lt;/p&gt;
&lt;p&gt;Linux NFS服务的权限设置和身份映射&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/m0_46756244/article/details/105342440&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/m0_46756244/article/details/105342440&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限主要分两种，ro（默认，只读）rw（读写）sync（同步，必须加）；客户端还可以用*来表示，就代表所有客户端都可以访问&lt;/li&gt;
&lt;li&gt;在设置权限后，还应别忘了系统层面的权限设置&lt;/li&gt;
&lt;li&gt;NFS 服务不具备用户身份验证的功能，而是基于客户端的 IP 来进行认证的&lt;/li&gt;
&lt;li&gt;在服务器上会有这么一个 nfsnobody 匿名用户，然后客户端在用nfs服务访问服务器上的共享目录时，就会被映射成这个用户来访问&lt;/li&gt;
&lt;li&gt;用户映射
&lt;ul&gt;
&lt;li&gt;root_squash，当 NFS 客户端以 root 用户身份访问时，映射为 NFS 服务器的 nfsnobody 用户&lt;/li&gt;
&lt;li&gt;no_root_squash，当 NFS 客户端以 root 身份访问时，映射为 NFS 服务器的 root 用户，一般不建议采用。&lt;/li&gt;
&lt;li&gt;all_squash，无论 NFS 客户端以哪种用户身份访问，均映射为 NFS 服务器的 nfsnobody 用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果在服务器端赋予某个用户对共享目录具有相应权限，而且在客户端正好也有一个相同 UID 的用户，那么当在客户端以该用户身份访问共享时，就会被映射成具有相同 UID 的用户，比如服务端和客户端都是 ubuntu 默认用户，避免这种情况就用 all_squash&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linux 命令行查词&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/fusheng-rextimmy/p/15371057.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/fusheng-rextimmy/p/15371057.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install ruby
sudo gem install fy
fy love
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NGINX caching proxy fails with SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/25329941/nginx-caching-proxy-fails-with-ssl23-get-server-hellosslv3-alert-handshake-fail&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/25329941/nginx-caching-proxy-fails-with-ssl23-get-server-hellosslv3-alert-handshake-fail&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy_ssl_server_name on;
proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nginx upstream failover 容错机制&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/bigtree_3721/article/details/72792141&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/bigtree_3721/article/details/72792141&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;失效节点的 6 种状态
&lt;ul&gt;
&lt;li&gt;time out&lt;/li&gt;
&lt;li&gt;connect refuse&lt;/li&gt;
&lt;li&gt;500、502、503、504&lt;/li&gt;
&lt;li&gt;后四项 5XX 需要配置 proxy_next_upstream 中的状态才可以生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;负载均衡方式一共有 5 种
&lt;ul&gt;
&lt;li&gt;rr(轮询模式)&lt;/li&gt;
&lt;li&gt;ip_hash&lt;/li&gt;
&lt;li&gt;fair&lt;/li&gt;
&lt;li&gt;url_hash&lt;/li&gt;
&lt;li&gt;weight(加权)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;编程&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#编程&quot;&gt;¶&lt;/a&gt;编程&lt;/h2&gt;
&lt;p&gt;HyperLogLog 使用及其算法原理详细讲解&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_41125219/article/details/119776824&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_41125219/article/details/119776824&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dotnet Async Guidance&lt;br&gt;
&lt;a href=&quot;https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tailwind CSS：百万美元启示录&lt;br&gt;
&lt;a href=&quot;https://hardcored.substack.com/p/tailwind-css&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hardcored.substack.com/p/tailwind-css&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;rust&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#rust&quot;&gt;¶&lt;/a&gt;rust&lt;/h2&gt;
&lt;p&gt;安装 rust&lt;br&gt;
&lt;a href=&quot;https://www.rust-lang.org/tools/install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.rust-lang.org/tools/install&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh
source &amp;quot;$HOME/.cargo/env&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup - Rust工具链安装器&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/382810160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/382810160&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rust 教程&lt;br&gt;
&lt;a href=&quot;https://doc.rust-lang.org/rust-by-example/hello/print.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://doc.rust-lang.org/rust-by-example/hello/print.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过例子学 Rust&lt;br&gt;
&lt;a href=&quot;https://rustwiki.org/zh-CN/rust-by-example/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rustwiki.org/zh-CN/rust-by-example/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust 程序设计语言&lt;br&gt;
&lt;a href=&quot;https://rustwiki.org/zh-CN/book/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rustwiki.org/zh-CN/book/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vimrc 设置 F5 编译运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;autocmd FileType rust nnoremap &amp;lt;buffer&amp;gt; &amp;lt;F5&amp;gt; :!rustc % -o a.out &amp;amp;&amp;amp; ./a.out&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;英语&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#英语&quot;&gt;¶&lt;/a&gt;英语&lt;/h2&gt;
&lt;p&gt;175个最实用的英语会话句型&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/winrarz/p/16885550.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/winrarz/p/16885550.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-7&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#python-7&quot;&gt;¶&lt;/a&gt;python&lt;/h2&gt;
&lt;p&gt;python协程(1): 基本介绍及yield实现协程&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_37674086/article/details/113243190&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_37674086/article/details/113243190&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;vim-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#vim-2&quot;&gt;¶&lt;/a&gt;vim&lt;/h2&gt;
&lt;p&gt;光标移动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gg 到文档第一行&lt;/li&gt;
&lt;li&gt;G 到文档最后一行&lt;/li&gt;
&lt;li&gt;0 到行首（第 1 列）&lt;/li&gt;
&lt;li&gt;^ 到第一个非空白字符&lt;/li&gt;
&lt;li&gt;$ 到行尾&lt;/li&gt;
&lt;li&gt;Ctrl-B 和 Ctrl-F 以及 PageUp 和 PageDown 按全页滚动&lt;/li&gt;
&lt;li&gt;Ctrl-U 和 Ctrl-D 默认滚动半页&lt;/li&gt;
&lt;li&gt;Ctrl-Y 和 Ctrl-E 滚动一行&lt;/li&gt;
&lt;li&gt;zz 把当前行置为屏幕的中央&lt;/li&gt;
&lt;li&gt;zt 把当前行置于屏幕的顶端&lt;/li&gt;
&lt;li&gt;zb 把当前行置于屏幕的底端&lt;/li&gt;
&lt;li&gt;H 移动到屏幕顶端&lt;/li&gt;
&lt;li&gt;M 移动到屏幕中间&lt;/li&gt;
&lt;li&gt;L 移动到屏幕底部&lt;/li&gt;
&lt;li&gt;w or W 向右移动到下一单词开头&lt;/li&gt;
&lt;li&gt;e or E 向右移动到单词结尾&lt;/li&gt;
&lt;li&gt;b or B 向左移动到单词开头&lt;/li&gt;
&lt;li&gt;% 跳转到相配对的括号&lt;/li&gt;
&lt;li&gt;gD 跳转到局部变量的定义处&lt;/li&gt;
&lt;li&gt;{ 跳到上一段的开头&lt;/li&gt;
&lt;li&gt;} 跳到下一段的的开头&lt;/li&gt;
&lt;li&gt;( 移到这个句子的开头&lt;/li&gt;
&lt;li&gt;) 移到下一个句子的开头&lt;/li&gt;
&lt;li&gt;[[ 跳转至上一个函数(要求代码块中’{‘必须单独占一行)&lt;/li&gt;
&lt;li&gt;]] 跳转至下一个函数(要求代码块中’{&#39;必须单独占一行)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;php&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#php&quot;&gt;¶&lt;/a&gt;php&lt;/h2&gt;
&lt;p&gt;tinker 的输出默认不翻页&lt;br&gt;
&lt;a href=&quot;https://github.com/bobthecow/psysh/wiki/Config-options&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bobthecow/psysh/wiki/Config-options&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php -d cli.pager=cat artisan tinker
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux-9&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linux-9&quot;&gt;¶&lt;/a&gt;linux&lt;/h2&gt;
&lt;p&gt;sed&lt;/p&gt;
&lt;h1&gt;在每行的头添加字符，比如&amp;quot;HEAD&amp;quot;，命令如下：&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202304</title>
    <link href="http://blog.ihuhao.com/2023/04/03/202304/"/>
    <id>http://blog.ihuhao.com/2023/04/03/202304/</id>
    <published>2023-04-03T06:15:16.000Z</published>
    <updated>2023-04-28T08:51:41.955Z</updated>
    
    <content type="html">&lt;h2 id=&quot;python-6&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#python-6&quot;&gt;¶&lt;/a&gt;python&lt;/h2&gt;
&lt;p&gt;SQLite Vacuum&lt;br&gt;
&lt;a href=&quot;https://www.runoob.com/sqlite/sqlite-vacuum.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.runoob.com/sqlite/sqlite-vacuum.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VACUUM 命令通过复制主数据库中的内容到一个临时数据库文件，然后清空主数据库，并从副本中重新载入原始的数据库文件。这消除了空闲页，把表中的数据排列为连续的，另外会清理数据库文件结构。&lt;/p&gt;
&lt;p&gt;基于selenium、BeautifulSoup与goose3的动态网络爬虫（以东方视野为例）&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_36274515/article/details/89631676&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_36274515/article/details/89631676&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flask-单元测试&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/HuangXiongjin/article/details/103560721&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/HuangXiongjin/article/details/103560721&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Celery Daemonization&lt;br&gt;
&lt;a href=&quot;https://docs.celeryq.dev/en/latest/userguide/daemonizing.html#daemon-systemd-generic&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.celeryq.dev/en/latest/userguide/daemonizing.html#daemon-systemd-generic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python究竟要不要使用多线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GIL 的特性，也就导致了 python 不能充分利用多核 cpu。&lt;/li&gt;
&lt;li&gt;而对面向 I/O 的（会调用内建操作系统C代码的）程序来说，GIL会在这个I/O调用之前被释放，以允许其他线程在这个线程等待I/O的时候运行。&lt;/li&gt;
&lt;li&gt;如果线程并未使用很多 I/O 操作，它会在自己的时间片一直占用处理器和 GIL。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;创业&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#创业&quot;&gt;¶&lt;/a&gt;创业&lt;/h2&gt;
&lt;p&gt;80+盈利创始人推荐，25本最佳书籍盘点！&lt;br&gt;
&lt;a href=&quot;http://www.yitb.com/article-38436&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.yitb.com/article-38436&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重新理解创业里程碑&lt;br&gt;
&lt;a href=&quot;https://yitanger.feishu.cn/docx/WQuRdqYE4oos1txDxvZcJkf2nL7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yitanger.feishu.cn/docx/WQuRdqYE4oos1txDxvZcJkf2nL7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重磅案例课：小龙虾外卖&lt;br&gt;
&lt;a href=&quot;https://yitanger.feishu.cn/docs/doccnV1Yg9Jr1suZLQGspt6UfMe#DA9tR6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yitanger.feishu.cn/docs/doccnV1Yg9Jr1suZLQGspt6UfMe#DA9tR6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;壁垒必修：预判项目长期壁垒课程&lt;br&gt;
&lt;a href=&quot;https://yitanger.feishu.cn/docs/doccnettFMyMZ8BuawbJBa8lUng#NwIJ9k&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yitanger.feishu.cn/docs/doccnettFMyMZ8BuawbJBa8lUng#NwIJ9k&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;落地之夜，案例分享&lt;br&gt;
&lt;a href=&quot;https://yitanger.feishu.cn/docx/WLrBdameeokuKdxU6VgcHLpknpf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yitanger.feishu.cn/docx/WLrBdameeokuKdxU6VgcHLpknpf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创业书单&lt;br&gt;
&lt;a href=&quot;https://yitanger.feishu.cn/docx/VBPEdcCl0oGlIwxTtu8cDwL8nle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yitanger.feishu.cn/docx/VBPEdcCl0oGlIwxTtu8cDwL8nle&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ai&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#ai&quot;&gt;¶&lt;/a&gt;ai&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://civitai.com/images/370200?modelId=4823&amp;amp;postId=108729&amp;amp;id=4823&amp;amp;slug=deliberate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://civitai.com/images/370200?modelId=4823&amp;amp;postId=108729&amp;amp;id=4823&amp;amp;slug=deliberate&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://civitai.com/images/213712?modelId=4823&amp;amp;postId=111233&amp;amp;id=4823&amp;amp;slug=deliberate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://civitai.com/images/213712?modelId=4823&amp;amp;postId=111233&amp;amp;id=4823&amp;amp;slug=deliberate&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://civitai.com/images/313863?modelId=4823&amp;amp;postId=116835&amp;amp;id=4823&amp;amp;slug=deliberate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://civitai.com/images/313863?modelId=4823&amp;amp;postId=116835&amp;amp;id=4823&amp;amp;slug=deliberate&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://civitai.com/images/392042?modelId=28620&amp;amp;postId=83099&amp;amp;id=28620&amp;amp;slug=mixreal-v2-sd-21&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://civitai.com/images/392042?modelId=28620&amp;amp;postId=83099&amp;amp;id=28620&amp;amp;slug=mixreal-v2-sd-21&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;投资&lt;/h1&gt;
&lt;p&gt;8分钟教你什么是量比！&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/394928988&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/394928988&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;量比定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成交量是股价技术分析的重要指标，而分析成交量最重要的工具之一就是量比，量比是衡量相对成交量的指标&lt;/li&gt;
&lt;li&gt;它是指股市开市后平均每分钟的交易量与过去五个交易日平均每分钟的交易量之比。&lt;/li&gt;
&lt;li&gt;量比的数值越大，说明该股市场很活跃。&lt;/li&gt;
&lt;li&gt;量比的数值越小，说明该股市场很冷清。&lt;/li&gt;
&lt;li&gt;同时通过分析量比指标也能了解主力短期动向，适用于短线，量比选股法就是用于短期。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;量比使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当量比大于1时，说明当日每分钟的平均交易量大于过去五日平均每分钟交易量，交易比较活跃，为放量。
&lt;ul&gt;
&lt;li&gt;当量比小于1时，说明交易比较清淡，为缩量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当量比在 0.5 倍以下时，说明交易清淡，呈缩量情形，没有较大的分析意义。&lt;/li&gt;
&lt;li&gt;当量比在 0.5-1.5 倍区间时，说明成交量为正常水平，需要观察，等待进场时机。&lt;/li&gt;
&lt;li&gt;当量比在 1.5-2.5 倍区间时，说明成交量放量比较温和，应结合价格分析，
&lt;ul&gt;
&lt;li&gt;如果股价也呈温和上涨态势，则可继续持有；&lt;/li&gt;
&lt;li&gt;如果股价呈下跌态势，那么该趋势短期内可能继续延续下去，应考虑止损离场。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当量价在 2.5-5 倍区间时，说明成交量放量较明显，
&lt;ul&gt;
&lt;li&gt;如果股价在支撑位或压力位附近时，说明价格大概率会突破该关键位置，可以相应地采取行动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当量比在 5-10 倍区间时，说明成交量放量较剧烈，
&lt;ul&gt;
&lt;li&gt;如果股价在低位出现这种情况说明股价后期上涨的动力大；&lt;/li&gt;
&lt;li&gt;如果股价在高位并且股价已经拉升过了，应小心，可能为Z力的诱多行为，为出货做准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当量比在 10 倍以上的区间，说明成交量放巨量，为异动，物极必反，一般进行反向操作，
&lt;ul&gt;
&lt;li&gt;如果股价在上涨趋势中，说明股价大概率见顶，可能后期会下跌，&lt;/li&gt;
&lt;li&gt;如果股价在下跌趋势的末期，则后期股价可能会大概率上涨。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当量比在 20 倍以上的区间，说明此时为极端放量，具有很强的反转信号，
&lt;ul&gt;
&lt;li&gt;如果股价在高位滞涨，说明股价后期会下跌，应立刻离场。&lt;/li&gt;
&lt;li&gt;如果股价在下跌的趋势中，说明股价即将见底，可以进场等待拉升。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;java-5&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-5&quot;&gt;¶&lt;/a&gt;java&lt;/h2&gt;
&lt;p&gt;Spring Security Oauth2之获取token流程分析&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/ityw520/article/details/128079499&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/ityw520/article/details/128079499&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;oauth2的token认证接口/oauth/token、/oauth/check_token、/oauth/authorize在哪个包里&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qq_33036061/article/details/107076918&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_33036061/article/details/107076918&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Non-resolvable parent POM 解决。分析 maven parent 解析顺序。&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/wangrui1605/article/details/113746438&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wangrui1605/article/details/113746438&lt;/a&gt;&lt;br&gt;
maven–解决was cached in the local repository, resolution will not be reattempted until the update&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/feiying0canglang/article/details/125673756&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/feiying0canglang/article/details/125673756&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maven的常用命令&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/411883656&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/411883656&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于maven多module的依赖问题&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/westlin/p/10908778.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/westlin/p/10908778.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maven的聚合(多模块)和Parent继承&lt;br&gt;
&lt;a href=&quot;https://www.jb51.net/article/153441.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jb51.net/article/153441.htm&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;other-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#other-2&quot;&gt;¶&lt;/a&gt;other&lt;/h2&gt;
&lt;p&gt;微服务经典文章：微服务 | Martin Fowler&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/472964950&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/472964950&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS 上的数据加密策略&lt;br&gt;
&lt;a href=&quot;http://blog.light2cloud.com/?p=94&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.light2cloud.com/?p=94&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「 通达信 」的基本使用及常用设置&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/545826458&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/545826458&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx proxy_set_header参数设置&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/summer_fish/article/details/117300072&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/summer_fish/article/details/117300072&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy_pass http://172.31.5.0:5000;

proxy_set_header Host $host;
proxy_pass http://172.31.5.0:5000;

proxy_set_header Host $http_host;
proxy_pass http://172.31.5.0:5000;
&lt;/code&gt;&lt;/pre&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-6&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#python-6&quot;&gt;¶&lt;/a&gt;python&lt;/h2&gt;
&lt;p&gt;SQLite Vacuum&lt;br&gt;
&lt;a href=&quot;https://www.runoob.com/sqlite/sql
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202303</title>
    <link href="http://blog.ihuhao.com/2023/03/07/202303/"/>
    <id>http://blog.ihuhao.com/2023/03/07/202303/</id>
    <published>2023-03-07T03:46:09.000Z</published>
    <updated>2023-04-07T10:00:44.024Z</updated>
    
    <content type="html">&lt;h2 id=&quot;mysql-9&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mysql-9&quot;&gt;¶&lt;/a&gt;mysql&lt;/h2&gt;
&lt;p&gt;MYSQL解决 The total number of locks exceeds the lock table size 问题&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/dingweiye123/article/details/80994576&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/dingweiye123/article/details/80994576&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show variables like &amp;quot;%tmp%&amp;quot;;
SET GLOBAL  tmp_table_size =1024*1024*1024;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数据库血缘分析&lt;br&gt;
&lt;a href=&quot;https://github.com/reata/sqllineage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/reata/sqllineage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SQLLineage: 基于Python的SQL血缘分析工具&lt;br&gt;
&lt;a href=&quot;https://reata.github.io/blog/sqllineage-a-sql-lineage-analysis-tool/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://reata.github.io/blog/sqllineage-a-sql-lineage-analysis-tool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SQLLineage v1.3：迈向字段血缘&lt;br&gt;
&lt;a href=&quot;https://reata.github.io/blog/sqllineage-towards-column-lineage/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://reata.github.io/blog/sqllineage-towards-column-lineage/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Find the size of each index in a MySQL table&lt;br&gt;
&lt;a href=&quot;https://dba.stackexchange.com/questions/49656/find-the-size-of-each-index-in-a-mysql-table&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dba.stackexchange.com/questions/49656/find-the-size-of-each-index-in-a-mysql-table&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to estimate/predict data size and index size of a table in MySQL&lt;br&gt;
&lt;a href=&quot;https://dba.stackexchange.com/questions/46069/how-to-estimate-predict-data-size-and-index-size-of-a-table-in-mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dba.stackexchange.com/questions/46069/how-to-estimate-predict-data-size-and-index-size-of-a-table-in-mysql&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    CONCAT(FORMAT(DAT/POWER(1024,pw1),2),&#39; &#39;,SUBSTR(units,pw1*2+1,2)) DATSIZE,
    CONCAT(FORMAT(NDX/POWER(1024,pw2),2),&#39; &#39;,SUBSTR(units,pw2*2+1,2)) NDXSIZE,
    CONCAT(FORMAT(TBL/POWER(1024,pw3),2),&#39; &#39;,SUBSTR(units,pw3*2+1,2)) TBLSIZE
FROM
(
    SELECT DAT,NDX,TBL,IF(px&amp;gt;4,4,px) pw1,IF(py&amp;gt;4,4,py) pw2,IF(pz&amp;gt;4,4,pz) pw3
    FROM
    (
        SELECT data_length DAT,index_length NDX,data_length+index_length TBL,
        FLOOR(LOG(IF(data_length=0,1,data_length))/LOG(1024)) px,
        FLOOR(LOG(IF(index_length=0,1,index_length))/LOG(1024)) py,
        FLOOR(LOG(data_length+index_length)/LOG(1024)) pz
        FROM information_schema.tables
        WHERE table_schema=&#39;mydb&#39;
        AND table_name=&#39;mytable&#39;
    ) AA
) A,(SELECT &#39;B KBMBGBTB&#39; units) B;

select database_name, table_name, index_name, stat_value*@@innodb_page_size
from mysql.innodb_index_stats where stat_name=&#39;size&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mysql-索引对-null-的处理&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mysql-索引对-null-的处理&quot;&gt;¶&lt;/a&gt;mysql 索引对 null 的处理&lt;/h3&gt;
&lt;p&gt;一个表 mytable 总共 100w 条数据，主键是 int unsigned 类型，索引列是 CHAR(50) 类型，下面是创建索引的语句。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create index ix_mytable_json_xxx on mytable ((JSON_VALUE(json, &#39;$.xxx&#39; RETURNING CHAR(50))));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 12572 条数据的 json-&amp;gt;&amp;gt;‘$.xxx’ 有值，其余都是 NULL， 现在看 ix_mytable_json_xxx 索引占用空间 13 MB。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select database_name, table_name, index_name, stat_value*@@innodb_page_size/1024/1024 size_M
from mysql.innodb_index_stats
where stat_name=&#39;size&#39; and  database_name=&#39;test&#39; and table_name=&#39;mytable&#39; and index_nam=&#39;ix_mytable_json_xxx&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假设每行数据在索引里占用 50+4 的话，需要 1000000*(50+4)/1024/1024=51.49 MB，这远远大于 13 MB，说明 mysql 的索引里是对 NULL有优化的。&lt;/p&gt;
&lt;h2 id=&quot;data&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#data&quot;&gt;¶&lt;/a&gt;data&lt;/h2&gt;
&lt;p&gt;Using pyarrow how do you append to parquet file?&lt;br&gt;
&lt;a href=&quot;https://9to5answer.com/using-pyarrow-how-do-you-append-to-parquet-file&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://9to5answer.com/using-pyarrow-how-do-you-append-to-parquet-file&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unfortunately, this cannot append to an existing .parquet file (see my answer that can). Reason: Once .close() is called, the file cannot be appended to, and before .close() is called, the .parquet file is not valid (will throw an exception due to a corrupted file as it’s missing its binary footer). The answer from @Contango solves this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cldellow/csv2parquet/issues/13&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/cldellow/csv2parquet/issues/13&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The nature of the Parquet format is such that you can’t really update an existing file. (Wellllll, maybe it’s technically possible to do surgery and add new row groups and then update the footer. It’d require using relatively low-level APIs in the parquet library, though.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;linix&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linix&quot;&gt;¶&lt;/a&gt;linix&lt;/h2&gt;
&lt;p&gt;持续检查某个进程的 CPU 和内存占用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ while true; do echo -n `date +&#39;%H:%M:%S &#39;`&amp;quot; &amp;quot;;ps -eo pid,%cpu,%mem,cmd | grep &#39;mysqld&#39;| grep -v grep; sleep 1;done
03:22:55  3226830 39.6  4.0 /usr/sbin/mysqld
03:22:56  3226830 39.6  4.0 /usr/sbin/mysqld
03:22:57  3226830 39.6  4.0 /usr/sbin/mysqld
03:22:58  3226830 39.6  4.0 /usr/sbin/mysqld
03:22:59  3226830 39.6  4.0 /usr/sbin/mysqld
03:23:00  3226830 39.6  4.0 /usr/sbin/mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;java-4&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-4&quot;&gt;¶&lt;/a&gt;java&lt;/h2&gt;
&lt;p&gt;Spring boot开启定时任务的三种方式&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/qianlixiaomage/article/details/106599951&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qianlixiaomage/article/details/106599951&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种也就是最简单的一种：基于注解 (@Scheduled)的方式；&lt;/li&gt;
&lt;li&gt;第二种：基于接口 (SchedulingConfigurer)；&lt;/li&gt;
&lt;li&gt;第三种：基于注解设定多线程定时任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Convert String to Hex in Java&lt;br&gt;
&lt;a href=&quot;https://www.delftstack.com/howto/java/string-to-hex-java/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.delftstack.com/howto/java/string-to-hex-java/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// method 1
StringBuilder stringBuilder = new StringBuilder();

char[] charArray = str.toCharArray();

for (char c : charArray) {
    String charToHex = Integer.toHexString(c);
    stringBuilder.append(charToHex);
}

System.out.println(&amp;quot;Converted Hex from String: &amp;quot;+stringBuilder.toString());

// method 2
import org.apache.commons.codec.binary.Hex;
import java.nio.charset.StandardCharsets;

byte[] byteArray = str.getBytes(StandardCharsets.UTF_8);
String convertedResult = Hex.encodeHexString(byteArray);

// method 3
byte[] getBytesFromString = str.getBytes(StandardCharsets.UTF_8);
BigInteger bigInteger = new BigInteger(1, getBytesFromString);

String convertedResult = String.format(&amp;quot;%x&amp;quot;, bigInteger);

System.out.println(&amp;quot;Converted Hex from String: &amp;quot; + convertedResult);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;linux-7&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linux-7&quot;&gt;¶&lt;/a&gt;linux&lt;/h2&gt;
&lt;p&gt;How to record reverse proxy upstream server serving request in Nginx log?&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/18627469/how-to-record-reverse-proxy-upstream-server-serving-request-in-nginx-log&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/18627469/how-to-record-reverse-proxy-upstream-server-serving-request-in-nginx-log&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log_format upstreamlog &#39;[$time_local] $remote_addr - $remote_user - $server_name $host to: $upstream_addr: $request $status upstream_response_time $upstream_response_time msec $msec request_time $request_time&#39;;
access_log /var/log/nginx/access.log upstreamlog;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Experiments about a better locate using grep&lt;br&gt;
&lt;a href=&quot;https://a3nm.net/blog/better_locate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://a3nm.net/blog/better_locate.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Approach	Time/query (s)  	Index size (MB)  
mlocate	5.5	300
GNU locate	4.6	75
grep	1.7	890
LC_ALL grep	0.7	890
LC_ALL grep (parallel)	0.3	890
LC_ALL grep (parallel) gzip  	1.3	105
LC_ALL grep (parallel) pigz  	1.0	105
LC_ALL grep (parallel) lz4	0.7	160
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;javascript-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#javascript-3&quot;&gt;¶&lt;/a&gt;javascript&lt;/h2&gt;
&lt;p&gt;知识图谱项目前端可视化图论库——Cytoscape.js简介 DAG&lt;br&gt;
&lt;a href=&quot;https://www.cnblogs.com/zhilin/p/12074688.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/zhilin/p/12074688.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cytoscape.js 是一个用原生JS编写的开源图论（又名网络）库。你可以使用Cytoscape.js进行图形分析和可视化。&lt;/li&gt;
&lt;li&gt;Cytoscape.js 支持许多不同的图论用例。它支持有向图，无向图，混合图，循环，多图，复合图（一种超图），等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://ourcodeworld.com/articles/read/159/top-5-best-free-diagrams-javascript-libraries&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ourcodeworld.com/articles/read/159/top-5-best-free-diagrams-javascript-libraries&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://hackernoon.com/my-top-13-javascript-diagram-libraries-g2a53z6u&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hackernoon.com/my-top-13-javascript-diagram-libraries-g2a53z6u&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么是Black-Litterman资产配置模型？&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/542122376&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/542122376&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Black-Litterman 模型是一个关于投资组合配置（portfolio allocation）的贝叶斯模型（Bayesian model），它的初衷在于马科维茨（Markowitz）提出的现代投资组合理论（modern portfolio theory）在实际操作中的问题。&lt;/li&gt;
&lt;li&gt;在现代投资组合理论中，投资组合的最优权重是通过一个均值-方差最优化（mean-variance optimization）问题的求解得到的，而最优化问题中的资产预期收益率（expected returns）和协方差（covariances）都是给定的，它们不一定是对于预期收益率的合理估计。&lt;/li&gt;
&lt;li&gt;尤其在投资者对特定资产的未来表现持某些观点时，马科维茨均值-方差最优化给出的权重是不合理的。&lt;/li&gt;
&lt;li&gt;为解决此问题，Black-Litterman模型使用贝叶斯方法将投资者的观点纳入到对预期收益率的估计中。Black-Litterman模型有一个重要假设：所有资产收益率都遵循同样的概率分布（probability distribution）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;python-5&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#python-5&quot;&gt;¶&lt;/a&gt;python&lt;/h2&gt;
&lt;p&gt;How could I use requests in asyncio?&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/22190403/how-could-i-use-requests-in-asyncio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/22190403/how-could-i-use-requests-in-asyncio&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import asyncio
import requests

async def main():
    loop = asyncio.get_event_loop()
    future1 = loop.run_in_executor(None, requests.get, &#39;http://www.google.com&#39;)
    future2 = loop.run_in_executor(None, requests.get, &#39;http://www.google.co.uk&#39;)
    response1 = await future1
    response2 = await future2
    print(response1.text)
    print(response2.text)

loop = asyncio.get_event_loop()
loop.run_until_complete(main())


import asyncio
import aiohttp

@asyncio.coroutine
def do_request():
    proxy_url = &#39;http://localhost:8118&#39;  # your proxy address
    response = yield from aiohttp.request(
        &#39;GET&#39;, &#39;http://google.com&#39;,
        proxy=proxy_url,
    )
    return response

loop = asyncio.get_event_loop()
loop.run_until_complete(do_request())


import aiohttp
import asyncio

async def fetch(session, url):
    async with session.get(url) as response:
        return await response.text()

async def main():
    urls = [
            &#39;http://python.org&#39;,
            &#39;https://google.com&#39;,
            &#39;http://yifei.me&#39;
        ]
    tasks = []
    async with aiohttp.ClientSession() as session:
        for url in urls:
            tasks.append(fetch(session, url))
        htmls = await asyncio.gather(*tasks)
        for html in htmls:
            print(html[:100])

if __name__ == &#39;__main__&#39;:
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;浅度测评：requests、aiohttp、httpx 我应该用哪一个？&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/103711201&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/103711201&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make a Python asyncio call from a Flask route&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/47841985/make-a-python-asyncio-call-from-a-flask-route&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/47841985/make-a-python-asyncio-call-from-a-flask-route&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How can I make python request module asyncio and aiohttp&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/75004160/how-can-i-make-python-request-module-asyncio-and-aiohttp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stackoverflow.com/questions/75004160/how-can-i-make-python-request-module-asyncio-and-aiohttp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Making 1 million requests with python-aiohttp&lt;br&gt;
&lt;a href=&quot;https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;AI-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#AI-3&quot;&gt;¶&lt;/a&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/613155165&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/613155165&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考搜索引擎中“先检索再重排”的思路，针对文档问答设计“先检索再整合“的方案，整体思路如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先准备好文档，并整理为纯文本的格式。把每个文档切成若干个小的chunks&lt;/li&gt;
&lt;li&gt;调用文本转向量的接口，将每个chunk转为一个向量，并存入向量数据库
&lt;ul&gt;
&lt;li&gt;文本转向量可以使用 openai embedding&lt;/li&gt;
&lt;li&gt;也可以使用其他方案，如 fasttext/simbert 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当用户发来一个问题的时候，将问题同样转为向量，并检索向量数据库，得到相关性最高的一个或几个chunk&lt;/li&gt;
&lt;li&gt;将问题和chunk合并重写为一个新的请求发给 openai api&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sd 模型 webui&lt;br&gt;
colab运行stable diffusion以及本地部署方法&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/561546984&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/561546984&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/Kerry_Blue/article/details/128778005&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/Kerry_Blue/article/details/128778005&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;国风&lt;br&gt;
&lt;a href=&quot;https://civitai.com/images/249208?modelId=10415&amp;amp;postId=119862&amp;amp;id=10415&amp;amp;slug=3-guofeng3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://civitai.com/images/249208?modelId=10415&amp;amp;postId=119862&amp;amp;id=10415&amp;amp;slug=3-guofeng3&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://civitai.com/images/249210?modelId=10415&amp;amp;postId=119862&amp;amp;id=10415&amp;amp;slug=3-guofeng3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://civitai.com/images/249210?modelId=10415&amp;amp;postId=119862&amp;amp;id=10415&amp;amp;slug=3-guofeng3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;other&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#other&quot;&gt;¶&lt;/a&gt;other&lt;/h2&gt;
&lt;p&gt;How to calculate cumulative sum / running total of a column in Excel?&lt;br&gt;
&lt;a href=&quot;https://www.extendoffice.com/documents/excel/5280-excel-calculate-cumulative-sum.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.extendoffice.com/documents/excel/5280-excel-calculate-cumulative-sum.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=SUM($B$2:B2)
=IF(B2=&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,SUM($B$2:B2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件 GPT 经验&lt;br&gt;
&lt;a href=&quot;https://c8xa9g10gh.feishu.cn/docx/SFnzdD0LqoM8kIxGVsrcAlRhn1d#SFnzdD0LqoM8kIxGVsrcAlRhn1d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://c8xa9g10gh.feishu.cn/docx/SFnzdD0LqoM8kIxGVsrcAlRhn1d#SFnzdD0LqoM8kIxGVsrcAlRhn1d&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql-9&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mysql-9&quot;&gt;¶&lt;/a&gt;mysql&lt;/h2&gt;
&lt;p&gt;MYSQL解决 The total number of locks exceeds the lock table size 问
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>202302</title>
    <link href="http://blog.ihuhao.com/2023/02/02/202302/"/>
    <id>http://blog.ihuhao.com/2023/02/02/202302/</id>
    <published>2023-02-02T01:22:46.000Z</published>
    <updated>2023-03-07T03:13:15.874Z</updated>
    
    <content type="html">&lt;h2 id=&quot;算法-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#算法-3&quot;&gt;¶&lt;/a&gt;算法&lt;/h2&gt;
&lt;p&gt;为什么 360 面试官说 Trie 树没用？&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/27168319&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/27168319&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多模式匹配算法-AC算法等&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/xiaof_90/article/details/77447625&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/xiaof_90/article/details/77447625&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题一：如果有一个关键词，然后让你在一段长文本中找出这些关键词，如何做？&lt;br&gt;
问题二：如果有10K个关键词，然后让你在一段长文本中找出这些关键词，如何做？&lt;/p&gt;
&lt;p&gt;如上问题一中，一段长文本中找一个关键词，那么就是单模式匹配。除了朴素算法（暴力算法）之外，还有一些经典的算法，例如KMP算法等。&lt;br&gt;
问题二中，一段长文本中找N个关键词，那么就是多模式匹配，除了朴素算法外，也有一些经典的算法，例如AC算法、BM算法等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pypi.org/project/cyac/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.org/project/cyac/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ac = AC.build([u&amp;quot;python&amp;quot;, u&amp;quot;ruby&amp;quot;])
&amp;gt;&amp;gt;&amp;gt; for id, start, end in ac.match(u&amp;quot;python ruby&amp;quot;):
&amp;gt;&amp;gt;&amp;gt;     print(id, start, end)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;适用于大规模的多关键字匹配的多模匹配算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;agrep 对处理大规模的多关键字匹配问题有高效。多模式中最著名的快速匹配算法之一。&lt;/li&gt;
&lt;li&gt;MultiBDM 基于AC和DAWG两种自动机扫描思想的多模匹配算法。根据匹配过程中使用时可的不同，作者提出了两种改进。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;python-4&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#python-4&quot;&gt;¶&lt;/a&gt;python&lt;/h2&gt;
&lt;p&gt;获取异常信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    pass
except Exception as e:
    print getattr(e, &#39;message&#39;, repr(e))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python性能分析工具Line_profiler&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_44613728/article/details/120411325&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_44613728/article/details/120411325&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python代码优化工具——memory_profiler&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/weixin_42245157/article/details/126623370&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_42245157/article/details/126623370&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install line-profiler
pip install -U memory_profiler

def cpu_profiler():
    from line_profiler import LineProfiler
    p = LineProfiler()
    p.add_function(match_keywords)
    p_wrap = p(run)
    p_wrap()
    p.print_stats()

def mem_profiler():
    from memory_profiler import profile
    p = profile(precision=4)(run)
    p()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;python ahocorasick介绍&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/u010569893/article/details/97136696&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/u010569893/article/details/97136696&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ahocorasick 是个 python 模块，Aho-Corasick 算法是多模式匹配中的经典算法，目前在实际应用中较多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trie是一个字符串索引的词典，检索相关项时时间和字符串长度成正比。&lt;/li&gt;
&lt;li&gt;AC自动机能够在一次运行中找到给定集合所有字符串。&lt;/li&gt;
&lt;li&gt;AC自动机其实就是在Trie树上实现KMP，可以完成多模式串的匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;linux-6&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#linux-6&quot;&gt;¶&lt;/a&gt;linux&lt;/h2&gt;
&lt;p&gt;Linux 内核 101：NUMA架构&lt;br&gt;
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62795773&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/62795773&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;proxy setting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -s -L https://git.io/v2ray.sh)
stress-ng -c 0 -l 30 -t 8640000000
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mysql-8&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mysql-8&quot;&gt;¶&lt;/a&gt;mysql&lt;/h2&gt;
&lt;p&gt;带进度导入数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pv database1.sql.gz | gunzip | mysql -uroot -p database1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字节面试：知道MySQL 的 NULL 值是怎么存放的吗？&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/Javatutouhouduan/article/details/128150631&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/Javatutouhouduan/article/details/128150631&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结果集行号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select @rowNum:=@rowNum + 1 AS &#39;行号&#39;,a.username,a.money
from account a, (select @rowNum:=0) b
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;books&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#books&quot;&gt;¶&lt;/a&gt;books&lt;/h2&gt;
&lt;p&gt;The Subtle Art of Not Giving a F*ck&lt;br&gt;
&lt;a href=&quot;https://book.douban.com/subject/26895197/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://book.douban.com/subject/26895197/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：易又饕（来自豆瓣）&lt;br&gt;
来源：&lt;a href=&quot;https://book.douban.com/review/10006306/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://book.douban.com/review/10006306/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，要区分“快乐”(happiness)和&amp;quot;快感&amp;quot;(high)。前者具有可持续性，能真正让生活变得美好。后者往往是短暂的生理刺激，在刺激结束后还可能带来更深的痛苦。&lt;/li&gt;
&lt;li&gt;第二，生活中充满了问题，因为问题本来就是生活的常态。不必为连绵不断的问题本身而感到苦恼，如果因为这些苦恼而纠结，我们必然就干不了其他事情，进而会为无所成就而进一步苦恼，陷入恶性循环。&lt;/li&gt;
&lt;li&gt;第三，快乐只有在解决问题的过程中才能获得，而从长期来看，逃避问题只能带来更多的压力和挑战。用追求快感的方式来逃避挑战，最后只能像喝海水解渴，越喝越渴。&lt;/li&gt;
&lt;li&gt;第四，既然痛苦和挣扎是人生不可避免的一部分，就应该时刻做好直面它们的准备。同时，要选择自己的战场，把精力、能力和毅力用到那些真正值得解决的问题上。&lt;/li&gt;
&lt;li&gt;第五，明白自己所在乎的价值，同时明白自己用以衡量这些价值的标尺是否真正合适。好的价值，是往往是自己可以掌控的、真实的并且不会伤害其他人。好的标尺，往往也不依赖于我们无法控制的他人评价。&lt;/li&gt;
&lt;li&gt;第六，真正能够持续带来快乐的，只有不断提升自我、不断达到目标、不断解决问题的过程，而任何存量指标，比如金钱的数量等等，一旦被我们达到，就不会再带来快乐了。&lt;/li&gt;
&lt;li&gt;第七，没有必要和别人比较。没有必要对自己感觉过于良好或者不好。有时候，我们觉得自己在某些方面表现平常，这本来就是生活的应有之义，接受就好。&lt;/li&gt;
&lt;li&gt;第八，与其抱怨自己没有灵感或者动力，不如直接上手去干事情。很多时候，灵感和动力是在劳动的过程中产生的。克服惰性与恐惧，踏踏实实开始行动，很多问题都会迎刃而解。&lt;/li&gt;
&lt;li&gt;第九，情感上的支持自有其意义和价值，但每个人的问题都要每个人自己去解决。亲密关系中最好的相处之道，不是施舍与依赖，而是坦诚与理解。&lt;/li&gt;
&lt;li&gt;第十，生命短暂，但生活充实的人在死亡面前就会变得坦然。我们所在乎的许多东西，在生命这个宏大的命题面前，可能根本就不值得为之纠结。我们要选择自己在乎什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;AI-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#AI-2&quot;&gt;¶&lt;/a&gt;AI&lt;/h2&gt;
&lt;p&gt;GPT in 60 Lines of NumPy&lt;br&gt;
&lt;a href=&quot;https://jaykmody.com/blog/gpt-from-scratch/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jaykmody.com/blog/gpt-from-scratch/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;投资&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#投资&quot;&gt;¶&lt;/a&gt;投资&lt;/h2&gt;
&lt;p&gt;在投资分析中，简单的往往是实用的。我的投资理念很简单：在好行业中挑选好公司，然后等待好价格时买入。与之相对应的投资分析工具也同样简单。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;波特五力分析。不要孤立地看待一只股票，而要把一个公司放到行业的上下游产业链和行业竞争格局的大背景中分析，重点搞清三个问题：
&lt;ul&gt;
&lt;li&gt;公司对上下游的议价权&lt;/li&gt;
&lt;li&gt;与竞争对手的比较优势&lt;/li&gt;
&lt;li&gt;行业对潜在进入者的门槛。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;杜邦分析。弄清公司过去５年究竟是靠什么模式赚钱的（高利润、高周转还是高杠杆），然后看公司战略规划、团队背景和管理执行力等是否与其商业模式一致。例如，
&lt;ul&gt;
&lt;li&gt;高利润模式的看其广告投入、研发投入、产品定位、差异化营销是否合理有效，&lt;/li&gt;
&lt;li&gt;高周转模式的看其运营管理能力、渠道管控能力、成本控制能力等是否具备&lt;/li&gt;
&lt;li&gt;高杠杆模式的看其风险控制能力、融资成本高低等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;估值分析。通过同业横比和历史纵比，加上市值与未来成长空间比，在显著低估时买入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这“三板斧”分别解决的是好行业、好公司和好价格的问题，挑出来的“三好学生”就是值得长期持有的好股票了。&lt;/p&gt;
&lt;h2 id=&quot;javascript-2&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#javascript-2&quot;&gt;¶&lt;/a&gt;javascript&lt;/h2&gt;
&lt;p&gt;js 爬虫&lt;br&gt;
&lt;a href=&quot;https://github.com/zloirock/core-js/blob/master/scripts/usage/usage.mjs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/zloirock/core-js/blob/master/scripts/usage/usage.mjs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;others&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#others&quot;&gt;¶&lt;/a&gt;others&lt;/h2&gt;
&lt;p&gt;TL;DR: The Top 6 Text Summarization APIs&lt;br&gt;
&lt;a href=&quot;https://rapidapi.com/blog/top-text-summarization-apis/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rapidapi.com/blog/top-text-summarization-apis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;随机卡通头像&lt;br&gt;
Vanilla JavaScript Library For Creating Avatars On The Client or Server-Side&lt;br&gt;
&lt;a href=&quot;https://webcodeflow.com/avataaars-js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://webcodeflow.com/avataaars-js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SQLite the only database you will ever need in most cases&lt;br&gt;
&lt;a href=&quot;https://www.unixsheikh.com/articles/sqlite-the-only-database-you-will-ever-need-in-most-cases.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.unixsheikh.com/articles/sqlite-the-only-database-you-will-ever-need-in-most-cases.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://news.ycombinator.com/item?id=34812527&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://news.ycombinator.com/item?id=34812527&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Goodbye, CSS-Tricks!&lt;br&gt;
&lt;a href=&quot;https://geoffgraham.me/goodbye-css-tricks/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://geoffgraham.me/goodbye-css-tricks/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://news.ycombinator.com/item?id=34864701&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://news.ycombinator.com/item?id=34864701&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Write a First Person Game in 2KB With Rust&lt;br&gt;
&lt;a href=&quot;https://grantshandy.github.io/posts/raycasting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://grantshandy.github.io/posts/raycasting/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数字人建模软件，有14天试用 &lt;a href=&quot;https://www.agisoft.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.agisoft.com/&lt;/a&gt; Process digital images and generate 3D spatial data. Fast and highly accurate.&lt;/p&gt;
&lt;p&gt;Deepfakes中文版，汉化版下载，各换脸软件下载（都已整理好）&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/woniu211111/article/details/107901535&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/woniu211111/article/details/107901535&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://github.com/deepfakes/faceswap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/deepfakes/faceswap&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/kaidikake/article/details/105224241&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/kaidikake/article/details/105224241&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;java-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-3&quot;&gt;¶&lt;/a&gt;java&lt;/h2&gt;
&lt;p&gt;Bistoury原理解析&lt;br&gt;
&lt;a href=&quot;https://cloud.tencent.com/developer/article/1553180&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1553180&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bistoury&lt;br&gt;
去哪儿网开源的一个对应用透明无侵入的Java应用诊断工具，可以让开发人员无需登录机器或修改系统，就可以从日志、内存、线程、类信息、调试、机器和系统属性等各个方面对应用进行诊断，提升开发人员诊断问题的效率和能力。内部集成了arthas，所以它是arthas的超集。其中两个比较有特色的功能：在线DEBUG、动态监控，就是基于 Instrumentation + ASM 做的。&lt;/p&gt;
&lt;p&gt;iBatis详解以及和MyBatis区别&lt;br&gt;
&lt;a href=&quot;https://www.iocoder.cn/MyBatis/x-plugins/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.iocoder.cn/MyBatis/x-plugins/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zzuhkp/article/details/123518287&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zzuhkp/article/details/123518287&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;spring-boot-starter-parent 和 spring-boot-dependencies 都进行了依赖管理，如果依赖中存在漏洞我们就需要紧急进行修复，它们之间的升级方式有所不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 spring-boot-starter-parent 而言，我们可以直接在 properties 中指定依赖的版本，因为在 spring-boot-dependencies 中包的坐标使用了这个属性值作为版本号&lt;/li&gt;
&lt;li&gt;对于 spring-boot-dependencies，如果要进行依赖升级，配置属性是不行的，需要在 spring-boot-dependencies 前面加上要升级的依赖的坐标&lt;/li&gt;
&lt;li&gt;如果要升级的依赖不是 spring-boot-starter-parent 或 spring-boot-dependencies 管理的依赖，还可以直接把它加到 dependencies 标签下，这样依据最短路径原则，我们直接配置的依赖会覆盖间接引入的依赖&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法-3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#算法-3&quot;&gt;¶&lt;/a&gt;算法&lt;/h2&gt;
&lt;p&gt;为什么 360 面试官说 Trie 树没用？&lt;br&gt;
&lt;a href=&quot;https://www.zhihu.com/question/27168
    
    </summary>
    
    
  </entry>
  
</feed>
